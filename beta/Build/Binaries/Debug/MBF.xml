<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MBF</name>
    </assembly>
    <members>
        <member name="T:MBF.Web.Blast.Hit">
            <summary>
            A database sequence with high similarity to the query sequence.
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.Hit._hsps">
            <summary>
            list of HSPs returned for this Hit.
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.Hit.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.Hit.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.Hit.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.Hit.Id">
            <summary>
            The string identifying the hit sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hit.Def">
            <summary>
            The "defline" or definition line for the hit
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hit.Accession">
            <summary>
            The accession number of the hit, as string
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hit.Length">
            <summary>
            The length of the hit sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hit.Hsps">
            <summary>
            The list of HSPs returned for this Hit.
            </summary>
        </member>
        <member name="T:MBF.Web.ClustalW.ClustalWResult">
            <summary>
            Represent a result of ClustalW Web service.
            ClustalW will return either of the following
             SequenceAlignment: If the operation performed is Alignment.
             Tree: If the operation performed is tree for multiple sequences.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWResult._sequenceAlignment">
            <summary>
            Sequence Alignment result of ClustalW
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWResult._tree">
            <summary>
            Tree result of ClustalW
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWResult.#ctor(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Constructor to set the SequenceAlignment result
            </summary>
            <param name="sequenceAlignment">Sequence alignment object</param>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWResult.#ctor(MBF.Phylogenetics.Tree)">
            <summary>
            Constructor to set the Tree result
            </summary>
            <param name="tree">Phylogentic Tree object</param>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWResult.SequenceAlignment">
            <summary>
            Gets the SequenceAlignment result of ClustalW
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWResult.Tree">
            <summary>
            Gets the Tree result of ClustalW
            </summary>
        </member>
        <member name="T:MBF.Util.UOPair`1">
            <summary>
            Defines a pair in which the order of the two items are always keep sorted. This struct is hashable and IComparable based
            on its elements.
            </summary>
            <typeparam name="T">The type of the pair's elements</typeparam>
        </member>
        <member name="M:MBF.Util.UOPair`1.#ctor(`0,`0)">
            <summary>
            Creates a new UOPair from new elements. The items may be the same and do not need to be in order. If T allows null, then null is allowed.
            The items must be IComparable{T}.
            </summary>
            <param name="e1">an element for the UOPair</param>
            <param name="e2">another element for the UOPair. The two elements may be the same and do not need to be in order.</param>
            <returns>A struct with the two items in sorted order.</returns>
        </member>
        <member name="M:MBF.Util.UOPair`1.GetEnumerator">
            <summary>
            Enumerates the pair in sorted order
            </summary>
            <returns>the elements of the pair in sorted order.</returns>
        </member>
        <member name="M:MBF.Util.UOPair`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the pair in sorted order
            </summary>
            <returns>the elements of the pair in sorted order.</returns>
        </member>
        <member name="M:MBF.Util.UOPair`1.Equals(System.Object)">
            <summary>
            Two UOPairs are equal if their (sorted) elements are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MBF.Util.UOPair`1.op_Equality(MBF.Util.UOPair{`0},MBF.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:MBF.Util.UOPair`1.op_Inequality(MBF.Util.UOPair{`0},MBF.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:MBF.Util.UOPair`1.op_LessThan(MBF.Util.UOPair{`0},MBF.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:MBF.Util.UOPair`1.op_GreaterThan(MBF.Util.UOPair{`0},MBF.Util.UOPair{`0})">
            <summary> </summary>
        </member>
        <member name="M:MBF.Util.UOPair`1.GetHashCode">
            <summary>
            A hashcode such that two UOPairs{T} with the same elements will have the same hashcode.
            Depending on the subtypes, the hash code may be different on 32-bit and 64-bit machines
            </summary>
        </member>
        <member name="M:MBF.Util.UOPair`1.ToString">
            <summary>
            Either (UO e1 e2) -- if elements differ -- or (UO 2x e)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.Util.UOPair`1.CompareTo(MBF.Util.UOPair{`0})">
            <summary>
            Compares the UOPair to the other UOPair and returns an indication of their relative values (based on the ICompare of their elements).
            </summary>
            <param name="other">the UOPair to compare to</param>
            <returns></returns>
        </member>
        <member name="P:MBF.Util.UOPair`1.First">
            <summary>
            The first of the two sorted items.
            </summary>
        </member>
        <member name="P:MBF.Util.UOPair`1.Second">
            <summary>
            The second of the two sorted items.
            </summary>
        </member>
        <member name="P:MBF.Util.UOPair`1.ElementsAreSame">
            <summary>
            True, if the elements are Equals; false, otherwise. If both elements are null, also true.
            </summary>
        </member>
        <member name="T:MBF.SnpItem">
            <summary>
            Represents a single nucleotide polymporphism (Snp) at a particular
            position for a certain chromosome, with the two possible allele
            values for that position.
            </summary>
        </member>
        <member name="M:MBF.SnpItem.Equals(MBF.SnpItem)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four properties. 
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            
            <param name="other">A SnpItem to compare with this SnpItem.</param>
        </member>
        <member name="M:MBF.SnpItem.Equals(System.Object)">
            <summary>
             Indicates whether the SnpItem is equal to another SnpItem. This compares
             the exact values of all four properties. 
             AlleleOne is compared with other.AlleleOne, and 
             AlleleTwo is compared with other.AlleleTwo.
            </summary>
            
            <returns>
            true if the current SnpItem is equal to the other SnpItem; otherwise, false.
            </returns>
            
            <param name="other">
            A SnpItem to compare with this SnpItem. If this parameter
            is not of type SnpItem, then false is returned.
            </param>
        </member>
        <member name="M:MBF.SnpItem.GetHashCode">
            <summary>
            Generates a unique hashcode based on the data members in the item.
            </summary>
        </member>
        <member name="P:MBF.SnpItem.Chromosome">
            <summary>
            Contains the chromosome number for the SNP
            </summary>
        </member>
        <member name="P:MBF.SnpItem.Position">
            <summary>
            Contains the position for the SNP within the sequence 
            (may be position in full sequence or offset within chromosome)
            </summary>
        </member>
        <member name="P:MBF.SnpItem.AlleleOne">
            <summary>
            Contains the first allele character for the SNP.
            </summary>
        </member>
        <member name="P:MBF.SnpItem.AlleleTwo">
            <summary>
            Contains the second allele character for the SNP.
            </summary>
        </member>
        <member name="T:MBF.Encoding.SequenceDecoder">
             <summary>
             This basic implementation of the ISequenceDecoder provides a one to one
             translation from byte values to ISequenceItem. It uses an IEncoding to determine
             what the mapping is for this translation. This encoding should be set
             in the constructor.
             
             Note that the decoded item will come from the IEncoding and not from an IAlphabet.
             You may need to use an EncodingMap to get from the ISequenceItems returned here
             and those of an alphabet, such as DNA or RNA.
             
             For example, using the following code:
             
             SequenceDecoder decoder = new SequenceDecoder(Encodings.Ncbi4NA);
             ISequenceItem encItem = decoder.Decode(4);
             
             In this case the resulting item will be:
             
             Encodings.Ncbi4NA.G
             
             You may want instead to have the result Alphabets.DNA.G. To do this add:
             
             EncodingMap map = EncodingMap.GetMapToAlphabet(Encodings.Ncbi4NA, Alphabets.DNA);
             ISequenceItem alphaItem = map.Convert(encItem)
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="T:MBF.Encoding.ISequenceDecoder">
            <summary>
            Defines the interface for an implementation of a decoder that is able
            to convert byte values representing ISequenceItems into instances of
            ISequenceItem.
            </summary>
        </member>
        <member name="M:MBF.Encoding.ISequenceDecoder.Decode(System.Byte)">
            <summary>
            Converts a byte value representation of a sequence item into an
            ISequenceItem representation from the IEncoding specified for this
            instance of the decoder.
            </summary>
            <param name="value">The internal byte representation of an ISequenceItem</param>
        </member>
        <member name="M:MBF.Encoding.SequenceDecoder.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Creates a sequence decoder by defining the encoding to use.
            </summary>
        </member>
        <member name="M:MBF.Encoding.SequenceDecoder.Decode(System.Byte)">
            <summary>
            Converts a byte value representation of a sequence item into an
            ISequenceItem representation from the IEncoding specified for this
            instance of the decoder.
            
            See the comments for the class to see how to convert the resulting
            item into a particular alphabet.
            </summary>
            <param name="value">The internal byte representation of an ISequenceItem</param>
            <returns>The ISequenceItem found by looking up they byte value in the decoder's IEncoding</returns>
        </member>
        <member name="M:MBF.Encoding.SequenceDecoder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Encoding.SequenceDecoder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceDecoder.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Encoding.SequenceDecoder.Encoding">
            <summary>
            The Encoding provides the map from symbol characters to byte values.
            Without a set encoding the decoder can not work.
            </summary>
        </member>
        <member name="T:MBF.IO.XsvSparseReader">
            <summary>
            This is used to read a sparse sequences from a text reader available as 
            character separated values in a line. There is one sequence item per line and 
            each record has two fields: position (int) and sequence item symbol (char).
            A comment line should be the first line for the reader and it contains
            the following fields separated by the separator character:
            1. the starting offset (in case this is an aligned sequence, 0 by default),
            2. the count of the sequence, and 
            3. the sequence ID string (newlines removed).
            e.g. reader for sparse sequence source with '#' as sequence ID prefix and ',' as separator 
            would read the following file contents:
            
            #0,100,A sparse sequence with 5 items
            12,A
            29,T
            56,G
            85,A
            32,C
            </summary>
        </member>
        <member name="T:MBF.IO.XsvTextReader">
            <summary>
            Common class for reading character separated value files 
            e.g. tab separated value (.tsv), Comma separated value (.csv), etc.
            There is "one" record per line. There are multiple columns per line, 
            each containing one field in the record.
            
            This class extends from MBFTextReader and masks properties that are not relevant.
            It adds properties for extracting fields in each line.
            It has properties for ignoring/extracting comment lines prefixed by comment characters.
            </summary>
        </member>
        <member name="T:MBF.IO.MBFTextReader">
            <summary>
            A MBFTextReader reads from a source of formatted text one line at a time, storing each line
            until the next is read.
            </summary>
            <remarks>
            The MBFTextReader class implements some simple helper methods, such as separating
            line headers from data, and allowing access to data fields using the 1-based, inclusive index
            notation common to the specs of many file formats. When a MBFTextReader is constructed,
            the first line of text is read immediately so that it is available without having to call
            GoToNextLine.  The initial call of GoToNextLine will therefore set Line equal to the
            second non-empty line of text.  If SkipBlankLines is true, lines containing only white space
            are passed over by GoToNextLine.
            </remarks>
        </member>
        <member name="F:MBF.IO.MBFTextReader.DefaultDataIndent">
            <summary>
            The default data indent used if none is supplied at construction = 12
            </summary>
        </member>
        <member name="F:MBF.IO.MBFTextReader._reader">
            <summary>
            Reader to read the content of text file
            </summary>
        </member>
        <member name="F:MBF.IO.MBFTextReader._dataIndent">
            <summary>
            The number of spaces that the data (i.e. non-header) portion of each line is indented.
            </summary>
        </member>
        <member name="F:MBF.IO.MBFTextReader._lineHeader">
            <summary>
            Line header
            </summary>
        </member>
        <member name="F:MBF.IO.MBFTextReader._lineData">
            <summary>
            Line of data
            </summary>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructs from a TextReader using the default data indent, and reads in the first
            line of text, with SkipBlankLines set to true.
            </summary>
            <param name="reader">The TextReader to read from.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructs from a TextReader using the given data indent, and reads in the first
            line of text, with SkipBlankLines set to true.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.TextReader,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructs from a TextReader using the given data indent, and reads in the first
            line of text.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlankLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a file name using the default data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="fileName">The filename to open.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a file name using the given data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="fileName">The filename to open.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a file name using the given data indent; opens a StreamReader on
            the file, and reads in the first line of text.
            </summary>
            <param name="fileName">The filename to open.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlankLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a Stream using the default data indent; opens a StreamReader on
            the Stream, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a Stream using the given data indent; opens a StreamReader on
            the Stream, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            Constructor from a Stream using the given data indent; opens a StreamReader on
            the Stream, and reads in the first line of text.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlankLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.#ctor(System.String,System.IO.TextReader,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFTextReader class.
            </summary>
            <param name="filename">The filename to open.</param>
            <param name="reader">The stream to read.</param>
            <param name="dataIndent">The number of spaces that data is indented within the 
            formatted text.</param>
            <param name="skipBlankLines">Whether to skip blank lines when reading the
            next line.</param>
        </member>
        <member name="M:MBF.IO.MBFTextReader.GoToNextLine">
            <summary>
            Reads the next line of text, storing it in the Line property.  If SkipBlankLines is
            true, any lines containing only white space are skipped.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFTextReader.SkipToNextSection">
            <summary>
            Reads until the next line starting with non-white space is reached, storing it
            in the Line property.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFTextReader.StartFromBegin">
            <summary>
            Sets the file offset to the beginning of the file.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFTextReader.GetLineField(System.Int32,System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <param name="end">1-based index of last character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="M:MBF.IO.MBFTextReader.GetLineField(System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="M:MBF.IO.MBFTextReader.ReadBlock(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Read a specific block from the starting position
            </summary>
            <param name="startingIndex">starting index of sequence</param>
            <param name="sequenceStartPosition">file position of sequence</param>
            <param name="blockLength">block size</param>
            <param name="sequenceLength">sequence length</param>
            <returns>block of string</returns>
        </member>
        <member name="M:MBF.IO.MBFTextReader.Dispose">
            <summary>
            If the TextReader was opened by this object, dispose it.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFTextReader.Dispose(System.Boolean)">
            <summary>
            Dispose the file reader instances
            </summary>
            <param name="disposing">If disposing equals true, dispose all resources</param>
        </member>
        <member name="P:MBF.IO.MBFTextReader.FileName">
            <summary>
            Gets file to read, or null if the file name is not known.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.Line">
            <summary>
            Gets current line of text.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LineNumber">
            <summary>
            Gets number of the current line of text.  (Line numbering starts at 1.)
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.SkipBlankLines">
            <summary>
            Gets or sets a value indicating whether or not blank lines should be skipped when GoToNextLine is called.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.DataIndent">
            <summary>
            Gets or sets number of spaces that the data (i.e. non-header) portion of each line is indented.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.HasLines">
            <summary>
            Gets a value indicating whether current line is not past the end of the formatted text.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LineHasHeader">
            <summary>
            Gets a value indicating whether current line contains anything other than white space to the
            left of the indent.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LineHasData">
            <summary>
            Gets a value indicating whether current line contains anything other than white space to the
            right of the indent.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LineHeader">
            <summary>
            Gets trimmed portion of the current line to the left of the data indent.
            Populated on demand.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LineData">
            <summary>
            Gets trimmed portion of the current line to the right of the data indent.
            Populated on demand.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFTextReader.LocationString">
            <summary>
            Gets human readable string giving the filename and current line number.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvTextReader._fields">
            <summary>
            Contains the list of fields split from the current Line
            </summary>
        </member>
        <member name="M:MBF.IO.XsvTextReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Creates a Reader to read character separated values as records with fields.
            
            </summary>
            <param name="reader">The source text reader to read from. 
            This should point to the start of the TextReader if this has a header row. 
            Else it can point to the start of a line in the TextReader.</param>
            <param name="separators">Characters that are valid separators between fields in a line</param>
            <param name="ignoreWhiteSpace">If true, the white spaces around fields are removed.</param>
            <param name="hasHeader">If true, the first line of the reader is treated as a header 
            row for the fields</param>
        </member>
        <member name="M:MBF.IO.XsvTextReader.GoToNextLine">
            <summary>
            Calls the GoToNextLine() of the base class.
            Skips comment lines if present and enabled.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.DataIndent">
            <summary>
            Inherited from MBFTextReader.
            The Xsv files do not have any indents. So override and always return 0.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.LineHeader">
            <summary>
            Inherited from MBFTextReader.
            The Xsv files do not have any line specific headers. So override and always return String.Empty.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.LineData">
            <summary>
            Inherited from MBFTextReader.
            Since the Xsv files do not have line headers, this returns the entire Line.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.Fields">
            <summary>
            Returns the list of fields in the current line as an array of strings. 
            This uses the separators defined for this reader to split the current line and 
            return the tokens. It trims the tokens if IgnoreWhiteSpace is true.
            If the current line is a comment line, this throws an exception.
            If end of the reader has been reached and HasLines is false, this returns null.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.Separators">
            <summary>
            Characters that separate each column in a line.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.TrimWhiteSpace">
            <summary>
            If true, this trims the white space around the field values (including header names). 
            Else all characters between the separators are returned as field value.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.FieldHeaders">
            <summary>
            Returns the field names that from the header row (first line) 
            if present (HasHeaders == true). Null otherwise.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.HasHeader">
            <summary>
            If true, the first row of this reader is considered as a header and
            read into FieldHeaders property.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.CommentLine">
            <summary>
            HasCommentLine is true and the current line starts with the CommentPrefix, 
            this returns the portion of the line after the comment prefix character.
            Null otherwise.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.CommentPrefixes">
            <summary>
            If not null or empty, lines starting with any of these characters this list 
            are treated as comment lines. This is effective only if SkipCommentLines is 
            set to true.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.SkipCommentLines">
            <summary>
            If true, this skips lines that are prefixed with the comment prefix characters.
            This is effective only if CommentPrefixes has one or more prefix characters.
            If set to true, comment lines cannot be read using the CommentLine property.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvTextReader.HasCommentLine">
            <summary>
            Returns true if the current line a valid comment line. 
            a current line should exist, CommentPrefixes should have one or more valid comment prefix 
            chars and the current line should start with one of these chars.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSparseReader.SkipCommentLines">
            <summary>
            Do not allow changing IgnoreComment since comments are required to 
            be enabled to set sequence I.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSparseReader.CommentPrefixes">
            <summary>
            Do not allow changing CommentPrefix since it is set by the constructor 
            as the sequenceIDPrefix.
            </summary>
        </member>
        <member name="M:MBF.IO.XsvSparseReader.#ctor(System.IO.TextReader,System.Char,System.Char)">
            <summary>
            Creates a reader for a sparse sequence that has sequence items as 
            character separated values, one per line.
            </summary>
            <param name="reader">The text reader with the contents of the sparse sequence</param>
            <param name="separator">The character that separates the sequence item position from its symbol. 
            This is also used to separate the offset, count, id in the sequence comment line.</param>
            <param name="sequenceIDPrefix">The character used to prefix the sequence comment line that 
            contains the offset, count, id in the sequence. this is used as a comment prefix character
            in the underlysing XsvTextReader.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseReader.GetSequenceId">
            <summary>
            If the current line is the sequence start line it returns the sequence ID field in it.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence id is not present as the third character separated field.
            </summary>
            <returns>The sequence ID string for this sparse sequence</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseReader.GetSequenceOffset">
            <summary>
            If the current line is the sequence start line it returns the sequence offset field.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence offset is not present as an integer in the first character separated field.
            </summary>
            <returns>The sequence offset integer for this sparse sequence</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseReader.GetSequenceCount">
            <summary>
            If the current line is the sequence start line it returns the sequence count field.
            This thows an exception if the current line is not prefixed by the sequence id prefix,
            or if the sequence count is not present as an integer in the second character separated field.
            </summary>
            <returns>The sequence count integer for this sparse sequence</returns>
        </member>
        <member name="T:MBF.IO.ISequenceRangeParser">
            <summary>
            The interface defining the methods for parsing ISequenceRange
            objects from files or readers.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeParser.ParseRange(System.String)">
            <summary>
            Parse a set of ISequenceRange objects from a file.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeParser.ParseRangeGrouping(System.String)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a file.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeParser.ParseRange(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects from a reader.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeParser.ParseRangeGrouping(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a reader.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeParser.Name">
            <summary>
            Gets the name of the sequence range parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeParser.Description">
            <summary>
            Gets the description of the sequence range parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscStructure">
            <summary>
            Any secondary or tertiary nucleotide structure or conformation that cannot be described by
            other Structure keys (stem_loop and D-loop).
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.FeatureItem">
            <summary>
            Feature of sequence present in the metadata can be stored in this class.
            All qualifiers of the feature will be stored as subitems.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.#ctor(System.String,MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new feature item with given key and location.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">An instance of ILocation.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.#ctor(System.String,System.String)">
            <summary>
            Creates feature item with given key and location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="key">The feature key.</param>
            <param name="location">Location string.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.#ctor(MBF.IO.GenBank.FeatureItem)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">FeatureItem instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetSubFeatures(MBF.IO.GenBank.SequenceFeatures)">
            <summary>
            Gets the sub features depending on the location information.
            </summary>
            <param name="sequenceFeatures">SequenceFeatures instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetSubSequence(MBF.ISequence)">
            <summary>
            Returns a new sequence from the specified sequence which contains bases of this feature as specified by 
            the location property of this feature.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetSubSequence(MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this feature location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the parent sequence and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetQualifier(System.String)">
            <summary>
            Returns list of qualifier values for the specified qualifier name.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetSingleTextQualifier(System.String)">
            <summary>
            Returns qualifier value for the specified qualifier name.
            Note: This method should be used to get the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Qualifier value.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.SetSingleTextQualifier(System.String,System.String)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to set the text value of a 
            qualifier which appears only once in a feature.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.GetSingleBooleanQualifier(System.String)">
            <summary>
            Returns bool value indicating whether the specified qualifier is there in the feature or not.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <returns>Returns true if the qualifier is found in the feature, otherwise false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.SetSingleBooleanQualifier(System.String,System.Boolean)">
            <summary>
            Sets the value for the specified qualifier name.
            Note: This method should be used to add a qualifier which 
            appears only once in a feature and whose value is none.
            </summary>
            <param name="qualifierName">Qualifier name.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.Clone">
            <summary>
            Creates a new FeatureItem that is a copy of the current FeatureItem.
            </summary>
            <returns>A new FeatureItem that is a copy of this FeatureItem.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.FeatureItem.System#ICloneable#Clone">
            <summary>
            Creates a new FeatureItem that is a copy of the current FeatureItem.
            </summary>
            <returns>A new object that is a copy of this FeatureItem.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.FeatureItem.Label">
            <summary>
            A label used to permanently tag a feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FeatureItem.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            omitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FeatureItem.Location">
            <summary>
            Gets the location of this feature in the sequence.
            This may also refers to other genbank files.
            For example, 
            join(100..200,J00194.1:1..150)
            In this example location specifies joining of bases from 100 to 200 from the sequence
            in which this location data present and bases from 1 to 150 from the sequence who's 
            accession number is J00194.1.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FeatureItem.Qualifiers">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscStructure.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscStructure feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscStructure.#ctor(System.String)">
            <summary>
            Creates new MiscStructure feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscStructure.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscStructure.#ctor(MBF.IO.GenBank.MiscStructure)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscStructure instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscStructure.Clone">
            <summary>
            Creates a new MiscStructure that is a copy of the current MiscStructure.
            </summary>
            <returns>A new MiscStructure that is a copy of this MiscStructure.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscStructure.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ILocationResolver">
            <summary>
            Interface to resolve the start and end positions of a location.
            Classes which implements this interface should resolve any ambiguity in 
            the start and end positions of a location.
            Please refer LocationResolver for default implementation of this interface.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.GetStart(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns start position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.GetEnd(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns end position of the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.GetSubSequence(MBF.IO.GenBank.ILocation,MBF.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by the location.
            If a feature location and the sequence in which the feature is present is 
            specified then the output sequence will contain the bases related to the feature.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.GetSubSequence(MBF.IO.GenBank.ILocation,MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.IsInStart(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the startdata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.IsInEnd(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the enddata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.IsInRange(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationResolver.Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="T:MBF.IO.GenBank.Enhancer">
            <summary>
            A cis-acting sequence that increases the utilization of (some) eukaryotic promoters,
            and can function in either orientation and in any location (upstream or downstream) 
            relative to the promoter.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Enhancer.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Enhancer feature item from the specified location.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Enhancer.#ctor(System.String)">
            <summary>
            Creates new Enhancer feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Enhancer.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Enhancer.#ctor(MBF.IO.GenBank.Enhancer)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Enhancer instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Enhancer.Clone">
            <summary>
            Creates a new Enhancer that is a copy of the current Enhancer.
            </summary>
            <returns>A new Enhancer that is a copy of this Enhancer.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Enhancer.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.CrossReferenceLink">
            <summary>
            CrossReferenceLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CrossReferenceLink.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CrossReferenceLink.#ctor(MBF.IO.GenBank.CrossReferenceLink)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">CrossReferenceLink instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CrossReferenceLink.Clone">
            <summary>
            Creates a new CrossReferenceLink that is a copy of the current CrossReferenceLink.
            </summary>
            <returns>A new CrossReferenceLink that is a copy of this CrossReferenceLink.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.CrossReferenceLink.System#ICloneable#Clone">
            <summary>
            Creates a new CrossReferenceLink that is a copy of the current CrossReferenceLink.
            </summary>
            <returns>A new object that is a copy of this CrossReferenceLink.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.CrossReferenceLink.Type">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            refering to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CrossReferenceLink.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:MBF.IO.BasicSequenceParser">
            <summary>
            This is an abstract class that provides some basic operations common to sequence
            parsers. It is meant to be used as the base class for parser implementations
            if the implementer wants to make use of default behavior.
            </summary>
        </member>
        <member name="T:MBF.IO.ISequenceParser">
            <summary>
            Implementations of this interface are designed to parse a file from a particular file
            format to produce an ISequence. For advanced users, the ability to select an encoding for
            the internal memory representation is provided. Implementations also have a default
            encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="T:MBF.IO.IParser">
            <summary>
            Interface that defines the common properties for an Parser.
            All other parsers must extend this Interface
            </summary>
        </member>
        <member name="P:MBF.IO.IParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.IParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.IParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.IParser.Encoding">
            <summary>
            Gets or sets encoding to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.IParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="F:MBF.IO.BasicSequenceParser._distinctSymbols">
            <summary>
            Holds distinct symbols while parsing the sequence, used to 
            identify alphabet for the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseStream(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The iterator of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader into a sequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Sequence instance.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.IdentifyAlphabet(MBF.IAlphabet,System.String)">
            <summary>
            Identifies Alphabet for the sepecified sequence.
            </summary>
            <param name="currentAlphabet">Currently known alphabet of the sequence, null if alphabet is unknown.</param>
            <param name="sequence">Sequence data.</param>
            <returns>Returns appropriate alphabet for the specified sequence and considering the specified current alphabet. 
            Returns null if any character in the sequence is unrecognized by DNA, RNA and Protien Alphabets.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.GetMoleculeType(System.String)">
            <summary>
            Maps the string to a particular Molecule type and returns
            the instance of mapped molecule type.
            </summary>
            <param name="type">The molecule type.</param>
            <returns>Returns the appropriate molecule type for the specified string.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.GetMoleculeType(MBF.IAlphabet)">
            <summary>
            Returns Molecule type depending on the specified alphabet.
            </summary>
            <param name="alphabet">Alphabet.</param>
            <returns>Returns molecule type.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.GetAlphabet(MBF.MoleculeType)">
            <summary>
            Returns the alphabet depending on the specified molecule type.
            </summary>
            <param name="moleculeType">Molecule type.</param>
            <returns>IAlphabet instance.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.ParseStream(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The iterator of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.StartCheckFromDna">
            <summary>
            Returns Dna alphabet if all the symbols in distinctSymbols are 
            known by Dna alphabet else it continue to verify with Rna alpabet by 
            calling StartCheckFromRna method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.StartCheckFromRna">
            <summary>
            Returns Rna alphabet if all the symbols in distinctSymbols are 
            known by Rna alphabet else it continue to verify with Protein alpabet by 
            calling StartCheckFromProtein method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.StartCheckFromProtein">
            <summary>
            Returns Protein alphabet if all the symbols in distinctSymbols are 
            known by protein alphabet else returns null.
            </summary>
            <returns>If all symbols in distinctSymbols are known by protein alphabet 
            then returns protein Alphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.IsDnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Dna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.IsRnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Rna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceParser.IsProteinAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Protein.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="P:MBF.IO.BasicSequenceParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.  If this is not set, an alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects.  If this is not set, the default
            for the given alphabet will be used.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceParser.Name">
            <summary>
            Gets the name of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact name of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceParser.Description">
            <summary>
            Gets the description of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.Edge">
            <summary>
            Data storage representation of an Edge in Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.Edge._nodeCount">
            <summary>
            Count of nodes
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.Edge.lockObject">
            <summary>
            object to lock the nodeCount
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.Edge.#ctor(MBF.Algorithms.SuffixTree.Edge)">
            <summary>
            Initializes a new instance of the Edge class
                Edge from given edge
            </summary>
            <param name="edge">Input Edge</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.Edge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Index of First Character
                Index of Last Character
                Start node of edge
            </summary>
            <param name="startIndex">Index of the First Character</param>
            <param name="endIndex">Index of the Last Character</param>
            <param name="startNode">Node where the Edge starts</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.Edge.#ctor">
            <summary>
            Initializes a new instance of the Edge class
                Set the Start node to root (-1)
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.Edge.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Start node of Edge
            </summary>
            <param name="startNode">Start Node</param>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.StartIndex">
            <summary>
            Gets or sets index of first character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.EndIndex">
            <summary>
            Gets or sets index of last character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.StartNode">
            <summary>
            Gets or sets node where the Edge starts
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.EndNode">
            <summary>
            Gets or sets node where the Edge ends
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.IsLeaf">
            <summary>
            Gets or sets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.Edge.NodeCount">
            <summary>
            Gets or sets the total count of nodes.
            </summary>
        </member>
        <member name="T:MBF.SimilarityMatrices.SimilarityMatrix">
            <summary>
            Representation of a matrix that contains similarity scores for every 
            pair of symbols in an alphabet. BLOSUM and PAM are well-known examples.
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.GapChar">
            <summary>
            Gap character used in aligned sequence strings.
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.GapCode">
            <summary>
            Value used in the similarity matrix and alignment codes when a new gap is created.
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix._encoding">
            <summary>
            Encoding that maps the symbols and ordering used in the similarity matrix to the symbols used in the sequences.
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix._similarityMatrix">
            <summary>
            Array containing the scores for each pair of symbols.
            The indices of the array are byte values of alphabet symbols.
            The byte values are obtained based on the encoding used.
            </summary>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.#ctor">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            </summary>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.#ctor(MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            Constructs one of the standard similarity matrices.
            </summary>
            <param name="matrixId">
            Matrix to load, BLOSUM and PAM currently supported.
            The enum StandardSimilarityMatrices contains list of available matrices.
            </param>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.#ctor(System.IO.TextReader)">
            <remarks>
            File or stream format:
            There are two slightly different formats.
            <para>
            For custom similarity matrices:
            First line is descriptive name, will be stored as a string.
            Second line define the molecule type.  Must be "DNA", "RNA", or "Protein".
            Third line is alphabet (symbol map). It contains n characters and optional white space.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines
            </para>
            <para>
            In some cases the molecule type is implicit in the matrix.  This is true for the
            supported standard matrices (BLOSUM and PAM series at this point), and for the standard
            encodings IUPACna, NCBIA2na, NCBI2na, NCBI4na, and NCBIeaa.
            For these cases:
            First line is descriptive name, will be stored as a string.
            Second line is the encoding name for the standard encodings (IUPACna, NCBIA2na, NCBI2na, NCBI4na, or NCBIeaa)
                or the alphabet (symbol map) for the standard matrices.
            Following lines are values for each row of matrix
            Must be n numbers per line, n lines; or in the case of the supported encoding, sufficient
            entries to handle all possible indices (0 through max index value).
            </para>
            </remarks>
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            Constructs SimilarityMatrix from an input stream.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream</param>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class
            Constructs SimilarityMatrix from an input file.
            </summary>
            <param name="fileName">File name of input sequence</param>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.#ctor(System.Int32[][],System.String,System.String,MBF.MoleculeType)">
            <summary>
            Initializes a new instance of the SimilarityMatrix class.
            Constructs a custom SimilarityMatrix.
            </summary>
            <param name="similarityMatrix">2-d array containing the correlation scoring matrix.</param>
            <param name="symbolMap">Symbols (alphabet) associated with the array.</param>
            <param name="name">Description of the custom matrix.</param>
            <param name="moleculeType">Type of molecule for which this matrix is designed.  Must be DNA, RNA or Protein.</param>
            <remarks>
            The array must be NxN, where there are N symbols in the symbolMap.
            The ordering of the symbolMap must match the ordering in the array.
            </remarks>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.ValidateSequence(MBF.ISequence)">
            <summary>
            Confirms that there is a symbol in the similarity matrix for every
            symbol in the sequence.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <returns>true if sequence is valid.</returns>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.ToByteArray(System.String)">
            <summary>
            Converts sequence string to byte array for use by alignment engines.
            Mapping from character to integer uses index ordering associated with matrix.
            </summary>
            <param name="sequence">String of sequence symbols</param>
            <returns>Byte array representation of input sequence</returns>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.ToByte(System.Char)">
            <summary>
            Converts character symbol of SequenceItem to byte for use by alignment engines.
            </summary>
            <param name="symbol">character symbol of SequenceItem</param>
            <returns>Byte representation of input symbol</returns>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.ToString(System.Byte[])">
            <summary>
            Converts sequence as integer array to string using SimilarityMatrix symbol map.
            </summary>
            <param name="array">Byte array corresponding to sequence</param>
            <returns>String representation of sequence</returns>
        </member>
        <member name="M:MBF.SimilarityMatrices.SimilarityMatrix.LoadFromStream(System.IO.TextReader,MBF.MoleculeType)">
            <summary>
            Reads similarity matrix from a stream.  File (or stream) format defined
            above with constructors to create SimilarityMatrix from stream or file.
            </summary>
            <param name="reader">Text reader associated with the input sequence stream</param>
            <param name="moleculeType">Molecule type supported by SimilarityMatrix</param>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.Name">
            <summary> 
            Gets or sets descriptive name of the particular SimilarityMatrix being used. 
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.Matrix">
            <summary>
            Gets or sets similarity matrix values in a 2-D integer array.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.MatrixEncoding">
            <summary>
            Gets or sets value of encoding
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.MatrixMoleculeType">
            <summary>
            Gets or sets molecule type for matrix.
            DNA, RNA, NA or Protein; used to determine whether encoding items are AminoAcid or Nucleotide
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of matrix at [row, col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column
            </param>
            <returns>Score value of matrix at [row, col]</returns>
        </member>
        <member name="P:MBF.SimilarityMatrices.SimilarityMatrix.Item(MBF.ISequenceItem,MBF.ISequenceItem)">
            <summary>
            Returns value of matrix at row, column corresponding to input ISequenceItems.
            </summary>
            <param name="rowItem">ISequenceItem on the row</param>
            <param name="colItem">ISequenceItem on the column</param>
            <returns>Score at matrix[row, col]</returns>
        </member>
        <member name="T:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix">
            <summary>
            List of available standard similarity matrices.
            </summary>
            <remarks>
            BLOSUM matrices reference:
            S Henikoff and J G Henikoff,
            "Amino acid substitution matrices from protein blocks."
            Proc Natl Acad Sci U S A. 1992 November 15; 89(22): 10915–10919.  PMCID: PMC50453
            <para>
            Available at:
            <![CDATA[http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=EBI&pubmedid=1438297]]>
            </para>
            <para>
            PAM matrices reference:
            Dayhoff, M.O., Schwartz, R. and Orcutt, B.C. (1978), 
            "A model of Evolutionary Change in Proteins", 
            Atlas of protein sequence and structure (volume 5, supplement 3 ed.), 
            Nat. Biomed. Res. Found., p. 345-358, ISBN 0912466073
            </para>
            </remarks>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum45">
            <summary>
            BLOSUM45 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum50">
            <summary>
            BLOSUM50 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum62">
            <summary>
            BLOSUM62 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum80">
            <summary>
            BLOSUM80 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Blosum90">
            <summary>
            BLOSUM90 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam250">
            <summary>
            PAM250 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam30">
            <summary>
            PAM30 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.Pam70">
            <summary>
            PAM70 Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.AmbiguousDna">
            <summary>
            Simple DNA Similarity Matrix
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.AmbiguousRna">
            <summary>
            RNA with ambiguous
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.SimilarityMatrix.StandardSimilarityMatrix.DiagonalScoreMatrix">
            <summary>
            Diagonal matrix
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.PairwiseOverlapAligner">
            <summary>
            Implements the pairwise overlap alignment algorithm described in Chapter 2 of
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner">
            <summary>
            Base class for dynamic programming alignment algorithms, including NeedlemanWunsch, 
            SmithWaterman and PairwiseOverlap.
            The basic reference for this code (including NW, SW and Overlap) is Chapter 2 in 
            Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; Cambridge Press; 1998
            The variable names in these classes follow the notation in Durbin et al.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.IPairwiseSequenceAligner">
            <summary>
            A sequence alignment algorithm that aligns exactly two 
            sequences. This may diverge from ISequenceAligner at some 
            point; meanwhile, it's important to maintain the distinction
            (e.g., assembly requires a pairwise algorithm)
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.ISequenceAligner">
            <summary>
            A sequence aligner is an algorithm which takes N sequences as input and produces an 
            alignment of the sequences as output.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ISequenceAligner.AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            AlignSimple aligns the set of input sequences using the linear gap model (one gap penalty), 
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ISequenceAligner.Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>List of sequence alignments.</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.Name">
            <summary>
            Gets the name of the sequence alignment algorithm being
            implemented. This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.Description">
            <summary>
            Gets the description of the sequence alignment algorithm being
            implemented.This is intended to give developer
            some information of the alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.SimilarityMatrix">
            <summary>
            Gets or sets value of similarity matrix
            The similarity matrix determines the score for any possible pair
            of symbols that are encountered at a common location across the 
            sequences being aligned.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.GapOpenCost">
            <summary>
            Gets or sets value of GapOpenCost
            The GapOpenCost is the cost of inserting a gap character into 
            a sequence.
            </summary>
            <remarks>
            In the linear gap model, all gaps use this cost. In the affine gap
            model, the GapExtensionCost below is also used.
            </remarks>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAligner.GapExtensionCost">
            <summary>
            Gets or sets value of GapExtensionCost 
            The GapExtensionCost is the cost of extending an already existing gap.
            This is used for the affine gap model, not used for the linear gap model.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.IPairwiseSequenceAligner.AlignSimple(MBF.ISequence,MBF.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            AlignSimple uses a linear gap penalty.
            </summary>
            <param name="sequence1">first input sequence</param>
            <param name="sequence2">second input sequence</param>
            <returns>List of Aligned Sequences</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.IPairwiseSequenceAligner.Align(MBF.ISequence,MBF.ISequence)">
            <summary>
            A convenience method - we know there are exactly two inputs.
            Align uses the affine gap model, which requires a gap open and a gap extension penalty.
            </summary>
            <param name="sequence1">first input sequence</param>
            <param name="sequence2">second input sequence</param>
            <returns>List of Aligned Sequences</returns>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapCode">
            <summary>
            Signifies gap in aligned sequence (stored as int[]) during traceback.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._similarityMatrix">
            <summary> Similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._gapOpenCost">
            <summary> 
            Gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example _gapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._gapExtensionCost">
            <summary> 
            Gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example _gapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FScore">
            <remark>
            The F matrix holds the scores and source.  See Durbin et al. for details.
            The F matrix uses the first column and first row to store boundary condition.
            This means the the input sequence at, for example, col 4 will map to col 5 in the F matrix.
            Gotoh's optimization is used to reduce memory usage
            </remark>
            <summary>
            _FScore is the score for each cell, used for linear gap penalty.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FScoreDiagonal">
            <summary>
            _FScoreDiagonal is used to store diagonal value from previous row.
            Used for Gotoh optimization of linear gap penalty
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSource">
            <summary>
            _FSource stores the source for the each cell in the F matrix.
            Source is coded as 0 diagonal, 1 up, 2 left, see enum SourceDirection below
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._MaxScore">
            <summary>
            _MaxScore stores the maximum value for the affine gap penalty implementation.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._MaxScoreDiagonal">
            <summary>
            _MaxScoreDiagonal is used to store maximum value from previous row.
            Used for Gotoh optimization of affine gap penalty
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._IxGapScore">
            <summary>
            Stores alignment score for putting gap in 'x' sequence for affine gap penalty implementation.
            Alignment score if xi aligns to a gap after yi
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._IyGapScore">
            <summary>
            Stores alignment score for putting gap in 'y' sequence for affine gap penalty implementation.
            Alignment score if yi aligns to a gap after xi
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._nRows">
            <summary>
            Number of rows in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._nCols">
            <summary>
            Number of columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._a">
            <summary>
            First input sequence as byte arrays, for internal use.
            This is zero based, so use care when working with F matrix.
            <see cref="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSource"/>.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._b">
            <summary>
            second input sequence as byte arrays, for internal use.
            This is zero based, so use care when working with F matrix.
            <see cref="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSource"/>.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._rowBlockSize">
            <summary>
            Row size of the block of Matrix
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._colBlockSize">
            <summary>
            Column size of the block of Matrix
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.#ctor">
            <summary>
            Initializes a new instance of the DynamicProgrammingPairwiseAligner class.
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(MBF.ISequence,MBF.ISequence)">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.MBF#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Aligns two sequences using a linear gap parameter, using existing gap open cost and similarity matrix.
            Set these using GapOpenCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(MBF.ISequence,MBF.ISequence)">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="sequence1">First input sequence.</param>
            <param name="sequence2">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.MBF#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Aligns two sequences using the affine gap metric, a gap open penalty and a gap extension penalty.
            This method uses the existing gap open and extension penalties and similarity matrix.
            Set these using GapOpenCost, GapExtensionCost and SimilarityMatrix properties before calling this method.
            </summary>
            <param name="inputSequences">List of sequences to align.  Must contain exactly two sequences.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AlignSimple(MBF.SimilarityMatrices.SimilarityMatrix,System.Int32,MBF.ISequence,MBF.ISequence)">
            <summary>
            Pairwise alignment of two sequences using a linear gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a linear gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Align(MBF.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,MBF.ISequence,MBF.ISequence)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GetOffset(System.Byte[])">
            <summary>
            Return the starting position of alignment of sequence1 with respect to sequence2.
            </summary>
            <param name="aligned">Aligned sequence.</param>
            <returns>The number of initial gap characters.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the F matrix.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (row,col) of the F matrix.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            Uses linear gap penalty.
            </summary>
            <param name="row">row of cell to fill</param>
            <param name="col">col of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets member variables that are unique to a specific algorithm.
            These must be reset for each alignment, initialization in the constructor
            only works for the first call to AlignSimple.  This routine is called at the beginning
            of each AlignSimple method.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetOptimalScoreSimple">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for linear gap penalty
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetOptimalScoreAffine">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for affine gap penalty
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the matrix for affine gap implementation.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (row,col) of the matrix for affine gap implementation.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            Uses affine gap penalty.
            </summary>
            <param name="row">row of cell to fill</param>
            <param name="col">col of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions in the F matrix for the one gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets boundary conditions for first row in F matrix for linear gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for zeroth column in F matrix for linear gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for the dynamic programming matrix for the affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets boundary conditions for first row in dynamic programming matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for the zeroth column in dynamic programming 
            matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback step for the relevant algorithm.  Each algorithm must override this
            since the traceback differs for the different algorithms.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment 
            of sequence1 with respect to sequence2.</param>
            <param name="startOffsets">Start indices of aligned sequences with respect to input sequences.</param>
            <param name="endOffsets">End indices of aligned sequences with respect to input sequences.</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>Optimum score for this alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixSimple">
            <summary>
            Fills F matrix for linear gap penalty implementation.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixSimpleBlock(System.Int32,System.Int32)">
            <summary>
            Sets cell (initialRow, initialColumn) to 
            (initialRow + _rowBlockSize, initialColumn + _colBlockSize) of the F matrix
            </summary>
            <param name="initialRow">Intial row in block.</param>
            <param name="initialColumn">Intial column in block.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixAffine">
            <summary>
            Fills matrix data for affine gap penalty implementation.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.CalculateOptimalBlockSize">
            <summary>
            Calculates the optimal block size.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.FillMatrixAffineBlock(System.Int32,System.Int32)">
            <summary>
            Sets cell (initialRow, initialColumn) to 
            (initialRow + _rowBlockSize, initialColumn + _colBlockSize) of the F matrix
            </summary>
            <param name="initialRow">Intial row in block.</param>
            <param name="initialColumn">Intial column in block.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ValidateAlignInput(MBF.ISequence,MBF.ISequence)">
            <summary>
            Validates input sequences and gap penalties.
            Checks that input sequences use the same alphabet.
            Checks that each symbol in the input sequences exists in the similarity matrix.
            Checks that gap penalties are less than or equal to 0.
            Throws exception if sequences fail these checks.
            Writes warning to ApplicationLog if gap penalty or penalties are positive.
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesSimple(System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and source for one gap parameter.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and source for one gap parameter.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesAffine(System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and matrix elements for general affine gap case.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SetCellValuesAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets general case cell score and matrix elements for general affine gap case.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.BuildOutOfMemoryMessage(System.Exception,System.Boolean)">
            <summary>
            Builds detailed error message for OutOfMemory exception.
            </summary>
            <param name="ex">Exception to throw</param>
            <param name="isAffine">True for affine case, false for one gap penalty.</param>
            <returns>Message to send to user.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.InitializeAlign(MBF.ISequence)">
            <summary>
            Initializations to be done before aligning sequences.
            Sets consensus resolver property to correct alphabet.
            </summary>
            <param name="inputSequence">input sequence</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimpleAlignPrimer(MBF.SimilarityMatrices.SimilarityMatrix,System.Int32,MBF.ISequence,MBF.ISequence)">
            <summary>
            Performs initializations and validations required 
            before carrying out sequence alignment.
            Initializes only gap open penalty. Initialization for
            gap extension, if required, has to be done seperately. 
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.CollateResults(MBF.ISequence,MBF.ISequence,System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Int32},System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Convert aligned sequences back to Sequence objects, load output SequenceAlignment object
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
            <param name="alignedSequences">List of aligned sequences</param>
            <param name="offsets">List of offsets for each aligned sequence</param>
            <param name="optScore">Optimum alignment score</param>
            <param name="startOffsets">Start indices of aligned sequences with respect to input sequences.</param>
            <param name="endOffsets">End indices of aligned sequences with respect to input sequences.</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>SequenceAlignment with all alignment information</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.AddSimpleConsensusToResult(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Adds consensus to the alignment result.  At this point, it is a very simple algorithm
            which puts an ambiguity character where the two aligned sequences do not match.
            Uses X and N for protein and DNA/RNA alignments, respectively.
            </summary>
            <param name="alignment">
            Alignment to which to add the consensus.  This is the result returned by the main Align
            or AlignSimple method, which contains the aligned sequences but not yet a consensus sequence.
            </param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSimpleScore">
            <remark>
            The F matrix holds the scores and source.  See Durbin et al. for details.
            The F matrix uses the first column and first row to store boundary condition.
            This means the the input sequence at, for example, col 4 will map to col 5 in the F matrix.
            </remark>
            <summary>
            _FScore is the score for each cell, used for single gap penalty.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._FSimpleSource">
            <summary>
            _FSource stores the source for the each cell in the F matrix.
            Source is coded as 0 diagonal, 1 up, 2 left, see enum SourceDirection below
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._M">
            <summary>
            _M stores the diagonal value for the affine gap penalty implementation.
            See Durbin et al. for details.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._Ix">
            <summary>
            _Ix stores the gap in x value for the affine gap penalty implementation.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner._Iy">
            <summary>
            _Iy stores the gap in y value for the affine gap penalty implementation.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SimilarityMatrix">
            <summary> Gets or sets similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.UseEARTHToFillMatrix">
            <summary>
            Gets or sets an value indicating whether to use parallelization using 
            EARTH technique to fill the Simple and Affine matrices.
            Reference: http://helix-web.stanford.edu/psb01/martins.pdf
            Steps: 
             1. Calculate the number of rows and column for the smaller blocks of matrix.
             2. Start the task to build the block of matrix for which all the dependent blocks are available.
              2.1 Fill the matrix in the block.
              2.2 Repeat step (2) for the rest of block in both vertical and horizontal direction.
            Assuming there are 3 * 3 block in Matrix
            Following shows the progress of blocks in Matrix in each iteration
            "+" block completed
            "-" block in progress (parallelly in tasks)
            Fill Matrix till Anti-Diagonal
            
            Iteration 1
            -
            
            Iteration 2
            + -
            -
            
            Iteration 3
            + + -
            + -
            -
            
            Iteration 4
            + + +
            + + -
            + -
            
            Iteration 5
            + + +
            + + +
            + + -
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell">
            <summary>
            Position details of cell with best score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Column">
            <summary>
            Column number of cell with optimal score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Row">
            <summary>
            Row number of cell with optimal score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Cell">
            <summary>
            Cell number of cell with optimal score
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the OptScoreCell struct.
            Creates best score cell with the input position values
            </summary>
            <param name="row">Row Number</param>
            <param name="column">Column Number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the OptScoreCell struct.
            Creates best score cell with the input position values
            </summary>
            <param name="row">Row Number</param>
            <param name="column">Column Number</param>
            <param name="cell">Cell Number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.op_Equality(MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell,MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell)">
            <summary>
            Overrides == Operator
            </summary>
            <param name="cell1">First cell</param>
            <param name="cell2">Second cell</param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.op_Inequality(MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell,MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell)">
            <summary>
            Overrides != Operator
            </summary>
            <param name="cell1">First cell</param>
            <param name="cell2">Second cell</param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.Equals(System.Object)">
            <summary>
            Override Equals method
            </summary>
            <param name="obj">Object for comparison</param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.OptScoreCell.GetHashCode">
            <summary>
            Returns the Hash code
            </summary>
            <returns>Hash code of OptScoreCell</returns>
        </member>
        <member name="T:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection">
            <summary> Direction to source of cell value, used during traceback. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Diagonal">
            <summary> Source was up and left from current cell. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Up">
            <summary> Source was up from current cell. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Left">
            <summary> Source was left of current cell. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Stop">
            <summary> During traceback, stop at this cell (used by SmithWaterman). </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DynamicProgrammingPairwiseAligner.SourceDirection.Invalid">
            <summary> Error code, if cell has code Invalid error has occurred. </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseOverlapAligner._optScore">
            <summary>
            Stores optimal score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseOverlapAligner._optScoreCells">
            <summary>
            Stores details of all cells with best score
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap – uses linear gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap – Uses affine gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary condition for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary condition for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses one gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetOptimalScoreSimple">
            <summary>
            Optimal score updated in FillCellSimple. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetOptimalScoreAffine">
            <summary>
            Optimal score updated in FillCellAffine. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback step for pairwise overlap alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment 
            of sequence1 with respect to sequence2.</param>
            <param name="startOffsets">Start indices of aligned sequences with respect to input sequences.</param>
            <param name="endOffsets">End indices of aligned sequences with respect to input sequences.</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap – uses linear gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for Overlap – Uses affine gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary condition for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses one gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseOverlapAligner.SetBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for pairwise overlap.
            Use bc 0 so that there is no penalty for gaps at the ends.
            Uses affine gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseOverlapAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Pairwise-Overlap algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseOverlapAligner.Description">
            <summary>
            Gets the description of the Pairwise-Overlap algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            PairwiseOverlapAligner class implements.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.ClusterBuilder">
            <summary>
            Clustering is a process in which individual matches are grouped in larger
            set called Cluster. The matches in cluster are decided based on paramters 
            like fixed difference allowed, maximum difference allowed, minimum score
            and separation factor that should be satisfied.
            This class implements IClusterBuilder interface.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.IClusterBuilder">
            <summary>
            Contract defined to implement class that creates clusters.
            Takes list of maximum unique matches as input and creates clusters
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.IClusterBuilder.BuildClusters(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Build the list of clusters for given MUMs
            </summary>
            <param name="matches">List of MUMs</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.DefaultFixedSeparation">
            <summary>
            Default fixed Separation
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.DefaultMaximumSeparation">
            <summary>
            Default Maximum Separation
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.DefaultMinimumScore">
            <summary>
            Default Minimum Output Score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.DefaultSeparationFactor">
            <summary>
            Default separation factor
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.SecondSequenceStart">
            <summary>
            Property refering to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder.ClusterID">
            <summary>
            Property refering to ID of Cluster
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.ClusterBuilder._unionFind">
            <summary>
            This is a list of number which are used to generate the ID of cluster
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ClusterBuilder class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.BuildClusters(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the Cluster from given inputs of matches.
            Steps are as follows:
                1. Sort MUMs based on query sequence start.
                2. Removing overlapping MUMs (in both sequences) and MUMs with same 
                    diagonal offset (usually adjacent)
                3. Check for  separation between two MUMs
                4. Check the diagonal separation
                5. If MUMs passes above conditions merge them in one cluster.
                6. Sort MUMs using cluster id
                7. Process clusters (Joining clusters)</summary>
            <param name="matches">List of maximum unique matches</param>
            <returns>List of Cluster</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.FilterMatches(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Removes the duplicate and overlapping maximal unique matches.
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.Sort(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatchExtension},System.String)">
            <summary>
            Sort by Cluster by specified column
            </summary>
            <param name="matches">List of matches</param>
            <param name="sortBy">Column to be sorted by</param>
            <returns>Sorted list of cluster</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.GetClusters(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Process the matches and create clusters
            </summary>
            <param name="matches">List of matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.Find(System.Int32)">
            <summary>
            Return the id of the set containing "a" in Union-Find.
            </summary>
            <param name="matchIndex">Index of the maximal unique match in UnionFind</param>
            <returns>Cluster id</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.Union(System.Int32,System.Int32)">
            <summary>
            Group the matches in Union
            </summary>
            <param name="firstMatchIndex">Id of first cluster</param>
            <param name="secondMatchIndex">Id of second cluster</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ClusterBuilder.ProcessCluster(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Cluster},System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatchExtension},System.Int32)">
            <summary>
            Process the clusters
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="matches">List of matches</param>
            <param name="clusterSize">Size of cluster</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ClusterBuilder.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ClusterBuilder.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ClusterBuilder.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ClusterBuilder.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.IAlignmentAttributes">
            <summary>
            Aligners will implements this interface to list the attributes supported
            or required.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes.
            </summary>
        </member>
        <member name="T:MBF.IO.SequenceAlignmentFormatters">
            <summary>
            SequenceAlignmentFormatters class is an abstraction class which provides instances
            and lists of all SequenceAlignmentFormatter currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentFormatters._sam">
            <summary>
            An instance of SAMFormatter class which is capable of
            saving a ISequenceAlignment according to the SAM file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentFormatters._bam">
            <summary>
            An instance of BAMFormatter class which is capable of
            saving a ISequenceAlignment according to the BAM file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentFormatters.all">
            <summary>
            List of all supported sequence formatters.
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentFormatters.FindFormatterByFile(System.String)">
            <summary>
            Returns sequence alignment formatter which supports the specified file.
            </summary>
            <param name="fileName">File name for which the formatter is required.</param>
            <returns>If found returns the formatter as ISequenceAlignmentFormatter else returns null.</returns>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentFormatters.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentFormatters.GetAlignmentFormatters(System.Boolean)">
            <summary>
            Gets all registered sequence alignment formatters in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered formatters</returns>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentFormatters.SAM">
            <summary>
            Gets an instance of SAMFormatter class which is capable of
            saving a ISequenceAlignment according to the SAM file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentFormatters.BAM">
            <summary>
            Gets an instance of BAMFormatter class which is capable of
            saving a ISequenceAlignment according to the BAM file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentFormatters.All">
            <summary>
            Gets the list of all sequence alignment formatters which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.SAMParser">
            <summary>
            A SAMParser reads from a source of text that is formatted according to the SAM
            file specification, and converts the data to in-memory SequenceAlignmentMap object.
            For advanced users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest SAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="T:MBF.IO.IVirtualSequenceAlignmentParser">
            <summary>
            Interface provides Data Virtualization on the parser. If the parser wants to support
            Data Virtualization, it needs to come from this interface.
            </summary>
        </member>
        <member name="T:MBF.IO.ISequenceAlignmentParser">
            <summary>
            Interface that defines a contract for parser to parse sequence alignment files. 
            For advanced users, the ability to select an encoding for the internal memory 
            representation is provided. Implementations also have a default encoding for 
            each alphabet that may be encountered.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.IVirtualSequenceAlignmentParser.ParseAlignedSequence(MBF.IO.SequencePointer)">
            <summary>
            Parses the sequence range based on the sequence
            </summary>
            <param name="pointer">Sequence pointer to the sequence.</param>
            <returns>IAlignedSequence object.</returns>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceAlignmentParser.EnforceDataVirtualization">
            <summary>
            Explicitly enable data virtualization with this parser.
            </summary>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceAlignmentParser.IsDataVirtualizationEnabled">
            <summary>
            Data virtualization is enabled or not with the parser
            </summary>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceAlignmentParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size (in KBs) to enforce data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.HeaderLinePattern">
            <summary>
            Constant to hold SAM alignment header line pattern.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.OptionalFieldLinePattern">
            <summary>
            Constant to hold SAM optional filed line pattern.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.QualityFormatType">
            <summary>
            Holds the qualitative value type.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.OptionalFieldRegex">
            <summary>
            Holds optional field regular expression object.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.tabDelim">
            <summary>
            Constant for tab and space delimeter.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser.colonDelim">
            <summary>
             Constant for colon delimeter.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._isDataVirtualizationEnforced">
            <summary>
            Indicates whether data virtualization has been explictly enabled.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._lineCount">
            <summary>
            The number of lines that have been parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._fileName">
            <summary>
            The name of the file being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._isReadOnly">
            <summary>
            Indicates whether the parsed sequence is read-only.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._headerLength">
            <summary>
            The length of the SAM header.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._sidecarFileProvider">
            <summary>
            Holds a pointer to the sidecar file for the parsed sequence
            when data virtualization is enabled.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._mbfStreamReader">
            <summary>
            A stream reader to use data virtualization on biological sequence files.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMParser._enforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            A constructor to set the encoding used.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSAMHeader(System.String)">
            <summary>
            Parses SAM alignment header from specified file.
            </summary>
            <param name="fileName">file name.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSAMHeader(System.IO.TextReader)">
            <summary>
            Parses SAM alignment header from specified text reader.
            </summary>
            <param name="reader">Text reader.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSAMHeader(MBF.IO.MBFTextReader)">
            <summary>
            Parses SAM alignment header from specified MBFTextReader.
            </summary>
            <param name="mbfReader">MBF text reader.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseQualityNSequence(MBF.IO.SAM.SAMAlignedSequence,MBF.IAlphabet,MBF.Encoding.IEncoding,System.String,System.String,MBF.ISequence,System.Boolean)">
            <summary>
            Parases sequence data and quality values and updates SAMAlignedSequence instance.
            </summary>
            <param name="alignedSeq">SAM aligned Sequence.</param>
            <param name="alphabet">Alphabet of the sequence to be created.</param>
            <param name="Encoding">Encoding to use while creating sequence.</param>
            <param name="sequencedata">Sequence data.</param>
            <param name="qualitydata">Quality values.</param>
            <param name="refSeq">Reference sequence if known.</param>
            <param name="isReadOnly">Flag to indicate whether the new sequence is required to in readonly or not.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSAMHeader(MBF.IO.MBFStreamReader)">
            <summary>
            Parses SAM alignment header from specified MBFStreamReader.
            </summary>
            <param name="mbfReader">MBF text reader.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.IO.TextReader)">
            <summary>
            Parses a list of sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.String)">
            <summary>
            Parses a list of sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a sequence alignment file.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseOne(System.String)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a sequence alignment file.</param>
            <returns>ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Parse(System.String)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="fileName">file name.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="fileName">file name.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a sequence alignment texts from a text reader.
            </summary>
            <param name="reader">Text reader.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a sequence alignment texts from a file.
            </summary>
            <param name="reader">Text reader.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses alignments in SAM format from a reader into a SequenceAlignmentMap object.
            </summary>
            <param name="mbfReader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new SequenceAlignmentMap instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses SequenceAlignmentMap using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSequence(System.String,System.Boolean,MBF.IAlphabet,MBF.Encoding.IEncoding,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Parse a single sequence using a MBFTextReader.
            </summary>
            <param name="bioText">sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <param name="alphabet">Alphabet of the sequences.</param>
            <param name="encoding">Required encoding.</param>
            <param name="referenceSequences">Reference sequences.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSequence(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parse a single sequence using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSequence(MBF.IO.MBFTextReader,System.Boolean,MBF.IAlphabet,MBF.Encoding.IEncoding,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Parse a single sequence using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <param name="alphabet">Alphbatet to use while creating sequence instance.</param>
            <param name="encoding">Encoding to use. Pass Null to consider default value.</param>
            <param name="referenceSeqeunces">Reference sequences if known, else pass null.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSequences(MBF.IO.SAM.SequenceAlignmentMap,MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses all the sequences in a SAM file.
            </summary>
            <param name="seqAlignment">SequenceAlignmentMap object</param>
            <param name="mbfReader">A reader for the sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the sequences in the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseSequences(MBF.IO.MBFStreamReader)">
            <summary>
            Parses all the sequences in a SAM file.
            This method is used only in data virtualization scenarios.
            </summary>
            <param name="mbfReader">A reader for the sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.ParseAlignedSequence(MBF.IO.SequencePointer)">
            <summary>
            Parses the sequence represented by the specified sequence pointer.
            </summary>
            <param name="pointer">
            A sequence pointer which holds information about the sequence to be retrieved.
            </param>
            <returns>IAlignedSequence object.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Dispose">
            <summary>
            If the TextReader was opened by this object, dispose it.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMParser.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing">If true disposes resourses held by this instance.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.Alphabet">
            <summary>
            The alphabet to use for sequences in parsed SequenceAlignmentMap objects.
            Always returns DNA.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.Encoding">
            <summary>
            The encoding to use for sequences in parsed SequenceAlignmentMap objects.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.RefSequences">
            <summary>
            Reference sequences, used to resolve "=" symbol in the sequence data.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.IsDataVirtualizationEnabled">
            <summary>
            Indicates whether data virtualization is enabled or not.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMParser.EnforceDataVirtualization">
            <summary>
            Enforces data virtualization on the parser.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Graph.DeBruijnEdge">
            <summary>
            Represents an edge in the de bruijn graph.
            Stores orientation (same or opposite) and whether the edge is valid.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnEdge.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            </summary>
            <param name="isSameOrientation">Orientation of edge</param>
            <param name="isValid">Indicates if this is a valid edge</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnEdge.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DeBruijnEdge class.
            Creates a 'valid' edge by default.
            </summary>
            <param name="orientation">Orientation of edge</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnEdge.IsSameOrientation">
            <summary>
            Gets or sets a value indicating whether orientation of edge is same or opposite.
            If two connected nodes have overlapping sequence, the orientation is 
            true (same orientation). If sequence of one overlaps with the reverse-complement 
            of other's sequence, the orientation is false (opposite orientation).
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnEdge.IsValid">
            <summary>
            Gets or sets a value indicating whether this is a valid edge.
            Used to temporarily remove edges from graph.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMFormatter">
            <summary>
            Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the BAM file format. 
            Documentation for the latest BAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="T:MBF.IO.ISequenceAlignmentFormatter">
            <summary>
            Implementations of this interface write an ISequenceAlignment to a particular location, usually a
            file. The output is formatted according to the particular file format. A method is
            also provided for quickly accessing the content in string form for applications that do not
            need to first write to file.
            </summary>
        </member>
        <member name="T:MBF.IO.IFormatter">
            <summary>
            Interface that defines the common properties for a formatter.
            All other formatters must extend this Interface
            </summary>
        </member>
        <member name="P:MBF.IO.IFormatter.Name">
            <summary>
            Gets the name of the sequence alignment formatter being
            implemented. This is intended to give the developer some
            information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.IFormatter.Description">
            <summary>
            Gets the description of the sequence alignment formatter being
            implemented. This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.IFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.TextWriter)">
            <summary>
            Writes an ISequenceAlignment to the location specified by the writer.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.String)">
            <summary>
            Writes an ISequenceAlignment to the specified file.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <param name="filename">The name of the file to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequenceAlignments to a writer.
            </summary>
            <param name="sequenceAlignments">The sequence alignments to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequence alignments.</param>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.String)">
            <summary>
            Write a collection of ISequenceAlignments to a file.
            </summary>
            <param name="sequenceAlignments">The sequenceAlignments to write.</param>
            <param name="filename">The name of the file to write the formatted sequence alignments.</param>
        </member>
        <member name="M:MBF.IO.ISequenceAlignmentFormatter.FormatString(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Converts an ISequenceAlignment to a formatted string.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="F:MBF.IO.BAM.BAMFormatter.MaxBlockSize">
            <summary>
            Maximum Block size used while compressing the BAM file.
            64K = 65536 bytes.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.TextWriter)">
            <summary>
            Always throws NotSupportedException as BAM formatter does not support writing to textfile.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="writer">Text writer.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.String)">
            <summary>
            Writes specified alignment object to a file. The output is formatted according to the BAM specification.
            Also creates index file in the same location that of the specified filename depending on the CreateIndexFile property.
            If the specified filename is sample.bam then the index file name will be sample.bam.bai.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="filename">BAM file name to write BAM data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.String,System.String)">
            <summary>
            Writes specified alignment object to a file. 
            The output is formatted according to the BAM specification.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="bamFilename">BAM filename to write BAM data.</param>
            <param name="indexFilename">BAM index filename to write index data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.Stream,MBF.IO.BAM.BAMIndexFile)">
            <summary>
            Writes specified alignment object to a stream.
            The output is formatted according to the BAM specification.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write BAM data.</param>
            <param name="indexWriter">BAMIndexFile to write index data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.Stream)">
            <summary>
            Writes specified alignment object to a stream.
            The output is formatted according to the BAM specification.
            Note that this method does not create index file.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write BAM data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.String,System.String)">
            <summary>
            Writes specified alignment object to a file. 
            The output is formatted according to the BAM specification.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="bamFilename">BAM filename to write BAM data.</param>
            <param name="indexFilename">BAM index filename to write index data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.String)">
            <summary>
            Writes specified alignment object to a file. The output is formatted according to the BAM specification.
            Also creates index file in the same location that of the specified filename.
            If the specified filename is sample.bam then the index file name will be sample.bam.bai.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="filename">BAM file name to write BAM data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.IO.Stream)">
            <summary>
            Writes specified alignment object to a stream. 
            The output is formatted according to the BAM specification.
            Note that this method does not create index file.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write BAM data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.IO.Stream,MBF.IO.BAM.BAMIndexFile)">
            <summary>
            Writes specified alignment object to a stream. 
            The output is formatted according to the BAM specification.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write BAM data.</param>
            <param name="indexWriter">BAMIndexFile to write index data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.IO.TextWriter)">
            <summary>
            Always throws NotSupportedException as BAM format does not supports multiple sequence alignment in a file.
            </summary>
            <param name="sequenceAlignments">Collection of sequence alignment objects.</param>
            <param name="writer">Text writer.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.String)">
            <summary>
            Always throws NotSupportedException as BAM format does not supports multiple sequence alignment in a file.
            </summary>
            <param name="sequenceAlignments">Collection of sequence alignment objects.</param>
            <param name="filename">filename to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.FormatString(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Always throws NotSupportedException as BAM format is binary format.
            </summary>
            <param name="sequenceAlignment">SequenceAlignmentMap object.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.CreateBAMIndexFile(System.String)">
            <summary>
            Creates index file for the specified bam file.
            </summary>
            <param name="bamFileName">BAM file name.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.CreateBAMIndexFile(System.String,System.String)">
            <summary>
            Creates index file for the specified bam file.
            </summary>
            <param name="bamFileName">BAM file name.</param>
            <param name="indexFileName">BAM index file name to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.CompressBAMFile(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compress the specified stream (reader) and writes to the specified stream (writer).
            </summary>
            <param name="reader">Stream to read from.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteHeader(MBF.IO.SAM.SAMAlignmentHeader,System.IO.Stream)">
            <summary>
            Writes BAM header to the specified stream in BAM format.
            </summary>
            <param name="header">SAMAlignmentHeader object</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteAlignedSequence(MBF.IO.SAM.SAMAlignmentHeader,MBF.IO.SAM.SAMAlignedSequence,System.IO.Stream)">
            <summary>
            Writes SAMAlignedSequence to specified stream.
            </summary>
            <param name="header">Header from SAM object.</param>
            <param name="alignedSeq">SAMAlignedSequence object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.CreateBAMIndexFile(System.IO.Stream,MBF.IO.BAM.BAMIndexFile)">
            <summary>
            Creates BAMIndex object from the specified BAM file and writes to specified BAMIndex file.
            </summary>
            <param name="compressedBAMStream"></param>
            <param name="indexFile"></param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteSequenceAlignment(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.Stream,MBF.IO.BAM.BAMIndexFile)">
            <summary>
            Writes sequence alignment to specified stream.
            </summary>
            <param name="sequenceAlignment">Sequence alignment object</param>
            <param name="writer">Stream to write.</param>
            <param name="indexFile">BAMIndex file.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteUncompressed(MBF.IO.SAM.SequenceAlignmentMap,System.IO.Stream,System.Boolean)">
            <summary>
            Writes specified sequence alignment to stream.
            The output is formatted according to the BAM structure.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write.</param>
            <param name="createSortedFile">If this flag is true output file will be sorted.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteUncompressedSortedBAM(MBF.IO.SAM.SequenceAlignmentMap,System.IO.Stream)">
            <summary>
            Writes specified sequence alignment to stream according to the specified sorted order.
            The output is formatted according to the BAM structure.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetBGZFStructure(System.IO.Stream)">
            <summary>
            Gets BGZF structure from the GZipStream compression.
            </summary>
            <param name="compressedStream">BAM file which is compressed according to BGZF compression.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetEOFBlock">
            <summary>
            Gets empty block.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.WriteAlignedSequence(MBF.IO.SAM.SAMAlignedSequence,System.IO.Stream)">
            <summary>
            Writes SAMAlignedSequence to specified stream.
            </summary>
            <param name="alignedSeq">SAMAlignedSequence object.</param>
            <param name="writer">Stream to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetEncodedSequence(MBF.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets encoded sequence according to the BAM specification.
            </summary>
            <param name="alignedSeq"></param>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetQualityValue(MBF.ISequence)">
            <summary>
            Gets quality values from specified sequence.
            </summary>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetEncodedCIGAR(System.String)">
            <summary>
            Gets encoded CIGAR value.
            </summary>
            <param name="cigar">CIGAR</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMFormatter.GetOptionalFieldIntValueSize(System.String)">
            <summary>
            Returns,
             1 if the int value can be held in an unsinged byte.
            -1 if the int value can be held in a singed byte.
             2 if the int value can be held in an unint16 (ushort).
            -2 if the int value can be held in an int16 (short).
             4 if the int value can be held in an uint32.
            -4 if the int value can be held in an int32.
             0 if the specified value can't parsed by an uint.
            </summary>
            <param name="value">String representing int value.</param>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.Name">
            <summary>
            Gets the name of the sequence alignment formatter being
            implemented. This is intended to give the developer some
            information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.Description">
            <summary>
            Gets the description of the sequence alignment formatter being
            implemented. This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.CreateSortedBAMFile">
            <summary>
            Gets or sets the value indicating that whether the output file to be sorted or not.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.CreateIndexFile">
            <summary>
            Gets or sets the value indicating that whether to create index file or not.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMFormatter.SortType">
            <summary>
            Gets or sets type of sort needed.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.Factory">
            <summary>
            This is a static Factory class, that enables user to easily create a best suited
            suffix tree builder for the user.
            1. If # of edges is within dictionary count limitation, use KurtzSuffixTreeBuilder.
            2. If memory required of tree is within the physical RAM, use SimpleSuffixTree
                a. Internally SimpleSuffixTree uses persistent suffix tree if memory required exceeds limitiation.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.Factory.DictionaryLimit32Bit">
            <summary>
            Maximum numbers of entries allowed in dictionary on 32-bit m/c
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.Factory.DictionaryLimit64Bit">
            <summary>
            Maximum numbers of entries allowed in dictionary on 64-bit m/c
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.Factory.CreateNew(MBF.ISequence)">
            <summary>
            Create a most appropriate suffix tree builder based on the input parameters and
            environment variables and return.
            </summary>
            <param name="sequence">Input sequence</param>
            <returns>Suffix tree builder instance</returns>
            Cannot dispose "SimpleSuffixTreeBuilder" as it is returned by the method
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap">
            <summary>
             Class storing information of a single map between read and contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap.StartPositionOfContig">
            <summary>
            Gets or sets start position of contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap.StartPositionOfRead">
            <summary>
            Gets or sets start position of read. 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap.Length">
            <summary>
            Gets or sets length of map between read and contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap.ReadOverlap">
            <summary>
            Gets or sets overlap of read and contig
            FullOverlap
            ------------- Contig
               ------     Read
            PartialOverlap
            -------------       Contig
                       ------   Read
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.PairwiseAlignedSequence">
            <summary>
            PairwiseAlignedSequence is a class containing the single aligned unit of pairwise alignment.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.AlignedSequence">
            <summary>
            AlignedSequence is a class containing the single aligned unit of alignment.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.IAlignedSequence">
            <summary>
            Interface to hold single aligned unit of alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IAlignedSequence.Metadata">
            <summary>
            Gets information about the AlignedSequence, like score, offsets, consensus, etc..
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IAlignedSequence.Sequences">
            <summary>
            Gets list of sequences, aligned as part of an alignment.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignedSequence.#ctor">
            <summary>
            Default Constructor - Initializes a new instance of the AlignedSequence class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignedSequence.#ctor(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Initializes a new instance of the AlignedSequence class
            Internal constructor to create AlignedSequence instance from IAlignedSequence.
            </summary>
            <param name="alignedSequence">IAlignedSequence instance.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization - Initializes a new instance of the AlignedSequence class.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the AlignedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignedSequence.Metadata">
            <summary>
            Gets information about the AlignedSequence, like score, offsets, consensus, etc..
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignedSequence.Sequences">
            <summary>
            Gets list of sequences involved in the alignment.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignedSequence.ConsensusKey">
            <summary>
            Constant string indicating consensus in meta-data
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignedSequence.ScoreKey">
            <summary>
            Constant string indicating alignment score in meta-data
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignedSequence.FirstOffsetKey">
            <summary>
            Constant string indicating offset of first sequence in alignment
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignedSequence.SecondOffsetKey">
            <summary>
            Constant string indicating offset of second sequence in alignment
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseAlignedSequence.#ctor">
            <summary>
            Default constructor - Initializes a new instance of the PairwiseAlignedSequence class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseAlignedSequence.#ctor(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Initializes a new instance of the PairwiseAlignedSequence class
            Internal constructor for creating new instance of 
            PairwiseAlignedSequence from specified IAlignedSequence.
            </summary>
            <param name="alignedSequence">IAlignedSequence instance.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseAlignedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PairwiseAlignedSequence class
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.FirstSequence">
            <summary>
            Gets or sets Alignment of First Sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.SecondSequence">
            <summary>
            Gets or sets Alignment of Second Sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.Consensus">
            <summary>
            Gets or sets Consensus of FirstSequence and SecondSequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.Score">
            <summary>
            Gets or sets Score of the alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.FirstOffset">
            <summary>
            Gets or sets Offset of FirstSequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignedSequence.SecondOffset">
            <summary>
            Gets or sets Offset of SecondSequence
            </summary>
        </member>
        <member name="T:MBF.Web.WebAccessorResponse">
            <summary>
            Represent an object containing the result of web request.
            </summary>
        </member>
        <member name="P:MBF.Web.WebAccessorResponse.StatusDescription">
            <summary>
            Gets or sets HTTP status string returned from the operation
            </summary>
        </member>
        <member name="P:MBF.Web.WebAccessorResponse.ResponseString">
            <summary>
            Gets or sets response as a single string
            </summary>
        </member>
        <member name="P:MBF.Web.WebAccessorResponse.IsSuccessful">
            <summary>
            Gets or sets a value indicating whether the resquest was successful
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.IBlastServiceHandler">
            <summary>
            This interface will serve to define an element set which will be common 
            to the underlying web-service and transport protocol related information.
            </summary>
        </member>
        <member name="T:MBF.Web.IServiceHandler">
            <summary>
            Interface that must be extended by all the service providers of Microsoft 
            Biology Foundation. This interface contains properties that are common to any 
            type of service provided by MBF.
            </summary>
        </member>
        <member name="P:MBF.Web.IServiceHandler.Description">
            <summary>
            Gets user-friendly implementation description
            </summary>
        </member>
        <member name="P:MBF.Web.IServiceHandler.Name">
            <summary>
            Gets user-friendly implementation name
            </summary>
        </member>
        <member name="P:MBF.Web.IServiceHandler.Configuration">
            <summary>
            Gets or sets settings for web access, such as user-agent string and 
            proxy configuration
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.GetRequestStatus(System.String)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.SubmitRequest(MBF.ISequence,MBF.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the MBF.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.SubmitRequest(System.Collections.Generic.IList{MBF.ISequence},MBF.Web.Blast.BlastParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence
            Implementation should make use of the MBF.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequences">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Request Identifier</returns>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.GetResult(System.String,MBF.Web.Blast.BlastParameters)">
            <summary>
            Gets the search results for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into MBF
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.FetchResultsSync(System.String,MBF.Web.Blast.BlastParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="requestIdentifier">Identifier for the request of interest</param>
            <param name="parameters">Blast input parameters</param>
            <returns>The search results</returns>
        </member>
        <member name="M:MBF.Web.Blast.IBlastServiceHandler.CancelRequest(System.String)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="requestIdentifier">Identifier for the request of interest.</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="E:MBF.Web.Blast.IBlastServiceHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.ThreadParameter">
            <summary>
            This class has the list of properties that needs to be passed on to
            the BackGroundWorker thread to execute the search request.
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.ThreadParameter._requestIdentifier">
            <summary>
            Unique Search ID generated by MBF
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.ThreadParameter._sequence">
            <summary>
            Sequence object
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.ThreadParameter._parameter">
            <summary>
            Blast parameters object
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.ThreadParameter.#ctor(System.String,MBF.ISequence,MBF.Web.Blast.BlastParameters)">
            <summary>
            Initializes a new instance of the ThreadParameter class. 
            </summary>
            <param name="requestIdentifier">Job identifier</param>
            <param name="sequence">Sequence Object</param>
            <param name="parameter">Blast Parameters</param>
        </member>
        <member name="P:MBF.Web.Blast.ThreadParameter.RequestIdentifier">
            <summary>
            Unique Search ID generated by MBF
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.ThreadParameter.Sequence">
            <summary>
            Gets the sequence object
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.ThreadParameter.Parameters">
            <summary>
            Gets the Blast parameters
            </summary>
        </member>
        <member name="T:MBF.Util.HashSetExtensions">
            <summary>
            Extension methods related to HashSet
            </summary>
        </member>
        <member name="M:MBF.Util.HashSetExtensions.AddNewOrOldRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of values to a hashset. It is OK if the values are already of the hashset.
            </summary>
            <typeparam name="T">The type of the hashset's elements</typeparam>
            <param name="hashSet">The hashset to add values to</param>
            <param name="sequence">A sequence of values to add to the hashset.</param>
        </member>
        <member name="T:MBF.Nucleotide">
            <summary>
            The nucleotide implementation of ISequenceItem allows for items that
            when placed in sequence make up a DNA or RNA strand.
            </summary>
        </member>
        <member name="T:MBF.ISequenceItem">
            <summary>
            The data point values stored within an ISequence implementation.
            This data model allows the association of a particular value with
            a character symbol, and a byte value used for encoding or serializing
            the item. For examples of implementations of this interface see the
            Nucleotide and AminoAcid classes.
            </summary>
        </member>
        <member name="M:MBF.ISequenceItem.Clone">
            <summary>
            Gets the clone copy of this ISequence Item.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.Value">
            <summary>
            An encoding value, unique for the particular item within its
            alphabet.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.Symbol">
            <summary>
            A character symbol representing the item. For instance in DNA,
            symbols would include G, A, T, and C. Also possible are symbols
            representing gaps, termination characters, or ambiguities.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.Name">
            <summary>
            A human readable and display appropriate name for the item.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.IsGap">
            <summary>
            Returns true if this ISequenceItem is a Gap character, otherwise returns false.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.IsAmbiguous">
            <summary>
            Returns true if this ISequenceItem is Ambiguous, otherwise returns false.
            </summary>
        </member>
        <member name="P:MBF.ISequenceItem.IsTermination">
            <summary>
            Returns true if this ISequenceItem is a Termination character, otherwise returns false.
            </summary>
        </member>
        <member name="F:MBF.Nucleotide.val">
            <summary>
            An encoding value, unique for the particular item within its alphabet.
            </summary>
        </member>
        <member name="F:MBF.Nucleotide.symbol">
            <summary>
            A character symbol representing the item. For instance in DNA,
            symbols would include G, A, T, and C. Also possible are symbols
            representing gaps, termination characters, or ambiguities.
            </summary>
        </member>
        <member name="F:MBF.Nucleotide.name">
            <summary>
            A human readable and display appropriate name for the item. For
            example, 'Adenine' or 'Cytosine'. For ambigous items, 'Adenine or Cytosine'.
            Also acceptable are 'Gap' or 'Termination'.
            </summary>
        </member>
        <member name="M:MBF.Nucleotide.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the nucleotide</param>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
        </member>
        <member name="M:MBF.Nucleotide.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data. Nucleotides
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
        </member>
        <member name="M:MBF.Nucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the nucleotide</param>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
            <param name="isGap">Indicates if this is a gap character</param>
            <param name="isAmbiguous">Indicates if this is an ambigous character</param>
        </member>
        <member name="M:MBF.Nucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Creates an nucleotide representation based on its data. Nucleotides
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the nucleotide</param>
            <param name="name">A readable name for the nucleotide</param>
            <param name="isGap">Indicates if this is a gap character</param>
            <param name="isAmbiguous">Indicates if this is an ambigous character</param>
        </member>
        <member name="M:MBF.Nucleotide.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Nucleotide class.
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Nucleotide.#ctor">
            <summary>
            Prevents a default instance of the Nucleotide class from being created.
            </summary>
        </member>
        <member name="M:MBF.Nucleotide.Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:MBF.Nucleotide.MBF#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:MBF.Nucleotide.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Nucleotide.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the Nucleotide object.
            </summary>
            <returns>Clone of this nucleotide</returns>
        </member>
        <member name="M:MBF.Nucleotide.Equals(System.Object)">
            <summary>
            Overrides Object Equals.
            Two nucleotides are judged equal, if they have the same symbol
            </summary>
            <param name="obj">Object to be compared with</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MBF.Nucleotide.GetHashCode">
            <summary>
            Get hash code for nucleotide
            Uses symbol for calculation
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="P:MBF.Nucleotide.Value">
            <summary>
            Gets encoding value of this item.
            </summary>
        </member>
        <member name="P:MBF.Nucleotide.Symbol">
            <summary>
            Gets the character symbol representing the item.
            </summary>
        </member>
        <member name="P:MBF.Nucleotide.Name">
            <summary>
            Gets the display name for the item.
            </summary>
        </member>
        <member name="P:MBF.Nucleotide.IsGap">
            <summary>
            Gets a value indicating whether this Nucleotide is a Gap character.
            </summary>
        </member>
        <member name="P:MBF.Nucleotide.IsAmbiguous">
            <summary>
            Gets a value indicating whether this Nucleotide is Ambiguous.
            </summary>
        </member>
        <member name="P:MBF.Nucleotide.IsTermination">
            <summary>
            Gets a value indicating whether this Nucleotide is a Termination item
            Always returns false, as Nucleotides do not have a defined termination character.
            </summary>
        </member>
        <member name="T:MBF.Encoding.IEncoding">
            <summary>
            An encoding represents the mapping of an alphabet of sequence
            characters to an internal memory representation in bytes. Thus a
            small encoding implementation for DNA might show that:
            
            G goes to 0
            A goes to 1
            T goes to 2
            C goes to 3
            
            The implementations may be based on a community standard, such as
            those accepted by NCBI or IUPAC. They can also be individually
            tailored to an encoding familiar to the user.
            </summary>
        </member>
        <member name="M:MBF.Encoding.IEncoding.LookupByValue(System.Byte)">
            <summary>
            Returns one of the items in the encoding based on the byte value
            of that item.
            </summary>
            <param name="value">The byte value to look up.</param>
        </member>
        <member name="M:MBF.Encoding.IEncoding.LookupBySymbol(System.Char)">
            <summary>
            Returns one of the items in the encoding based on the character
            symbol of that item.
            </summary>
            <param name="symbol">The character symbol to look up, such as 'G' for Guanine.</param>
        </member>
        <member name="M:MBF.Encoding.IEncoding.LookupBySymbol(System.String)">
            <summary>
            Returns one of the items in the encoding based on the symbol of
            that item. If the string is only composed of one character then the
            result should be the same as calling the char overload of this method.
            For instance in an amino acid encoding "Ala" or "A" could return the
            item representing Alanine.
            </summary>
            <param name="symbol">The byte value to look up.</param>
        </member>
        <member name="M:MBF.Encoding.IEncoding.GetComplement(System.Byte)">
            <summary>
            Gets the byte value of the complemented symbol of the symbol which has a given byte value.
            Ex: A = 65, T = 75. Complement of A is T => complement of 65 is 75
            </summary>
            <param name="value">Value of which complement has to be found</param>
            <returns>Complemented byte value</returns>
        </member>
        <member name="M:MBF.Encoding.IEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="P:MBF.Encoding.IEncoding.Name">
            <summary>
            The name of the entire encoding. Examples from the standards
            may include 'NCBI4na' or 'IUPACaa'.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IEncoding.HasGaps">
            <summary>
            Indicates if the encoding has one or more characters that represent
            a gap.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IEncoding.HasAmbiguity">
            <summary>
            Indicates if the encoding has one or more characters that represent
            an ambigous item (i.e. and item for which it is not precisely known
            what it represents)
            </summary>
        </member>
        <member name="P:MBF.Encoding.IEncoding.HasTerminations">
            <summary>
            Indicates if the encoding has one or more characters that represent
            terminal items.
            </summary>
        </member>
        <member name="T:MBF.IO.ISequenceRangeFormatter">
            <summary>
            Writes out SequenceRange lists or groupings to a file.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeFormatter.Format(System.Collections.Generic.IList{MBF.ISequenceRange},System.String)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeFormatter.Format(System.Collections.Generic.IList{MBF.ISequenceRange},System.IO.TextWriter)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeFormatter.Format(MBF.SequenceRangeGrouping,System.String)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceRangeFormatter.Format(MBF.SequenceRangeGrouping,System.IO.TextWriter)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeFormatter.Name">
            <summary>
            Gets the name of the sequence range formatter being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeFormatter.Description">
            <summary>
            Gets the description of the sequence range formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.ISequenceRangeFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.StemLoop">
            <summary>
            Hairpin; a double-helical region formed by base-pairing between adjacent (inverted) complementary sequences 
            in a single strand of RNA or DNA.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.StemLoop.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new StemLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:MBF.IO.GenBank.StemLoop.#ctor(System.String)">
            <summary>
            Creates new StemLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the StemLoop.</param>
        </member>
        <member name="M:MBF.IO.GenBank.StemLoop.#ctor(MBF.IO.GenBank.StemLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other StemLoop instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.StemLoop.Clone">
            <summary>
            Creates a new StemLoop that is a copy of the current StemLoop.
            </summary>
            <returns>A new StemLoop that is a copy of this StemLoop.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StemLoop.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Minus35Signal">
            <summary>
            A conserved hexamer about 35 bp upstream of the start point of bacterial transcription units.
            Consensus=TTGACa or TGTTGACA.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Minus35Signal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus35Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus35Signal.#ctor(System.String)">
            <summary>
            Creates new Minus35Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus35Signal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus35Signal.#ctor(MBF.IO.GenBank.Minus35Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus35Signal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus35Signal.Clone">
            <summary>
            Creates a new Minus35Signal that is a copy of the current Minus35Signal.
            </summary>
            <returns>A new Minus35Signal that is a copy of this Minus35Signal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus35Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.LocationRange">
            <summary>
            Holds start and end position of a feature in a sequence.
            For example: 
            If location of a feature is "join(1..100,J00194.1:100..202)"
            then we need to two LocationRange instance to hold this location.
            First LocationRange will be
                  Accession     - empty
                  StartPosition -1
                  EndPosition   - 100
            Second LocationRange will be
                  Accession     - J00194.1
                  StartPoistion - 100
                  EndPosition   1 200
                  
            Note that the GenBank feature location can be parsed using static method "GetLocationRanges" in GenBankMetadata class.
            For example:
             GenBankMetadata.GetLocationRanges("join(1..100,J00194.1:100..202)") this will return list of LocationRanges.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified start and end position.
            </summary>
            <param name="startPosition">Start position of the feature.</param>
            <param name="endPosition">End position of the feature.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationRange.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new LocationRange instance from the specified accession, start and end position.
            </summary>
            <param name="accession">Accession of the sequence.</param>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position.</param>
        </member>
        <member name="P:MBF.IO.GenBank.LocationRange.Accession">
            <summary>
            Gets or sets the Accession.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LocationRange.StartPosition">
            <summary>
            Gets or sets the start position.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LocationRange.EndPosition">
            <summary>
            Gets or sets the end position.
            </summary>
        </member>
        <member name="T:MBF.IO.BasicSequenceFormatter">
            <summary>
            This is an abstract class that provides some basic operations common to sequence
            formatters. It is meant to be used as the base class for formatter implementations
            if the implementer wants to make use of default behavior.
            </summary>
        </member>
        <member name="T:MBF.IO.ISequenceFormatter">
            <summary>
            Implementations of this interface write an ISequence to a particular location, usually a
            file. The output is formatted according to the particular file format. A method is
            also provided for quickly accessing the content in string form for applications that do not
            need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.ISequenceFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.ISequenceFormatter.Format(MBF.ISequence,System.String)">
            <summary>
            Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.ISequenceFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a writer.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequences.</param>
        </member>
        <member name="M:MBF.IO.ISequenceFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.String)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences.</param>
        </member>
        <member name="M:MBF.IO.ISequenceFormatter.FormatString(MBF.ISequence)">
            <summary>
            Converts an ISequence to a formatted string.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.Format(MBF.ISequence,System.String)">
            <summary>
            Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <remarks>
            This method should be overridden by any formatters that need to format file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="sequences">The sequences to write</param>
            <param name="writer">the TextWriter</param>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.String)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences to.</param>
        </member>
        <member name="M:MBF.IO.BasicSequenceFormatter.FormatString(MBF.ISequence)">
            <summary>
            Converts an ISequence to a formatted text.
            </summary>
            <param name="sequence">The sequence to format.</param> 
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:MBF.IO.BasicSequenceFormatter.Name">
            <summary>
            Gets the name of the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact name of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceFormatter.Description">
            <summary>
            Gets the description of the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact details of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.BasicSequenceFormatter.FileTypes">
            <summary>
            Gets the filetypes supported by the formatter. Intended to be filled in 
            by classes deriving from BasicSequenceFormatter class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="T:MBF.BasicSequenceInfo">
             <summary>
             This class is intended for incapsulation use within the various
             implementations of ISequence to centralize metadata storage and
             logic code.
             
             This class implements ICloneable interface. To create a copy 
             of the BasicSequenceInfo call Clone() method. For example:
             
             BasicSequenceInfo basicInfo = new BasicSequenceInfo();
             BasicSequenceInfo basicInfoCopy = basicInfo.Clone();
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files can be 
             de-serialized to restore the instances.
             While serializing any non serializable object in the metadata are ignored 
             thus the restored BasicSequenceInfo instance will contains null in place 
             of non serializable object.
             </summary>
        </member>
        <member name="M:MBF.BasicSequenceInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.BasicSequenceInfo.IndexOfNonGap(MBF.ISequence)">
            <summary>
            Gets the index of first non gap character in the specified sequence.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.IndexOfNonGap(MBF.ISequence,System.Int32)">
            <summary>
            Returns the position of the first item in the specified sequence from startPos that does not 
            have a Gap character.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.LastIndexOfNonGap(MBF.ISequence)">
            <summary>
            Gets the index of last non gap character in the specified sequence.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.LastIndexOfNonGap(MBF.ISequence,System.Int32)">
            <summary>
            Gets the index of last non gap character in the specified sequence within the specified end position.
            </summary>
            <param name="sequence">ISequence instance.</param>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.Clone">
            <summary>
            Creates a new BasicSequenceInfo that is a copy of the current BasicSequenceInfo.
            </summary>
            <returns>A new BasicSequenceInfo that is a copy of this BasicSequenceInfo.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.System#ICloneable#Clone">
            <summary>
            Creates a new BasicSequenceInfo that is a copy of the current BasicSequenceInfo.
            </summary>
            <returns>A new object that is a copy of this BasicSequenceInfo.</returns>
        </member>
        <member name="M:MBF.BasicSequenceInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.BasicSequenceInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the BasicSequenceInfo.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:MBF.Algorithms.Alignment.Synteny">
            <summary>
            An ordered list of clusters between two sequences A and B
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Synteny._referenceSequence">
            <summary>
            Reference sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Synteny._querySequence">
            <summary>
            Query sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Synteny._clusters">
            <summary>
            List of clusters
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.Synteny.#ctor(MBF.ISequence,MBF.ISequence)">
            <summary>
            Initializes a new instance of the Synteny class
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Synteny.ReferenceSequence">
            <summary>
            Gets reference sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Synteny.QuerySequence">
            <summary>
            Gets query sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Synteny.Clusters">
            <summary>
            Gets list of clusters
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.NUCmerAligner">
            <summary>
            Implements algorithm to extend given pair of sequences in
            specified direction. This implementation is specific to NUCmer.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DirectionFlag">
            <summary>
            Direction in which the method has to be implemented
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.AlignFlag">
            <summary>
            Perform alignment
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.OptimalFlag">
            <summary>
            Maximise the alignment score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.SeqendFlag">
            <summary>
            Align till end of shortest sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.ForwardAlignFlag">
            <summary>
            Align forward till the score or target reached
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.BackwardAlignFlag">
            <summary>
            Align backward till the score or target reached
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.ForcedFlag">
            <summary>
            Force the alignment till the end irrespective of the score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.ForcedForwardAlignFlag">
            <summary>
            Ignore score and align to reach the target
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.MaximumAlignmentLength">
            <summary>
            Maximum number of bases till the alignment can be extended
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DefaultBreakLength">
            <summary>
            Number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DefaultValidScore">
            <summary>
            Default valid score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DefaultSubstitutionScore">
            <summary>
            Default substitution score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DefaultGapOpeningScore">
            <summary>
            Default gap opening score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.StopCharacter">
            <summary>
            Use this character if non alphabet is encountered in sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.DeleteState">
            <summary>
            Represents deletion at the given base
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.InsertState">
            <summary>
            Represents insertioin at the given base
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.MatchState">
            <summary>
            Represents a match at the given base
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.StartState">
            <summary>
            Represents a start at the given base
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAligner.NoneState">
            <summary>
            unknown state at the given base
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.#ctor">
            <summary>
            Initializes a new instance of the NUCmerAligner class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.ExtendSequence(MBF.ISequence,System.Int32,System.Int32@,MBF.ISequence,System.Int32,System.Int32@,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Performs the function specified by the methodName on given pair of
            sequences, represented by the start and end indices.
            Find the diagonal in which the highest score is achieved
            1. Find the dimension of score matrix
            2. Calculate diagonals till maximum score is reached or the end 
                    (free the Nodes memory as when the values are no more required)
                a. Create and fill the Matrix
                b. Trim unrequired diagonal nodes (left)
                c. Trim unrequired diagonal nodes (right)
            3. Trace the path back to the highest scoring diagonal and generate the delta
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceStart">Start index of the reference sequence</param>
            <param name="referenceEnd">End index of the reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryStart">Start index of the query sequence</param>
            <param name="queryEnd">End index of the query sequence</param>
            <param name="deltas">List of deltas</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Is aligned</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.SetScore(MBF.Algorithms.Alignment.Score,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the score of operation
            </summary>
            <param name="currentScore">Current Score</param>
            <param name="deleteScore">Score of delete</param>
            <param name="insertScore">Score of Insert</param>
            <param name="matchScore">Score of match</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.GetMaximumScore(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Score})">
            <summary>
            Find the Maximum Score in given list
            </summary>
            <param name="scores">List of scores</param>
            <returns>Maximum score</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.GenerateDelta(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Diagonal},System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Generate the list of delta
            </summary>
            <param name="diagonals">List of diagonals</param>
            <param name="counter">diagonal index</param>
            <param name="currentDiagonal">Current diagonal index</param>
            <param name="length">Length of sequence</param>
            <param name="deltas">list of Deltas</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAligner.GetMatchScore(System.Int32,System.Int32,MBF.ISequence,System.Int32,MBF.ISequence,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the Score of the given match
            </summary>
            <param name="diagonalCounter">diagonal counter</param>
            <param name="diagonalIndex">diagonal index</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="referenceIndex">Index of symbol in reference</param>
            <param name="querySequence">Query sequence</param>
            <param name="queryIndex">Index of symbol in query</param>
            <param name="length">Length of diagonal</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>match Score</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmerAligner.ValidScore">
            <summary>
            Gets or sets valid score
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmerAligner.SubstitutionScore">
            <summary>
            Gets or sets substitution score
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmerAligner.SimilarityMatrix">
            <summary>
            Gets or sets diagonal score to be used to calculate scores.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmerAligner.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmerAligner.GapOpeningScore">
            <summary>
            Gets or sets gap opening score
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.Score">
            <summary>
            Structure to hold the Score value
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Score.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Score.State">
            <summary>
            Gets or sets the state
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.Node">
            <summary>
            Structure to hold the Node value
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.Node.#ctor">
            <summary>
            Initializes a new instance of the Node class
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Node.Scores">
            <summary>
            Gets or sets the List of Score of given node
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Node.MaximumScore">
            <summary>
            Gets or sets the maximum score of give node
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.Diagonal">
            <summary>
            Structure to hold the Diagonal value
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.Diagonal.#ctor">
            <summary>
            Initializes a new instance of the Diagonal class
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Diagonal.Left">
            <summary>
            Gets or sets left index of diagonal
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Diagonal.Right">
            <summary>
            Gets or sets right index of diagonal
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Diagonal.Nodes">
            <summary>
            Gets or sets the list of nodes
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.MUMmer3">
            <summary>
            Implements MUMmer interface. Defines methods necessary to 
            complete the MUMmer 3.0 method for sequence alignment. Implements following
            1. Instantiate appropriate interface and invoke method to build Suffix Tree
            2. Instantiate appropriate interface and invoke method to stream the query
                sequence through suffix tree and find the MUMs
            3. Sort the MUMs found in the order of start index in reference sequence
            4. Instantiate appropriate interface and invoke method to find Longest
                Increasing Sequence (LIS)
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.MUMmer">
            <summary>
            MUMmer is a system for rapidly aligning entire genomes or very large protein
            sequences. It is a pair wise sequence algorithm. The algorithm assumes the 
            sequences are closely related, and using this assumption can quickly compare
            sequences that are millions of nucleotides in length. The algorithm is 
            designed to perform high resolution comparison of genome-length sequences. 
            MUMmer is the base abstract class defines contract for classes implementing
            MUMmer algorithm. Using Template Method Pattern, MUMmer defines the skeleton
            of the MUMmer algorithm and deferring some steps to drived class. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer.AlignmentChar">
            <summary>
            Alignment Char
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._referenceSequence">
            <summary>
            Holds the reference sequence.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._suffixTree">
            <summary>
            Holds a reference Suffix tree.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._mumList">
            <summary>
            List of mum.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._sortedMumList">
            <summary>
            List of sorted mums.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._finalMumList">
            <summary>
            List of final mums.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._mums">
            <summary>
            Stores list of MUMs found for each query sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._finalMums">
            <summary>
            Stores list of MUMs after applying Longest Increasing Subsequence
            algorithm to order and merge MUMs, for each query sequence.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer._storeMUMs">
            <summary>
            Boolean indicating whether the MUMs generated 
            during alignment are to be stored for later access.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.#ctor">
            <summary>
            Initializes a new instance of the MUMmer class.
            Constructor for all the pairwise aligner 
            (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalty.
            Users will typically reset these using parameters 
            specific to their particular sequences
            and needs.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.MBF#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the list of input sequences using linear gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the list of input sequences using linear gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.AlignSimple(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the reference sequence and query sequences using linear gap model.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.MBF#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align aligns the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.Align(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
             Align aligns the reference sequence with querly sequences using the affine gap model 
             (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.GetMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Generates list of MUMs for each query sequence.
            The MUMs are not sorted or processed using 
            Longest Increasing Subsequence (LIS).
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequences</param>
            <returns>List of MUMs for each query sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.GetMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence},System.Boolean)">
            <summary>
            Generates list of MUMs for each query sequence.
            If 'performLIS' is true, MUMs are sorted and processed 
            using Longest Increasing Subsequence (LIS). If 'performLIS' 
            is false, MUMs are returned immediately after streaming.
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequences</param>
            <param name="performLIS">Boolean indicating whether Longest Increasing 
            Subsequence (LIS) modules is run on MUMs before returning</param>
            <returns>List of MUMs for each query sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">Reference sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.Streaming(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,MBF.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs.
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.SortMum(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Sort the MUM list in increasing order of its position in reference sequence
            </summary>
            <param name="mumList">List of MUMs</param>
            <returns>Sorted list of MUMs</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.CollectLongestIncreasingSubsequence(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the MUMs in the order of Longest Increasing Subsequence using position 
            in query sequence
            </summary>
            <param name="sortedMumList">Sorted list of MUMs</param>
            <returns>MUMs in longest increasing subsequence order</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.CreateDefaultGap(System.Int32)">
            <summary>
            Create a default gap sequence of given length, pad the symbol - in sequence
            </summary>
            <param name="length">Length of gap</param>
            <returns>hyphen padded sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.DetermineSequence(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Determine the reference sequence and query sequences from list of input sequences.
            </summary>
            <param name="inputSequences">Sequences needs to be aligned</param>
            <returns>A sequence alignment object</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.Alignment(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.AlignmentWithoutAccumulatedMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method. Does not store MUMs, processes MUMs and gaps to find 
            alignment directly. 
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.AlignmentWithAccumulatedMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method. Store generated MUMs in properties MUMs, SortedMUMs.
            Alignment first finds MUMs for all the query sequence, and then 
            runs pairwise algorithm on gaps to produce alignments.
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.Validate(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Validate the inputs
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.RunPairWise(MBF.ISequence,MBF.ISequence)">
            <summary>
            Get the alignment using pair wise
            </summary>
            <param name="seq1">Sequence 1</param>
            <param name="seq2">Sequence 2</param>
            <returns>A list of sequence alignments.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.ProcessGaps(MBF.ISequence,MBF.ISequence)">
            <summary>
            get all the gaps in each sequence and call pairwise alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="sequence">Query sequence</param>
            <returns>Aligned sequences</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer.AlignGap(MBF.ISequence,MBF.ISequence,MBF.ISequence,MBF.ISequence,MBF.ISequence,MBF.Algorithms.Alignment.MaxUniqueMatch,MBF.Algorithms.Alignment.MaxUniqueMatch,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Align the Gap by executing pairwise alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query Sequence</param>
            <param name="sequenceResult1">Editable sequence containing alignment first result</param>
            <param name="sequenceResult2">Editable sequence containing alignment second result</param>
            <param name="consensusResult">Editable sequence containing consensus sequence</param>
            <param name="mum1">First MUM of Gap</param>
            <param name="mum2">Second MUM of Gap</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>Score of alignment</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.LengthOfMUM">
            <summary>
            Gets or sets the length of MUM
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.PairWiseAlgorithm">
            <summary>
            Gets or sets the pair wise aligner which will be executed 
            by end of Mummer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.StoreMUMs">
            <summary>
            Gets or sets the boolean value indicating 
            whether MUMs generated are to be stored or not.
            Set to false by default.
            Note: Storing MUMs incur memory overhead.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.MUMs">
            <summary>
            Gets the list of MUMs found for each query sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.FinalMUMs">
            <summary>
            Gets the list of MUMs after applying Longest Increasing Subsequence
            algorithm to order and merge MUMs, for each query sequence.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.MaximumMatchEnabled">
            <summary>
            Gets or sets the value indicating that whether MaxMatch option should be enabled or not.
            If this property is set to true, then mums are generated irrespective of 
            uniqueness in query and reference sequences.
            By default this property is set to false, indicating that matches are unique in reference sequence only.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer.UseGapExtensionCost">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmer3.referenceSequenceNumber">
            <summary>
            Reference sequence number
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.GetMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Generates list of MUMs for each query sequence.
            This returns the MUMs that are generated. 
            The MUMs are not sorted or processed using 
            Longest Increasing Subsequence (LIS).
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequences</param>
            <returns>List of MUMs for each query sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.GetMUMs(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence},System.Boolean)">
            <summary>
            Generates list of MUMs for each query sequence.
            This returns the MUMs that are generated.
            If 'performLIS' is true, MUMs are sorted and processed 
            using Longest Increasing Subsequence (LIS). If 'performLIS' 
            is false, MUMs are returned immediately after streaming.
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequenceList">List of query sequences</param>
            <param name="performLIS">Boolean indicating whether Longest Increasing 
            Subsequence (LIS) modules is run on MUMs before returning</param>
            <returns>List of MUMs for each query sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence.
            This method using Kurtz algorithm to build the Suffix Tree
            </summary>
            <param name="referenceSequence">Reference sequence number</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.Streaming(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,MBF.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs.
            Note: If MaximumMatchEnabled property is true, then MUMs are generated irrespective
            of uniqueness in query and reference sequences; else MUMs are unique in reference
            sequence only.
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="sequence">Query Sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.SortMum(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Sort the MUM list.
            Sorts the MUM list by order of start index in reference sequence
            </summary>
            <param name="mumList">MUM list that has to be sorted</param>
            <returns>Sorted MUM list</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.CollectLongestIncreasingSubsequence(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the MUMs in the order of Longest Increasing Subsequence using position in query sequence
            </summary>
            <param name="sortedMumList">Sorted list of MUMs</param>
            <returns>MUMs in longest increasing subsequence order</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmer3.GetMUMsValidate(MBF.ISequence,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Validate the inputs
            </summary>
            <param name="referenceSequence">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer3.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            MUMmer v3.0 algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer3.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            MUMmer3 class implements.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.MUMmer3.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence.
            The class uses to id to find the reference sequence in the list of
            sequences. And also the same is used to differentiate reference 
            sequence from query sequence during streaming.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.MaxUniqueMatchExtension">
            <summary>
            This is an extension to MaxUniqueMatch class. And add its own set of properties
            to existing properties of MUM
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.MaxUniqueMatch">
            <summary>
            Mum class will hold order and sequence start position of
            two input sequences. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.Length">
            <summary>
            Gets or sets Mum length 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.FirstSequenceMumOrder">
            <summary>
            Gets or sets Sequence one's MaxUniqueMatch order 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.FirstSequenceStart">
            <summary>
            Gets or sets Sequence one - MaxUniqueMatch's starting poistion 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.SecondSequenceMumOrder">
            <summary>
            Gets or sets Sequence Two's MaxUniqueMatch order 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.SecondSequenceStart">
            <summary>
            Gets or sets  Sequence Two - MaxUniqueMatch's starting poistion 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatch.Query">
            <summary>
            Gets or sets the Query sequence
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MaxUniqueMatch.CopyTo(MBF.Algorithms.Alignment.MaxUniqueMatch)">
            <summary>
            Copy the content to MUM
            </summary>
            <param name="match">Maximun unique match</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.#ctor(MBF.Algorithms.Alignment.MaxUniqueMatch)">
            <summary>
            Initializes a new instance of the MaxUniqueMatchExtension class
            </summary>
            <param name="mum">Maximum Unique Match</param>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.ID">
            <summary>
            Gets or sets cluster Identifier
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.IsGood">
            <summary>
            Gets or sets a value indicating whether MUM is Good candidate
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.IsTentative">
            <summary>
            Gets or sets a value indicating whether MUM is Tentative candidate
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.Score">
            <summary>
            Gets or sets score of MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.Adjacent">
            <summary>
            Gets or sets offset to adjacent MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.From">
            <summary>
            Gets or sets From (index representing the previous MUM to form LIS) of MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.WrapScore">
            <summary>
            Gets or sets wrap score
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MaxUniqueMatchExtension.CopyTo(MBF.Algorithms.Alignment.MaxUniqueMatchExtension)">
            <summary>
            Copy the content to match
            </summary>
            <param name="match">Maximum unique match</param>
        </member>
        <member name="T:MBF.Matrix.Matrix`3">
            <summary>
            A 2-D collection of values, accessable via a pair of indexes or a pair of keys.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.RowView(`0)">
            <summary>
            Gets a row in the form of an IDictionary.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <returns>An IDictionary that maps col keys to (nonmissing) values. Values in the dictionary may be read, set, or added.
            Values changes are reflected in the Matrix. Any values added to the dictionary must have a key that already
            exists in the ColKeys (and, thus, IndexOfColKeys) of the Matrix.
            The RowView method is at least O(log n) and typically O(1).
            Access in the dictionary is at least O(log n) and typically O(1).
            </returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.TryGetValue(`0,`1,`2@)">
            <summary>
            Gets the value associated with the specified keys, if a value is not missing.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <param name="value">When this method returns, contains the value associated with the specified keys, if the value is not missing;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the matrix contains an element with the specified keys; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.TryGetValue(System.Int32,System.Int32,`2@)">
            <summary>
            Gets the value associated with the specified integer indexes, if a value is not missing.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <param name="value">When this method returns, contains the value associated with the specified indexes, if the value is not missing;
            otherwise, the missing value is returned. This parameter is passed uninitialized.</param>
            <returns>true if the matrix contains an element with the specified indexes; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.GetValueOrMissing(`0,`1)">
            <summary>
            Gets the value associated with the specified keys or the special Missing value.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>a value if the matrix contains an element with the specified keys; otherwise, the special Missing value.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.GetValueOrMissing(System.Int32,System.Int32)">
            <summary>
            Gets the value associated with the specified indexes or the special Missing value.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <returns>a value if the matrix contains an element with the specified indexes; otherwise, the special Missing value.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.SetValueOrMissing(`0,`1,`2)">
            <summary>
            Set a value in the matrix or, by using the special Missing value, mark an element as missing.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <param name="value">The value to set or the special Missing value.</param>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.SetValueOrMissing(System.Int32,System.Int32,`2)">
            <summary>
            Set a value in the matrix or, by using the special Missing value, mark an element as missing.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <param name="value">The value to set or the special Missing value.</param>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.Remove(`0,`1)">
            <summary>
            Removes the value with the specified keys from the Matrix.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>true if the element is successfully found and removed; otherwise, false.
            This method returns false if the value is already missing from the Matrix.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the value with the specified indexes from the Matrix.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <returns>true if the element is successfully found and removed; otherwise, false.
            This method returns false if the value is already missing from the Matrix.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissing(`2)">
            <summary>
            Tells if the value is the special missing value. (Unlike 'Equals', this works even if the special missing value is null.)
            </summary>
            <param name="value">The value to test</param>
            <returns>true if the value is the special missing value</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissing(`0,`1)">
            <summary>
            Determines if the Matrix is missing a value.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>true if the matrix contains an element with the specified keys; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissing(System.Int32,System.Int32)">
            <summary>
            Determines if the Matrix is missing a value.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <returns>true if the matrix contains an element with the specified indexes; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ContainsRowAndColKeys(`0,`1)">
            <summary>
            Determines whether the Matrix contains the specified keys.
            The method is at least O(log n) and typically O(1).
            </summary>
            <param name="rowKey">A row key of interest. It need not exist in RowKeys (and thus, IndexOfRowKeys)</param>
            <param name="colKey">A col key of interest. It need not exist in ColKeys (and thus, IndexOfColKeys)</param>
            <returns>true if RowKeys contrains rowKey and ColKeys contains colKey; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ContainsRowKey(`0)">
            <summary>
            Determines whether the Matrix contains the specified row key.
            The method is at least O(log n) and typically O(1).
            </summary>
            <param name="rowKey">A row key of interest. It need not exist in RowKeys (and thus, IndexOfRowKeys)</param>
            <returns>true if RowKeys contrains rowKey; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ContainsColKey(`1)">
            <summary>
            Determines whether the Matrix contains the specified col key.
            The method is at least O(log n) and typically O(1).
            </summary>
            <param name="colKey">A row key of interest. It need not exist in ColKeys (and thus, IndexOfColKeys)</param>
            <returns>true if ColKeys contrains colKey; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.RowView(System.Int32)">
            <summary>
            Gets a row in the form of an IDictionary.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <returns>An IDictionary that maps col keys to (nonmissing) values. Values in the dictionary may be read, set, or added.
            Values changes are reflected in the Matrix. Any values added to the dictionary must have a key that already
            exists in the ColKeys (and, thus, IndexOfColKeys) of the Matrix.
            The RowView method is at least O(log n) and typically O(1).
            Access in the dictionary is at least O(log n) and typically O(1).
            </returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ColView(`1)">
            <summary>
            Gets a col in the form of an IDictionary.
            </summary>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>An IDictionary that maps row keys to (nonmissing) values. Values in the dictionary may be read, set, or added.
            Values changes are reflected in the Matrix. Any values added to the dictionary must have a key that already
            exists in the RowKeys (and, thus, IndexOfRowKeys) of the Matrix.
            The ColView method is at least O(log n) and typically O(1).
            Access in the dictionary is at least O(log n) and typically O(1).
            </returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ColView(System.Int32)">
            <summary>
            Gets a col in the form of an IDictionary.
            </summary>
            <param name="colIndex">The index for the col of interest</param>
            <returns>An IDictionary that maps row keys to (nonmissing) values. Values in the dictionary may be read, set, or added.
            Values changes are reflected in the Matrix. Any values added to the dictionary must have a key that already
            exists in the RowKeys (and, thus, IndexOfRowKeys) of the Matrix.
            The ColView method is at least O(log n) and typically O(1).
            Access in the dictionary is at least O(log n) and typically O(1).
            </returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.ToString2D">
            <summary>
            Returns a String that represents the Matrix as a series of lines.
            </summary>
            <returns>A string, containing newlines characters, representing the matrix.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.WriteDense(System.IO.TextWriter)">
            <summary>
            Writes the matrix to a TextWriter in dense format. The first line is "var" TAB and then the tab-delimited col keys.
            Next is one line per row key. Each line is the row key TAB and then the tab-limited values.
            Values may include the special Missing value.
            </summary>
            <param name="textWriter">The TextWriter to write to.</param>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingSome">
            <summary>
            Determines of the Matrix contains any missing values.
            May be as slow as O(rowCount * colCount)
            </summary>
            <returns>true if the matrix contains any missing values; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAll">
            <summary>
            Determines of the Matrix is completely empty.
            May be as slow as O(rowCount * colCount)
            </summary>
            <returns>true if the matrix contains all missing values; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInSomeRow">
            <summary>
            Determines if the Matrix contains a row missing all values.
            May be as slow as O(rowCount * colCount)
            </summary>
            <returns>true if the matrix contains a row missing all values; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInSomeCol">
            <summary>
            Determines if the Matrix contains a column missing all values.
            May be as slow as O(rowCount * colCount)
            </summary>
            <returns>true if the matrix contains a column missing all values; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInRow(`0)">
            <summary>
            Determines if a row is missing all its values.
            May be as slow as O(log(rowCount) * colCount)
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <returns>true is the row specified is missing all its values; otherwise false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInRow(System.Int32)">
            <summary>
            Determines if a row is missing all its values.
            May be as slow as O(log(rowCount) * colCount)
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <returns>true is the row specified is missing all its values; otherwise false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInCol(`1)">
            <summary>
            Determines if a column is missing all its values.
            May be as slow as O(rowCount * log(colCount))
            </summary>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>true is the col specified is missing all its values; otherwise false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.IsMissingAllInCol(System.Int32)">
            <summary>
            Determines if a column is missing all its values.
            May be as slow as O(rowCount * log(colCount))
            </summary>
            <param name="colIndex">The index for the col of interest</param>
            <returns>true is the col specified is missing all its values; otherwise false.</returns>
        </member>
        <member name="M:MBF.Matrix.Matrix`3.MatrixEquals(MBF.Matrix.Matrix{`0,`1,`2})">
            <summary>
            Determines whether two Matrix&lt;TRowKey,TColKey,TValue&gt; are equal. They are equal if they
              0. The 2nd one is not null
              3. Have the same missing values
              1. have the same rowKeys, in the same order
              2. have the same colKeys, in the same order
              4. Have the same nonmissing values
            May be as slow as O(rowCount * colCount)
            </summary>
            <param name="otherMatrix">The matrix to compare to</param>
            <returns>true, if they are equal in terms of rowKeys, colKeys, missing and nonMissing values. Otherwise, false.</returns>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value associated with the specified indexes.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <returns>The value associated with the specified indexes.
            A get operation will throw an exception if the value is missing from the matrix. (See TryGet and GetValueOrMissing.)
            A set operation will overwrite a missing value but will not set to the special Missing value. (See Remove and SetValueOrMissing).</returns>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.Item(`0,`1)">
            <summary>
            Gets or sets the value associated with the specified keys.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>The value associated with the specified keys.
            A get operation will throw an exception if the value is missing from the matrix. (See TryGet and GetValueOrMissing.)
            A set operation will overwrite a missing value but will not set to the special Missing value. (See Remove and SetValueOrMissing).</returns>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.RowKeys">
            <summary>
            The collection of row keys. As with any collection this is a mapping from
            an index to a value. The collection is read-only and never changes. To get the
            effect of changing this list, a new matrix can be created on top of the current matrix.
            Access is at least O(log n) and typically O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.ColKeys">
            <summary>
            The collection of col keys. As with any collection this is a mapping from
            an index to a value. The collection is read-only and never changes. To get the
            effect of changing this list, a new matrix can be created on top of the current matrix.
            Access is at least O(log n) and typically O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.IndexOfRowKey">
            <summary>
            A dictionary that maps a row index (an integer) to a row key. The
            dictionary is read-only and never changes. To get the
            effect of changing this list, a new matrix can be created on top of the current matrix.
            Access is at least O(log n) and typically O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.IndexOfColKey">
            <summary>
            A dictionary that maps a col index (an integer) to a col key. The
            dictionary is read-only and never changes. To get the
            effect of changing this list, a new matrix can be created on top of the current matrix.
            Access is at least O(log n) and typically O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.RowCount">
            <summary>
            Gets the number of keys in RowKeys. Because RowKeys never changes, this value never changes.
            The property is O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.ColCount">
            <summary>
            Gets the number of keys in ColKeys. Because ColKeys never changes, this value never changes.
            The property is O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.MissingValue">
            <summary>
            The special Missing value.
            This property is O(1).
            </summary>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.Values">
            <summary>
            Gets a sequence containing the nonmissing values in the Matrix.
            </summary>
            <returns>A sequence containing the nonmissing values of the Matrix.</returns>
        </member>
        <member name="P:MBF.Matrix.Matrix`3.RowKeyColKeyValues">
            <summary>
            Returns an enumerator that iterates through the Matrix, skipping any missing values.
            </summary>
            <returns>An enumerator for the Matrix. For purposes of enumeration, each item is a RowKeyColKeyValue structure representing nonmissing value and its keys.</returns>
        </member>
        <member name="T:MBF.Matrix.RowKeyColKeyValue`3">
            <summary>
            A structure for representing the triple of rowKey, colKey, and value.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.RowKeyColKeyValue`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the RowKeyColKeyValue structure with the specified keys and value.
            </summary>
            <param name="rowKey">The key for the row of interest.</param>
            <param name="colKey">The key for the col of interest.</param>
            <param name="value">The value associated with these keys.</param>
        </member>
        <member name="F:MBF.Matrix.RowKeyColKeyValue`3.RowKey">
            <summary>
            The rowKey in the triple.
            </summary>
        </member>
        <member name="F:MBF.Matrix.RowKeyColKeyValue`3.ColKey">
            <summary>
            The colKey in the triple.
            </summary>
        </member>
        <member name="F:MBF.Matrix.RowKeyColKeyValue`3.Value">
            <summary>
            The value in the triple.
            </summary>
        </member>
        <member name="M:MBF.Matrix.RowKeyColKeyValue`3.ToString">
            <summary>
            Returns a string represenation of the RowKeyColKeyValue, using the string represenations of the keys and of the value.
            </summary>
            <returns>A string representation of the RowKeyColKeyValue, which includes the string representations of the keys and value.</returns>
        </member>
        <member name="T:MBF.Matrix.MatrixFactoryDelegate`4">
            <summary>
            The type of functions that can create new Matrix objects. Because values are not specified, the resulting matrix
            is typically empty or full of default values.
            </summary>
            <typeparam name="TMatrix">The type of matrix created. Must be a subclass Matrix{TRowKey,TColKey,TValue}.</typeparam>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special Missing value.</param>
            <returns>A new matrix.</returns>
        </member>
        <member name="T:MBF.Matrix.MatrixFormatException">
            <summary>
            The exception that is thrown when the parsing of data into a Matrix fails.
            </summary>
        </member>
        <member name="M:MBF.Matrix.MatrixFormatException.#ctor">
            <summary>
                Initializes a new instance of the MatrixFormatException class.
            </summary>
        </member>
        <member name="M:MBF.Matrix.MatrixFormatException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the System.FormatException class with a specified
                error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MBF.Matrix.MatrixFormatException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the System.FormatException class with a specified
                error message and a referenece to the inner exception that is the cause of
                this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:MBF.Matrix.MatrixFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the System.SystemException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:MBF.IO.Phylip.PhylipParser">
            <summary>
            A PhylipParser reads from a source of text that is formatted according 
            to the PhylipParser flat file specification, and converts the data to 
            in-memory ISequenceAlignment objects. For advanced users, the ability 
            to select an encoding for the internal memory representation is provided. 
            There is also a default encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="F:MBF.IO.Phylip.PhylipParser._basicParser">
            <summary>
            Basic Sequence Alignment Parser that contains all the common methods required.
            </summary>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.#ctor">
            <summary>
            Initializes a new instance of the PhylipParser class.
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Initializes a new instance of the PhylipParser class.
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single Phylip text from a reader into a sequence.
            1. First link has Count of Taxa and length of each sequence
            2. Sequences
                a. First ten character are ID
                b. Sequence itself
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence Alignment instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.Phylip.PhylipParser.ParseOne(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single sequences using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence Alignment instance containing parsed data.</returns>
        </member>
        <member name="P:MBF.IO.Phylip.PhylipParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.Phylip.PhylipParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.Phylip.PhylipParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.Phylip.PhylipParser.Encoding">
            <summary>
            Gets or sets encoding to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.Phylip.PhylipParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.IEdge">
            <summary>
            This interface defines the contract that has to be implemented by and class implement Edge of suffix tree.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IEdge.EndIndex">
            <summary>
            Gets or sets index of last character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IEdge.IsLeaf">
            <summary>
            Gets or sets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IEdge.StartIndex">
            <summary>
            Gets or sets index of first character
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastResult">
            <summary>
            A single BLAST search result. This is represented by a single XML
            document in BLAST XML format. It consist of some introductory information
            such as BLAST version, a structure listing the search parameters, and
            a list of Iterations (represented in the BlastSearchRecord class).
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastResult._records">
            <summary>
            List of BlastSearchRecords in the document.
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastResult.Metadata">
            <summary>
            The summary data for the search
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastResult.Records">
            <summary>
            The list of BlastSearchRecords in the document.
            </summary>
        </member>
        <member name="T:MBF.Web.AsyncWebMethodResponse">
            <summary>
            This class represent the response of asynchronous web method class.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodResponse._state">
            <summary>
            State of the Async web method
            </summary>
        </member>
        <member name="M:MBF.Web.AsyncWebMethodResponse.#ctor(System.Object)">
            <summary>
            Default constructor: Initializes an instance of class AsyncWebMethodResponse
            </summary>
            <param name="state">State of the Async web method</param>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodResponse.Status">
            <summary>
            Gets or sets current state of the Async web method.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodResponse.Error">
            <summary>
            Gets Exception (if any) of the Async web method.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodResponse.StatusDescription">
            <summary>
            Gets or sets the description of Async web method status.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodResponse.Result">
            <summary>
            Gets or sets the output of the Async web method.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodResponse.State">
            <summary>
            Gets the state of async web method
            </summary>
        </member>
        <member name="T:MBF.Util.ComparisonWrapper`1">
            <summary>
            Wrapper class to use Comparison delegate.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:MBF.Util.ComparisonWrapper`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates an instance of ComparisonWrapper class.
            </summary>
            <param name="comparison">Comparison delegate to use.</param>
        </member>
        <member name="M:MBF.Util.ComparisonWrapper`1.Compare(`0,`0)">
            <summary>
            Compares two instance and returns a value indicating whether one is less than,
                equal to, or greater than the other.
                <para>For more detail see the below table.</para> 
                <para>-----------------------------------------</para>
                <para>Value             | Meaning             |</para>
                <para>-----------------------------------------</para>
                <para>Less than zero    | x is less than y.   |</para>
                <para>Zero              | x equals y          |</para>
                <para>Greater than zero | x is greater than y |</para>
                <para>-----------------------------------------</para>
            </summary>
            <param name="x">The first instance to compare</param>
            <param name="y">The second instance to compare</param>
        </member>
        <member name="P:MBF.Util.ComparisonWrapper`1.Comparison">
            <summary>
            Gets Comparison delegate.
            </summary>
        </member>
        <member name="T:MBF.ISequence">
            <summary>
            Implementations of ISequence make up the one of the core sets
            of data structures in MBF. It is these sequences that store
            data relevant to DNA, RNA, and Amino Acid structures. Several
            algorithms for alignment, assembly, and analysis take these items
            as their basic data inputs and outputs.
            
            At its core, ISequence stores an ordered list of ISequenceItem,
            which in term can represent things like Nucleotides or Amino Acids.
            These can be accessed using any method made available through IList.
            You can also work with the sequence as a string by using the ToString()
            method which will decode the items in the list into a standard,
            readable format.
            
            The basic implementation of this interface is Sequence, which stores
            byte codes for the sequence items. Additional implementations include
            VirtualSequence, SegmentedSequence, and SparseSequence.
            
            ISequence extends from ICloneable interface this will enable 
            ISequence instances to create copies of them. 
            Calling Clone() method will create a copy of the ISequence.
            </summary>
        </member>
        <member name="M:MBF.ISequence.ToString">
            <summary>
            Converts the list of sequence items into a more readable representation.
            This form may be particularly helpful for those users who are more
            familiar with string operations on sequences than iterating over
            individual entries.
            </summary>
            <returns>
            A string representation of the sequence data. For DNA a result
            may look like "GATTCAAG" for instance.
            </returns>
        </member>
        <member name="M:MBF.ISequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:MBF.ISequence.Insert(System.Int32,System.Char)">
            <summary>
            Insert a single sequence item represented as a decodable character.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.ISequence.InsertRange(System.Int32,System.String)">
            <summary>
            Insert sequence item(s) represented as a string of decodable characters.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.ISequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a series of items from the sequence.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:MBF.ISequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the item at the indicated position with a single item from a decodable character.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.ISequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces the item at the indicated position with a new item.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:MBF.ISequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the item at the indicated position with a string of decodable item(s).
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.ISequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.ISequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item beyond startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.ISequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.ISequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character before the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.ISequence.Clone">
            <summary>
            Creates a new ISequence that is a copy of the current ISequence.
            </summary>
            <returns>A new ISequence that is a copy of this ISequence.</returns>
        </member>
        <member name="M:MBF.ISequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">
            Minimum index in Sequence at which match has to start.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <param name="ignoreCase">if true ignore character casing while match.</param>
            <returns></returns>
        </member>
        <member name="M:MBF.ISequence.RemoveAt(System.Int32)">
            <summary>
            Removes an item from a specified position in the sequence
            </summary>
            <param name="index">Index of the item to be removed</param>
        </member>
        <member name="M:MBF.ISequence.Clear">
            <summary>
            Removes all items in the sequence
            </summary>
        </member>
        <member name="M:MBF.ISequence.GetEnumerator">
            <summary>
            Returns an enumerator for the sequence
            </summary>
            <returns>Enumerator for current sequence</returns>
        </member>
        <member name="P:MBF.ISequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.ISequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.ISequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Statistics">
            <summary>
            Keeps track of the number of occurrences of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.ISequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Encoding">
            <summary>
            The encoding being used to store sequence items in this instance.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.ISequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.ISequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.ISequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.ISequence.Count">
            <summary>
            Gets the number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.ISequence.IsReadOnly">
            <summary>
            Gets if the sequence is ReadOnly
            </summary>
        </member>
        <member name="T:MBF.IO.SnpParser">
            <summary>
            Implements common methods for parsing SNPs from a SnpReader into ISequences. 
            This reads Snp items from the SnpReader and stores either of the two alleles
            in a sparse sequence at the same position as the chromosome position.
            Extending classes have to implement the 
            SnpReader GetSnpReader(TextReader reader) method that returns a
            SnpReader for the given TextReader.
            
            This class is based on the MBF.IO.BasicSequenceParser.
            
            </summary>
        </member>
        <member name="M:MBF.IO.SnpParser.#ctor(MBF.Encoding.IEncoding,MBF.IAlphabet)">
            <summary>
            Creates a SNP parser with the given encoding and alphabet
            </summary>
            <param name="encoding"></param>
            <param name="alphabet"></param>
        </member>
        <member name="M:MBF.IO.SnpParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of sparse sequences from the reader, one per contiguous 
            chromosome present in the reader. There is one SequenceItem per SnpItem with 
            either of the two alleles in the SnpItem (determined by the ParseAlleleOne property)
            and at the same position in the sequence as the SnpItem.Position.
            </summary>
            <param name="reader">Text reader to read the Snpitems from using a SnpReader created for it</param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the reader, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of sparse sequences from the reader, one per contiguous 
            chromosome present in the reader. There is one SequenceItem per SnpItem with 
            either of the two alleles in the SnpItem (determined by the ParseAlleleOne property)
            and at the same position in the sequence as the SnpItem.Position.
            </summary>
            <param name="reader">Text reader to read the Snpitems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the reader, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.Parse(System.String)">
            <summary>
            Creates a TextReader for the file and calls Parse(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the file, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.Parse(System.String,System.Boolean)">
            <summary>
            Creates a TextReader for the file and calls Parse(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a list of sparse sequences containing Snp items that were read 
            from the file, one sequence per contiguous chromosome number and
            retaining the same position in the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.ParseOne(System.String)">
            <summary>
            Creates a TextReader for the file and calls ParseOne(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <returns>Returns a single sparse sequence containing Snp items from a single contiguous
            chromosome read from the file. The SnpItems retain the same position in 
            the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Creates a TextReader for the file and calls ParseOne(TextReader)
            </summary>
            <param name="filename">Name of file to read the SnpItems from using a SnpReader created for it</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a single sparse sequence containing Snp items from a single contiguous
            chromosome read from the file. The SnpItems retain the same position in 
            the sequence as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.ParseOne(System.IO.TextReader)">
            <summary>
            Returns a sparse sequence composed of one of the two alleles for the current 
            chromosome pointed to by the SnpReader. If ParseAlleleOne is set to true (default), 
            this parses AlleleOne, else AlleleTwo.
            
            The Sequence Items correspond to AlleleOne or Two in the reader and their position 
            in the sparse sequence corresponds to their Position in the SnpItem.
            
            This starts parsing from the current line and continues until EOF or the chromosome 
            number changes.
            
            </summary>
            <param name="reader"></param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the reader, retaining the same position in the sparse sequence
            as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Returns a sparse sequence composed of one of the two alleles for the current 
            chromosome pointed to by the SnpReader. If ParseAlleleOne is set to true (default), 
            this parses AlleleOne, else AlleleTwo.
            
            The Sequence Items correspond to AlleleOne or Two in the reader and their position 
            in the sparse sequence corresponds to their Position in the SnpItem.
            
            This starts parsing from the current line and continues until EOF or the chromosome 
            number changes.
            
            </summary>
            <param name="reader"></param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the reader, retaining the same position in the sparse sequence
            as the chromosome position.</returns>
        </member>
        <member name="M:MBF.IO.SnpParser.GetSnpReader(System.IO.TextReader)">
            <summary>
            This method has to be overriden by an implementing class to return a SnpReader 
            for the given TextReader
            </summary>
            <param name="reader">TextReader containing snps that is wrapped by the returned ISnpReader</param>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.SnpParser.ParseOne(MBF.IO.ISnpReader,System.Boolean)">
            <summary>
            The common ParseOne method called for parsing SNPs
            NOTE: The snpReader.MoveNext must have already been called and 
            the ISnpReader.Current have the first SnpItem to parse into the sequence
            </summary>
            <param name="snpReader">The ISnpReader to read a Snp chromosome sequence from</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>Returns a SparseSequence containing Snp items from the first contiguous 
            chromosome number read from the snp reader.</returns>
        </member>
        <member name="P:MBF.IO.SnpParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:MBF.IO.SnpParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects. 
            </summary>
        </member>
        <member name="P:MBF.IO.SnpParser.Name">
            <summary>
            Gets the name of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact name of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.SnpParser.Description">
            <summary>
            Gets the description of the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.SnpParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser. Intended to be filled in 
            by classes deriving from BasicSequenceParser class
            with the exact details of the filetypes supported.
            </summary>
        </member>
        <member name="P:MBF.IO.SnpParser.ParseAlleleOne">
            <summary>
            If set to false, this will parse AlleleTwo. If true, this will parse AlleleOne from the SnpReader.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Variation">
            <summary>
            A related strain contains stable mutations from the same gene (e.g., RFLPs, polymorphisms, etc.) 
            which differ from the presented sequence at this location (and possibly others).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Variation.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Variation feature item from the specified location.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Variation.#ctor(System.String)">
            <summary>
            Creates new Variation feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Variation.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Variation.#ctor(MBF.IO.GenBank.Variation)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Variation instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Variation.Clone">
            <summary>
            Creates a new Variation that is a copy of the current Variation.
            </summary>
            <returns>A new Variation that is a copy of this Variation.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Variation.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ModifiedBase">
            <summary>
            The indicated nucleotide is a modified nucleotide and should be substituted for by the 
            indicated molecule (given in the ModifiedNucleotideBase qualifier value).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ModifiedBase.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new ModifiedBase feature item from the specified location.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ModifiedBase.#ctor(System.String)">
            <summary>
            Creates new ModifiedBase feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ModifiedBase.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ModifiedBase.#ctor(MBF.IO.GenBank.ModifiedBase)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ModifiedBase instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ModifiedBase.Clone">
            <summary>
            Creates a new ModifiedBase that is a copy of the current ModifiedBase.
            </summary>
            <returns>A new ModifiedBase that is a copy of this ModifiedBase.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Frequency">
            <summary>
            Frequency of the occurrence of a feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.ModifiedNucleotideBase">
            <summary>
            mod_base; Abbreviation for a modified nucleotide base.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ModifiedBase.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.LocationOperator">
            <summary>
            Enum for location operators.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.LocationOperator.None">
            <summary>
            No Operator.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.LocationOperator.Complement">
            <summary>
            Complement Operator.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.LocationOperator.Join">
            <summary>
            Join Operator.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.LocationOperator.Order">
            <summary>
            Order Operator.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.LocationOperator.Bond">
            <summary>
            Bond Operator.
            Found in protein files. 
            These generally are used to describe disulfide bonds.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankAccession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            It contains primary accession number and may contain secondary accession numbers.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankAccession.#ctor">
            <summary>
            Default Constructor.
            Creates a new GenBankAccession instance.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankAccession.#ctor(MBF.IO.GenBank.GenBankAccession)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankAccession instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankAccession.Contains(System.String)">
            <summary>
            Validates whether the specified accession number is present in 
            this Accession as primary or secondary accession number.
            </summary>
            <param name="accession">Accession number.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankAccession.Clone">
            <summary>
            Creates a new GenBankAccession that is a copy of the current GenBankAccession.
            </summary>
            <returns>A new GenBankAccession that is a copy of this GenBankAccession.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankAccession.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankAccession that is a copy of the current GenBankAccession.
            </summary>
            <returns>A new object that is a copy of this GenBankAccession.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankAccession.Primary">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankAccession.Secondary">
            <summary>
            List of secondary accession numbers.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.CitationReference">
            <summary>
             Citations for all articles containing data reported in this sequence.
             
            Citations in PubMed that do not fall within Medline's scope will have only
            a PUBMED identifier. Similarly, citations that *are* in Medline's scope but
            which have not yet been assigned Medline UIs will have only a PUBMED identifier.
            If a citation is present in both the PubMed and Medline databases, both a
            MEDLINE and a PUBMED line will be present.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CitationReference.Clone">
            <summary>
            Creates a new CitationReference that is a copy of the current CitationReference.
            </summary>
            <returns>A new CitationReference that is a copy of this CitationReference.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.CitationReference.System#ICloneable#Clone">
            <summary>
            Creates a new CitationReference that is a copy of the current CitationReference.
            </summary>
            <returns>A new object that is a copy of this CitationReference.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Number">
            <summary>
            Reference number.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Location">
            <summary>
            The range of bases in the sequence entry reported in this citation.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Authors">
            <summary>
            Lists the authors in the order in which they appear in the cited article
            Last names are separated from initials by a comma (no space); there is no comma 
            before the final `and'. The list of authors ends with a period. 
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Consortiums">
            <summary>
            Lists the collective names of consortiums associated with the citation 
            (eg, International Human Genome Sequencing Consortium), rather than individual author names. 
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Title">
            <summary>
            Full title of citation. 
            Present in all but unpublished citations.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Journal">
            <summary>
            Lists the journal name, volume, year, and page numbers of the citation
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Medline">
            <summary>
            The National Library of Medicine's Medline unique identifier for a citation (if known).
            Medline UIs are 8 digit numbers.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.PubMed">
            <summary>
            The PubMed unique identifier for a citation (if known). 
            PUBMED ids are numeric, and are record identifiers for article abstracts in the PubMed database.
            
            http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=PubMed
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CitationReference.Remarks">
            <summary>
            The REMARK line is a textual comment that specifies the relevance
            of the citation to the entry.
            </summary>
        </member>
        <member name="T:MBF.Encoding.NcbiStdAAEncoding">
            <summary>
            A basic encoding that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This encoding closely
            follows the ProteinAlphabet and is based on the standard NCBIstdaa.
            This encoding also contains the three letter symbols defined in the
            IUPAC3aa standard.
            
            This encoding assigns values starting at 0 and working consecutively
            through 27. See NcbiEaaEncoding for the same alphabet with different
            assigned values.
            
            The entries in this dictionary are:
            
            Value - Symbol - Extended Symbol - Name
            
            0  - - --- - Gap
            1  - A - Ala - Alanine
            2  - B - Asx - Aspartic Acid or Asparagine
            3  - C - Cys - Cysteine
            4  - D - Asp - Aspartic Acid
            5  - E - Glu - Glutamic Acid
            6  - F - Phe - Phenylalanine
            7  - G - Gly - Glycine
            8  - H - His - Histidine
            9  - I - Ile - Isoleucine
            10 - K - Lys - Lysine
            11 - L - Leu - Leucine
            12 - M - Met - Methionine
            13 - N - Asn - Asparagine
            14 - P - Pro - Proline
            15 - Q - Gln - Glutamine
            16 - R - Arg - Arginine
            17 - S - Ser - Serine
            18 - T - Thr - Threoine
            19 - V - Val - Valine
            20 - W - Trp - Tryptophan
            21 - X - Xxx - Undetermined or atypical
            22 - Y - Tyr - Tyrosine
            23 - Z - Glx - Glutamic Acid or Glutamine
            24 - U - Sel - Selenocysteine
            25 - * - Ter - Termination
            26 - O - Pyl - Pyrrolysine
            27 - J - Xle - Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Ala">
            <summary>
            Alanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Cys">
            <summary>
            Cysteine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Phe">
            <summary>
            Phenylalanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Gly">
            <summary>
            Glycine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.His">
            <summary>
            Histidine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Ile">
            <summary>
            Isoleucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Lys">
            <summary>
            Lysine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Leu">
            <summary>
            Leucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Met">
            <summary>
            Methionine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Asn">
            <summary>
            Asparagine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Pro">
            <summary>
            Proline
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Gln">
            <summary>
            Glutamine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Arg">
            <summary>
            Arginine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Ser">
            <summary>
            Serine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Thr">
            <summary>
            Threoine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Val">
            <summary>
            Valine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Trp">
            <summary>
            Tryptophan
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Tyr">
            <summary>
            Tyrosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Sel">
            <summary>
            Selenocysteine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Pyl">
            <summary>
            Pyrrolysine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiStdAAEncoding.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves an encoded AminoAcid instance based on the byte value
            representation of that acid.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.GetComplement(System.Byte)">
            <summary>
            This method is not supported
            </summary>        
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiStdAAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.Instance">
            <summary>
            An instance of the NcbiStdAA encoding for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.Name">
            <summary>
            The name of this alphabet is always 'Protein'
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.Count">
            <summary>
            The number of alphabet symbols. For this alphabet the result should
            always be 28.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiStdAAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IDerivedSequence">
            <summary>
            Classes which implements this interface will provide additional functionality 
            for the source sequence.
            </summary>
        </member>
        <member name="P:MBF.IDerivedSequence.Source">
            <summary>
            The sequence (if any) from which this sequence was derived.
            </summary>
        </member>
        <member name="T:MBF.FastQFormatType">
            <summary>
            A FastQFormatType specifies which type of quality scores are stored in an IQualitativeSequence.
            </summary>
        </member>
        <member name="F:MBF.FastQFormatType.Illumina">
            <summary>
            Illumina 1.3 FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 62 and are encoded using ASCII 64 to 126.
            </summary>
        </member>
        <member name="F:MBF.FastQFormatType.Solexa">
            <summary>
            Solexa/Illumina 1.0 FastQFormatType.
            This type uses Solexa / Illumina quality scores ranges from -5 to 62 and are encoded using ASCII 59 to 126.
            </summary>
        </member>
        <member name="F:MBF.FastQFormatType.Sanger">
            <summary>
            Sanger FastQFormatType.
            This type uses Phred quality scores ranges from 0 to 93 and are encoded using ASCII 33 to 126 
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.SmithWatermanAligner">
            <summary>
            Implements the SmithWaterman algorithm for partial alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SmithWatermanAligner._optScoreCells">
            <summary>
            Stores details of all cells with best score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SmithWatermanAligner._optScore">
            <summary>
            Tracks optimal score for alignment
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman - Uses linear gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman - Uses affine gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for zeroth row in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth column in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for zeroth row in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth column in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetOptimalScoreSimple">
            <summary>
            Optimal score updated in FillCellSimple. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetOptimalScoreAffine">
            <summary>
            Optimal score updated in FillCellAffine. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback for SmithWaterman partial alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment
            of sequence1 with respect to sequence2.</param>
            <param name="startOffsets">Start indices of aligned sequences with respect to input sequences.</param>
            <param name="endOffsets">End indices of aligned sequences with respect to input sequences.</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman - Uses linear gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman - Uses affine gap penalty.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth row and zeroth column in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SmithWatermanAligner.SetBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth row and zeroth column in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SmithWatermanAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Smith-Waterman algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SmithWatermanAligner.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            SmithWatermanAligner class implements.
            </summary>
        </member>
        <member name="T:MBF.Matrix.DensePairAnsi">
            <summary>
            A Matrix that presents values externally as two sorted (16-bit) chars and internally as two bytes.
            For this class, the special Missing value must be the pair '?','?'.
            </summary>
        </member>
        <member name="T:MBF.Matrix.DenseStructMatrix`2">
            <summary>
            An abstract class for implementing a Matrix class that stores its values internally as a struct
            and in a file as a fixed number of characters. It is the superclass of, for example, DenseAnsi.
            </summary>
            <typeparam name="TStore">The struct used to store a value internally. For example, for DenseAnsi this is (8-bit) byte.</typeparam>
            <typeparam name="TValue">The type of values exposed externally. For example, for DenseAnsi this is (16-bit) char.</typeparam>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.StoreListToString(System.Collections.Generic.List{`0})">
            <summary>
            Implementor can assume that there is one value for every colKey
            </summary>
        </member>
        <member name="F:MBF.Matrix.DenseStructMatrix`2.RowKeyToStoreList">
            <summary>
            The dictionary that maps rowKeys into the stored version of a row. For example, for DenseAnsi the store list is a List of bytes.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.Write(System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Writes the matrix to a file, creating a directory if needed.
            The first line is "var" TAB and then the tab-delimited col keys.
            Next is one line per row key. Each line is the row key TAB and then all the row's values with no delimiters.
            Delimiters are not needed because each value is represented with a fixed number of characters.
            Values may include the fixed-number-of-characters version of the special Missing value.
            </summary>
            <param name="denseStructFileName">The name of the file to write to.</param>
            <param name="parallelOptions">Options for controlling any parallelism.</param>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.Write(System.IO.TextWriter,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Writes the matrix to textWriter.
            The first line is "var" TAB and then the tab-delimited col keys.
            Next is one line per row key. Each line is the row key TAB and then all the row's values with no delimiters.
            Delimiters are not needed because each value is represented with a fixed number of characters.
            Values may include the fixed-number-of-characters version of the special Missing value.
            </summary>
            <param name="textWriter">The textWriter to write to.</param>
            <param name="parallelOptions">Options for controlling any parallelism.</param>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.RowKeysInFile(System.String)">
            <summary>
            From a file denseStruct format (for example, DenseAnsi format), returns a sequence of
            the rowKeys. This method scans the file on disk, making it more efficient than first loading it into memory.
            </summary>
            <param name="denseStructFileName">The name of a file in denseStruct format</param>
            <returns>A sequence of rowKeys.</returns>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.ColKeysInFile(System.String)">
            <summary>
            From a file denseStruct format (for example, DenseAnsi format), returns a sequence of
            the colKeys. This method scans the file on disk, making it more efficient than first loading it into memory.
            </summary>
            <param name="denseStructFileName">The name of a file in denseStruct format</param>
            <returns>A sequence of colKeys.</returns>
        </member>
        <member name="M:MBF.Matrix.DenseStructMatrix`2.GetInstanceFromSparseInternal(System.Collections.Generic.IEnumerable{MBF.Matrix.RowKeyColKeyValue{System.String,System.String,`1}})">
            <summary>
            Create a DenseStructMatrix from a sequences of RowKeyColKeyValue triples.
            </summary>
            <param name="tripleEnumerable">The squences of RowKeyColKeyValue triples</param>
        </member>
        <member name="T:MBF.Matrix.DenseStructMatrix`2.StaticStringToStoreListDelegate">
            <summary>
            The type of functions that can convert a string of a row's value (with no delimiters from a denseStruct file)
            to a list of the structs used to represent those values internally.
            Raises an exception if the line is the wrong length.
            </summary>
            <param name="line">The rows values represented as a string with no delimiters.</param>
            <param name="colCount">The number of colKeys.</param>
            <returns>The list of structed used to represent the values internally.</returns>
        </member>
        <member name="T:MBF.Matrix.DenseStructMatrix`2.StoreListToStringDelegate">
            <summary>
            The type of functions that can convert a list of structs (the internal represenation of a row's values) to
            a string of the values without delimiters, suitable to writing to a denseStruct file.
            </summary>
            <param name="storeList">A list of structs used to internally represent the values of a row.</param>
            <param name="colCount">ColCount</param>
            <returns></returns>
        </member>
        <member name="F:MBF.Matrix.DensePairAnsi.StaticMissingValue">
            <summary>
            For DensePairAnsi the missing value is always the same: ?,?. This is a static version of that missing value.
            </summary>
        </member>
        <member name="F:MBF.Matrix.DensePairAnsi.StaticStoreMissingValue">
            <summary>
            For DensePairAnsi the missing value is always the same: ?,?. This is a static version of that missing value.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsi.CreateEmptyInstance(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},MBF.Util.UOPair{System.Char})">
            <summary>
            Creates an DensePairAnsi with values missing.
            </summary>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special Missing value, which must be (UO '?','?')</param>
            <returns>A new, empty, DensePairAnsi</returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsi.GetInstanceFromSparse(System.String)">
            <summary>
            Parses directly from the SparseFile format. Useful if memory must be concerved.
            </summary>
            <param name="inputSparseFileName">Name of a file in Sparse format.</param>
            <returns>An instance of DensePairAnsi.</returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsi.GetInstanceFromSparse(System.Collections.Generic.IEnumerable{MBF.Matrix.RowKeyColKeyValue{System.String,System.String,MBF.Util.UOPair{System.Char}}})">
            <summary>
            Create a DensePairAnsi object from a sequence of RowKeyColKeyValue triples.
            </summary>
            <param name="tripleEnumerable">a sequence of RowKeyColKeyValue</param>
            <returns>A DensePairAnsi object</returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsi.GetInstance(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.String,System.Collections.Generic.KeyValuePair{System.String,MBF.Util.UOPair{System.Char}}}},System.Char)">
            <summary>
            Creates a DensePairAnsi object from a sequence of groupings. A grouping here is a roew 
            </summary>
            <param name="snpGroupsCidToNucPairEnumerable"></param>
            <param name="inputsMissingChar"></param>
            <returns></returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsi.GetInstance(System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Creates a DensePairAnsi object from a file in dense pair ansi format.
            </summary>
            <param name="densePairAnsiFileName">a file in dense pair ansi format</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>the DensePairAnsi object</returns>
        </member>
        <member name="T:MBF.Matrix.DensePairAnsiExtensions">
            <summary>
            Extension methods on Matrix related to DensePairAnsi.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsiExtensions.AsDensePairAnsi(MBF.Matrix.Matrix{System.String,System.String,MBF.Util.UOPair{System.Char}},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DensePairAnsi. If matrix is already a DensePairAnsi, then returns the given matrix without copying. 
            </summary>
            <param name="inputMatrix">The matrix to convert from</param>
            <param name="parallelOptions">Options for controlling any parallelism.</param>
            <returns>A densePairAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsiExtensions.ToDensePairAnsi(MBF.Matrix.Matrix{System.String,System.String,MBF.Util.UOPair{System.Char}},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DensePairAnsi. Even if the matrix is already an densePairAnsi, a new one is created.. 
            </summary>
            <param name="matrix">The matrix to convert from</param>
            <param name="parallelOptions">Options for controlling any parallelism.</param>
            <returns>A densePairAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsiExtensions.WriteDensePairAnsi(MBF.Matrix.Matrix{System.String,System.String,MBF.Util.UOPair{System.Char}},System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Write a matrix to DensePairAnsi file format.
            </summary>
            <param name="matrix">The matrix to write</param>
            <param name="filename">The file to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="M:MBF.Matrix.DensePairAnsiExtensions.WriteDensePairAnsi(MBF.Matrix.Matrix{System.String,System.String,MBF.Util.UOPair{System.Char}},System.IO.TextWriter,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Write a matrix to DensePairAnsi file format
            </summary>
            <param name="matrix">The matrix to write</param>
            <param name="textWriter">The TextWriter to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="T:MBF.IO.SAM.SAMAlignmentHeader">
            <summary>
            Class to hold SAM Headers.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignmentHeader.MandatoryTagsForFieldTypes">
            <summary>
            Holds the mapping of record field types to its mandaroty tags.
            This will be used in the IsValid() method to validate the sepcified SAMAlignmentHeader.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignmentHeader.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignmentHeader.#ctor">
            <summary>
            Creates SAMAlignmentHeader instance.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignmentHeader.IsValid">
            <summary>
            VAlidates mandatory tags.
            </summary>
            <returns>Returns empty string if mandatory tags are present; otherwise error message.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignmentHeader.GetReferenceSequenceRanges">
            <summary>
            Returns list of SequenceRanges objects which represents reference sequences present in this header. 
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignmentHeader.GetReferenceSequences">
            <summary>
            Returns list of reference sequences present in this header. 
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignmentHeader.RecordFields">
            <summary>
            List of record fields.
            It holds all available record fields except comments.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignmentHeader.Comments">
            <summary>
            List of comment headers.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMIndexFile">
            <summary>
            Class to read or write BAMIndex data from a file or a stream.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates new instance of BAMIndexFile class with specified filename.
            </summary>
            <param name="filename">Index filename to use while reading or writing BAMIndex data.</param>
            <param name="mode">File mode to use while creating or opening specified file.</param>
            <param name="access">File access to use while creating or opening specified file.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.#ctor(System.IO.Stream)">
            <summary>
            Creates new instance of BAMIndexFile clas with specified stream.
            </summary>
            <param name="stream">Stream to use while reading or writing BAMIndex data.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.Write(MBF.IO.BAM.BAMIndex)">
            <summary>
            Writes speciied BAMIndex data.
            </summary>
            <param name="bamIndex">BAMIndex instance to write.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.Read">
            <summary>
            Returns BAMIndex instance by parsing BAM index source.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.Dispose">
            <summary>
            Disposes resources held by this object.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndexFile.Dispose(System.Boolean)">
            <summary>
            Dispose the underlying stream.
            </summary>
            <param name="disposing">If disposing equals true, Requests that the system not call the finalizer for this instance.</param>
        </member>
        <member name="P:MBF.IO.BAM.BAMIndexFile.Source">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage">
            <summary>
            Implements ISuffixEdgeStorage interface for Data base driven suffix edges storage. 
            This class has required methods to Write and Read the Persistent Edge in a file.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.ISuffixEdgeStorage">
            <summary>
            This interface defines the contract that has to be implemented by and class implementing persistent Suffix edge.
            Performs storage function on a SuffixEdge which has child edge of type T
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixEdgeStorage.Write(MBF.Algorithms.SuffixTree.IPersistentEdge)">
            <summary>
            Write the edge to database storage.
            1. Serialize the given edge.
            2. Write it to the database.
            3. Return the Key(Id) of newly inserted row.
            If the edge does not have key, insert a edge in storage
            Else update the existing edge in storage
            </summary>
            <param name="edge">Edge to be persisted</param>
            <returns>Offset/Id of new Edge</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixEdgeStorage.Read(System.Int64)">
            <summary>
            Read an edge from the storage device using ginen index (offset/Id) and return the same.
            1. Read the serialized data from storage.
            2. De-serialize it back to IEdge.
            3. Return the edge
            </summary>
            <param name="index">Index (offset/Id) of required edge</param>
            <returns>Edge found at the offset/Id</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixEdgeStorage.Remove(System.Int64)">
            <summary>
            Remove an edge from the storage device using ginen index (offset/Id).
            </summary>
            <param name="index">Index (offset/Id) of edge to be removed</param>
            <returns>Success flag</returns>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.BUFFER_SIZE">
            <summary>
            Buffer size
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage._fileName">
            <summary>
            Stream to underlying file object
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage._stream">
            <summary>
            Stream to underlying file object
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.lockObject">
            <summary>
            Object to be locked for any file operation
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.#ctor">
            <summary>
            Default Constructor: Initialize an instance of FileSuffixEdgeStorage
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Write(MBF.Algorithms.SuffixTree.IPersistentEdge)">
            <summary>
            Write the edge to database storage.
            1. Serialize the given edge.
            2. Write it to the database.
            3. Return the Key(Id) of newly inserted row.
            If the edge does not have key, insert a edge in storage
            Else update the existing edge in storage
            </summary>
            <param name="edge">Edge to be stored</param>
            <returns>Index / Key / Id / Offset of new edge</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Read(System.Int64)">
            <summary>
            Read an edge from the storage device using ginen index (offset/Id) and return the same.
            1. Read the serialized data from storage.
            2. De-serialize it back to IEdge.
            3. Return the edge
            </summary>
            <param name="index">Index / Id / Key of the required edge</param>
            <returns>Edge found with given Key</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Remove(System.Int64)">
            <summary>
            Remove an edge from the storage device using ginen index (offset/Id).
            </summary>
            <param name="index">Index (offset/Id) of edge to be removed</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Insert(MBF.Algorithms.SuffixTree.IPersistentEdge)">
            <summary>
            Insert a new row in data base and return the row identity
            </summary>
            <param name="edge">Edge to be inserted</param>
            <returns>Id of new inserted row</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Update(System.Int64,MBF.Algorithms.SuffixTree.IPersistentEdge)">
            <summary>
            Update new row in data base and return the row identity
            </summary>
            <param name="id">Identity of row to be updated</param>
            <param name="edge">Edge to be updated</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Dispose">
            <summary>
            Dispose the resources
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.FileSuffixEdgeStorage.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembly">
            <summary>
            An IDeBruijnDeNovoAssembly is the result of running De Bruijn graph based 
            De Novo Assembly on a set of sequences. 
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IDeNovoAssembly">
            <summary>
            An IDeNovoAssembly is the result of running De Novo Assembly on a set of two or more sequences. 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeNovoAssembly.AssembledSequences">
            <summary>
            Gets list of sequences created after Assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeNovoAssembly.Documentation">
            <summary>
            Gets or sets the Documentation object is intended for tracking the history, provenance,
            and experimental context of a IDeNovoAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembly.ContigSequences">
            <summary>
            Gets list of contig sequences created by assembler
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembly.Scaffolds">
            <summary>
            Gets the list of assembler scaffolds
            </summary>
        </member>
        <member name="T:MBF.IParameterValidator">
            <summary>
            A simple interface to an object that can check a value
            for conformance to any required validation rules.
            </summary>
        </member>
        <member name="M:MBF.IParameterValidator.IsValid(System.Object)">
            <summary>
            Given a value as an object, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:MBF.IParameterValidator.IsValid(System.String)">
            <summary>
            Given a value in string form, return true if the value is allowed.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="T:MBF.Web.AsyncWebMethodRequest">
            <summary>
            This class contains the inputs that are required to instantiate and invoke web method.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._url">
            <summary>
            Uri of web reqeust.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._credential">
            <summary>
            Credential to be used for web request.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._parameter">
            <summary>
            Parameters to be passed in web request header.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._postData">
            <summary>
            Post data string for web request.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._callback">
            <summary>
            Function pointer to be invoked after the completion of web request.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncWebMethodRequest._state">
            <summary>
            State to be web request.
            </summary>
        </member>
        <member name="M:MBF.Web.AsyncWebMethodRequest.#ctor(System.Uri,System.Net.ICredentials,System.Collections.Generic.Dictionary{System.String,System.String},System.String,MBF.Web.AsyncWebMethodCompleted,System.Object)">
            <summary>
            Constructor: Initialize the instance of type WebMethodInput
            </summary>
            <param name="url">Uri of web reqeust.</param>
            <param name="credential">Credential to be used for web request.</param>
            <param name="parameters">Request parameters.</param>
            <param name="postData">Post data string for web request.</param>
            <param name="callback">Function pointer to be invoked after the completion of web request.</param>
            <param name="state">State of the Async web method</param>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.Url">
            <summary>
            Gets the Uri of web reqeust.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.Credential">
            <summary>
            Gets the credential to be used for web request.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.Parameter">
            <summary>
            Gets parameters to be passed in web request header.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.PostData">
            <summary>
            Gets the post data string for web request.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.Callback">
            <summary>
            Gets the function pointer to be invoked after the completion of web request.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.Request">
            <summary>
            Gets or sets the webrequest instance.
            </summary>
        </member>
        <member name="P:MBF.Web.AsyncWebMethodRequest.State">
            <summary>
            Gets the state of Web request
            </summary>
        </member>
        <member name="T:MBF.Web.ClustalW.IClustalWServiceHandler">
            <summary>
            This interface will serve to define an element set which will be common 
            to the underlying web-service and transport protocol related information.
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.IClustalWServiceHandler.SubmitRequest(System.Collections.Generic.IList{MBF.ISequence},MBF.Web.ClustalW.ClustalWParameters)">
            <summary>
            Submit the search request with the user supplied configuration parameters and sequence.
            Implementation should make use of the MBF.IO formatters to convert the sequence into 
            the web interface compliant sequence format
            </summary>
            <remarks>An exception is thrown if the request does not succeed.</remarks>
            <param name="sequence">The sequence to search with</param>
            <param name="parameters">Blast input parameters</param>
            <returns>Service parameters</returns>
        </member>
        <member name="M:MBF.Web.ClustalW.IClustalWServiceHandler.GetRequestStatus(MBF.Web.ClustalW.ServiceParameters)">
            <summary>
            Return the status of a submitted job.
            </summary>
            <param name="parameters">Service parameters.</param>
            <returns>The status of the request.</returns>
        </member>
        <member name="M:MBF.Web.ClustalW.IClustalWServiceHandler.FetchResultsAsync(MBF.Web.ClustalW.ServiceParameters)">
            <summary>
            Fetch the search results asynchronously for the pertinent request identifier.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="serviceParameters">Service Parameters</param>
            <returns>The ClustalW results</returns>
        </member>
        <member name="M:MBF.Web.ClustalW.IClustalWServiceHandler.FetchResultsSync(MBF.Web.ClustalW.ServiceParameters)">
            <summary>
            Fetch the search results synchronously for the pertinent request identifier.
            This is a synchronous method and will not return until the results are 
            available.
            Implementation should have dedicated parsers to format the received results into
            MBF
            </summary>
            <remarks>
            An exception is thrown if the request does not succeed.
            </remarks>
            <param name="serviceParameters">Service Parameters</param>
            <returns>The ClustalW results</returns>
        </member>
        <member name="M:MBF.Web.ClustalW.IClustalWServiceHandler.CancelRequest(MBF.Web.ClustalW.ServiceParameters)">
            <summary>
            Cancels the submitted job.
            </summary>
            <param name="serviceParameters">Service Parameters</param>
            <returns>Is the job cancelled.</returns>
        </member>
        <member name="E:MBF.Web.ClustalW.IClustalWServiceHandler.RequestCompleted">
            <summary>
            This event is raised when Blast search is complete. It could be either a success or failure.
            </summary>
        </member>
        <member name="T:MBF.Web.AsyncMethodState">
            <summary>
            This Enumeration represents state of asynchronous web method call process.
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncMethodState.NotStarted">
            <summary>
            Not started
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncMethodState.Started">
            <summary>
            Started
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncMethodState.Passed">
            <summary>
            Passed
            </summary>
        </member>
        <member name="F:MBF.Web.AsyncMethodState.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:MBF.Util.Logging.CounterWithMessages">
            <summary>
            Writes messages to the console every so many increments.
            </summary>
        </member>
        <member name="M:MBF.Util.Logging.CounterWithMessages.#ctor(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Create a counter that will will output messages to the console every so many increments. Incrementing is thread-safe.
            </summary>
            <param name="formatStringWithOneOrTwoPlaceholders">A format string with containing at least {0} and, optionally, {1}.</param>
            <param name="messageInterval">How often messages should be output, in increments.</param>
            <param name="totalCountOrNull">The total number of increments, or null if not known.</param>
            <returns>A counter</returns>
        </member>
        <member name="M:MBF.Util.Logging.CounterWithMessages.#ctor(System.String,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Create a counter that will will output messages to the console every so many increments. Incrementing is thread-safe.
            </summary>
            <param name="formatStringWithOneOrTwoPlaceholders">A format string with containing at least {0} and, optionally, {1}.</param>
            <param name="messageInterval">How often messages should be output, in increments.</param>
            <param name="totalCountOrNull">The total number of increments, or null if not known.</param>
            <param name="quiet">if true, doesn't output to the console.</param>
            <returns>A counter</returns>
        </member>
        <member name="M:MBF.Util.Logging.CounterWithMessages.Increment">
            <summary>
            Increment the counter by one. Incrementing is thread-safe.
            </summary>
        </member>
        <member name="P:MBF.Util.Logging.CounterWithMessages.Index">
            <summary>
            The number of increments so far.
            </summary>
        </member>
        <member name="T:MBF.Encoding.Encodings">
            <summary>
            The currently supported and built-in encodings for sequence items.
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.IupacNA">
            <summary>
            The NCBI2na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.Ncbi2NA">
            <summary>
            The NCBI2na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.Ncbi4NA">
            <summary>
            The NCBI4na encoding standard - For DNA and RNA nucleotides
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.NcbiEAA">
            <summary>
            The NCBIeaa encoding standard - For Amino Acids
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.NcbiStdAA">
            <summary>
            The NCBIstdaa encoding standrad - For Amino Acids
            </summary>
        </member>
        <member name="F:MBF.Encoding.Encodings.all">
            <summary>
            List of all supported encodings.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Encodings.All">
            <summary>
             Gets the list of all encodings which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.QualitativeSequence">
            <summary>
            QualitativeSequence stores sequence item information along with its quality score.
            
            Following are three types of QualitativeSequence.
             1. Sanger type: 
                    A QualitativeSequence of type Sanger stores Phred quality scores.
                    Phred quality score values range from 0 to 93 are encoded and stored using ASCII 33 to 126.
                    Although in raw read data the Phred quality score rarely exceeds 60, higher scores are possible 
                    in assemblies or read maps.
             2. Solexa type: 
                    A QualitativeSequence of type Solexa stores Solexa / Illumina quality scores.
                    Score values ranges from -5 to 62 and these scores are encoded and stored using ASCII 59 to 126.
             3. Illumina type:
                    A QualitativeSequence of type Illumina stores Phred quality scores.
                    Score values ranges from 0 to 62 and these scores are encoded and stored using ASCII 64 to 126.
                    This is similar to Sanger but in this case base value is ASCII 64.
            By default this class assumes FastQFormatType as Illumina.
            Type property of this class specifies the type of QualitativeSequence.
            Note that all quality scores are ASCII encoded.
            </summary>
        </member>
        <member name="T:MBF.IQualitativeSequence">
            <summary>
            Implementations of IQualitativeSequence interface will hold sequence 
            items along with their quality scores.
            </summary>
        </member>
        <member name="M:MBF.IQualitativeSequence.Add(MBF.ISequenceItem,System.Byte)">
            <summary>
            Adds a sequence item and its quality score to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.ContainsQualityScore(System.Byte)">
            <summary>
            Indicates if the specified quality value is contained in the sequence anywhere.
            </summary>
            <param name="qualScore">Quality score to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.IQualitativeSequence.Insert(System.Int32,MBF.ISequenceItem,System.Byte)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.Insert(System.Int32,System.Char,System.Byte)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.InsertRange(System.Int32,System.String,System.Byte)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.InsertRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.Replace(System.Int32,System.Char,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.Replace(System.Int32,MBF.ISequenceItem,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
            /// <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.ReplaceRange(System.Int32,System.String,System.Byte)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.ReplaceRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.IQualitativeSequence.Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new IQualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="P:MBF.IQualitativeSequence.Type">
            <summary>
            Gets the FastQFormatType of this IQualitativeSequence.
            </summary>
        </member>
        <member name="P:MBF.IQualitativeSequence.Scores">
            <summary>
            Gets the quality scores.
            </summary>
        </member>
        <member name="T:MBF.IVirtualSequence">
            <summary>
            Interface provides the data virtualization on top of ISequence
            </summary>
        </member>
        <member name="P:MBF.IVirtualSequence.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.IVirtualSequence.BlockSize">
            <summary>
            Gets or sets single block length or size
            </summary>
        </member>
        <member name="P:MBF.IVirtualSequence.IsDataVirtualized">
            <summary>
            Gets a value indicating that whether the Data Virtualization is 
            enabled on this instance or not.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SangerMinQualScore">
            <summary>
            Minimum quality score for Sanger type.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SolexaMinQualScore">
            <summary>
            Minimum quality score for Solexa type.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.IlluminaMinQualScore">
            <summary>
            Minimum quality score for Illumina type.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SangerMaxQualScore">
            <summary>
            Maximum quality score for Sanger type
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SolexaMaxQualScore">
            <summary>
            Maximum quality score for Solexa type.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.IlluminaMaxQualScore">
            <summary>
            Maximum quality score for Illumina type.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.DefaultQualScore">
            <summary>
            Default quality score.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SangerAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Sanger format.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.SolexaAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Solexa/Illumina 1.0 format.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence.IlluminaAsciiBaseValue">
            <summary>
            ASCII Base value for encoding quality scores in Illumina 1.3 format.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence._sequence">
            <summary>
            Sequence instance to hold sequence items.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence._scores">
            <summary>
            Holds quality scores when this sequence is in readonly mode.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence._scoreList">
            <summary>
            Holds quality scores when the sequence is not in readonly mode.
            </summary>
        </member>
        <member name="F:MBF.QualitativeSequence._mapToAlphabet">
            <summary>
            Holds Mapping from Encoding to Alphabet.
            </summary>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.QualitativeSequence)">
            <summary>
            Private constructor for Clone method.
            </summary>
            <param name="qualSequence">QualitativeSequence instance.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.Encoding.IEncoding,MBF.QualitativeSequence)">
            <summary>
            Constructor to create a new QualitativeSequence from the specified QualitativeSequence,
            alphabet and encoding.
            </summary>
            <param name="alphabet">Alphabet for the new QualitativeSequence.</param>
            <param name="encoding">Encoding for the new QualitativeSequence.</param>
            <param name="qualSequence">QualitativeSequence instance.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet)">
            <summary>
            Creates a QualitativeSequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType)">
            <summary>
            Creates a QualitativeSequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,System.String)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and with default quality score.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData);
            
            The Corollary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,MBF.Encoding.IEncoding,System.String)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
             </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,System.String,System.Byte)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and with specified quality score.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData, 40);
            All sequence item of mySequence will have quality score 40.
            
            The Corollary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData, 40);
            All sequence item of mySequence will have quality score 40.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter and quality score via qualScores parameter.
            The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            The number of characters in the sequence and number of bytes in the 
            qualScores must be equal, otherwise an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
             byte[] someQualityScores = new byte[]{33,40,45,40,39,40,40,40,50,45,38,45};
            Sequence mySequence = new Sequence(Alphabets.DNA, FastQFormatType.Sanger, someSequenceData, someQualityScores);
            
            The Corollary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            byte[] someQualityScores = new byte[]{33,40,45,40,39,40,40,40,50,45,38,45};
            QualitativeSequence mySequence = new QualitativeSequence(Alphabets.RNA, FastQFormatType.Sanger, someSequenceData, someQualityScores);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,MBF.Encoding.IEncoding,System.String,System.Byte)">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScore">Quality score, this score is used for all characters in sequence parameter.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(MBF.IAlphabet,MBF.FastQFormatType,MBF.Encoding.IEncoding,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a QualitativeSequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the QualitativeSequence(IAlphabet,
            FastQFormatType, string) constructor instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="type">FastQ format type.</param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSangerToIllumina(System.Byte)">
            <summary>
            Converts Sanger quality score to Illumina quality score.
            </summary>
            <param name="qualScore">Sanger quality score.</param>
            <returns>Returns Illumina quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSangerToSolexa(System.Byte)">
            <summary>
            Converts Sanger quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Sanger quality score.</param>
            <returns>Returns Solexa quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSolexaToSanger(System.Byte)">
            <summary>
            Converts Solexa quality score to Sanger quality score.
            </summary>
            <param name="qualScore">Solexa quality score.</param>
            <returns>Returns Sanger quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSolexaToIllumina(System.Byte)">
            <summary>
            Converts Solexa quality score to Illumina quality score.
            </summary>
            <param name="qualScore">Solexa quality score.</param>
            <returns>Returns Illumina quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromIlluminaToSanger(System.Byte)">
            <summary>
            Converts Illumina quality score to Sanger quality score.
            </summary>
            <param name="qualScore">Illumina quality score.</param>
            <returns>Returns Sanger quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromIlluminaToSolexa(System.Byte)">
            <summary>
            Converts Illumina quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Illumina quality score.</param>
            <returns>Returns Solexa quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSangerToSolexa(System.Byte[])">
            <summary>
            Converts Sanger quality scores to Solexa quality scores.
            </summary>
            <param name="qualScores">Sanger quality scores.</param>
            <returns>Returns Solexa quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSangerToIllumina(System.Byte[])">
            <summary>
            Converts Sanger quality scores to Illumina quality scores.
            </summary>
            <param name="qualScores">Sanger quality scores.</param>
            <returns>Returns Illumina quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSolexaToSanger(System.Byte[])">
            <summary>
            Converts Solexa quality scores to Sanger quality scores.
            </summary>
            <param name="qualScores">Solexa quality scores.</param>
            <returns>Returns Sanger quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSolexaToIllumina(System.Byte[])">
            <summary>
            Converts Solexa quality scores to Illumina quality scores.
            </summary>
            <param name="qualScores">Solexa quality scores.</param>
            <returns>Returns Illumina quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromIlluminaToSanger(System.Byte[])">
            <summary>
            Converts Illumina quality scores to Sanger quality scores.
            </summary>
            <param name="qualScores">Illumina quality scores.</param>
            <returns>Returns Sanger quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromIlluminaToSolexa(System.Byte[])">
            <summary>
            Converts Illumina quality scores to Solexa quality scores.
            </summary>
            <param name="qualScores">Illumina quality scores.</param>
            <returns>Returns Solexa quality scores.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetDefaultQualScore(MBF.FastQFormatType)">
            <summary>
            Gets the default quality score for the specified FastQFormatType.
            </summary>
             /// <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetMaxQualScore(MBF.FastQFormatType)">
            <summary>
            Gets the maximum quality score for the specified FastQFormatType.
            </summary>
             /// <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetMinQualScore(MBF.FastQFormatType)">
            <summary>
            Gets the minimum quality score for the specified FastQFormatType.
            </summary>
            <param name="type">FastQ format type.</param>
            <returns>Quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new QualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertTo(MBF.FastQFormatType)">
            <summary>
            Converts the current instance to the specified FastQ format type 
            and returns a new instance of QualitativeSequence.
            </summary>
            <param name="type">FastQ format type to convert</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ContainsQualityScore(System.Byte)">
            <summary>
            Indicates if the specified quality value is contained in the sequence anywhere.
            </summary>
            <param name="qualScore">Quality score to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.Add(MBF.ISequenceItem,System.Byte)">
            <summary>
            Adds a sequence item and its quality score to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Insert(System.Int32,MBF.ISequenceItem,System.Byte)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Insert(System.Int32,System.Char,System.Byte)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.InsertRange(System.Int32,System.String,System.Byte)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.InsertRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Replace(System.Int32,System.Char,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Replace(System.Int32,MBF.ISequenceItem,System.Byte)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
            /// <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ReplaceRange(System.Int32,System.String,System.Byte)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ReplaceRange(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
            <param name="qualScores">Quality scores.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.MBF#IQualitativeSequence#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new IQualitativeSequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence which is sub sequence of this sequence.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.Insert(System.Int32,System.Char)">
            <summary>
            Inserts specified character at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Inserts specified sequence string at specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified position.
            </summary>
            <param name="position">Position from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Replace(System.Int32,System.Byte)">
            <summary>
            Replaces the quality score present in the specified position in this sequence 
            with the specified quality score.
            </summary>
            <param name="position">Position at which the quality score has to be replaced.</param>
            <param name="qualScore">Quality score.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ReplaceRange(System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Replaces the quality scores present in the specified position in this sequence with the specified quality scores.
            </summary>
            <param name="position">Position from which the replace of quality scores has to be started.</param>
            <param name="qualScores">List of quality scores.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence data present in the specified position in this sequence with the specified sequence data.
            </summary>
            <param name="position">Position from which the replace of sequence data has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new ISequence that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.QualitativeSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns index of the first item matching the specified item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>If found returns index of first occurrence; otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="position">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data present in the specified position.
            </summary>
            <param name="position">Position at which the sequence data has to be removed.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Clear">
            <summary>
            Clears the underlying sequence data in this sequence.
            </summary>
        </member>
        <member name="M:MBF.QualitativeSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this QualitativeSequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this QualitativeSequence.
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this QualitativeSequence.
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.System#ICloneable#Clone">
            <summary>
            Creates a new QualitativeSequence that is a copy of the current QualitativeSequence.
            </summary>
            <returns>A new object that is a copy of this QualitativeSequence.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the QualitativeSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.GetQualScore(System.Byte,MBF.FastQFormatType)">
            <summary>
            Gets the quality score from the ASCII encoded quality score.
            </summary>
            <param name="qualScore">ASCII Encoded quality score.</param>
            <param name="type">FastQ format type.</param>
            <returns>Returns quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetEncodedQualScore(System.Int32,MBF.FastQFormatType)">
            <summary>
            Gets the ASCII encoded quality score for the given quality score.
            </summary>
            <param name="qualScore">Quality Score.</param>
            <param name="type">FastQ format type</param>
            <returns>ASCII encoded quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ValidateQualScore(System.Byte,MBF.FastQFormatType)">
            <summary>
            Validates whether the specified quality score is within the FastQFormatType limit or not.
            </summary>
            <param name="qualScore">Quality score.</param>
            <param name="type">Fastq format type.</param>
            <returns>Returns true if the specified quality score is with in the limit, otherwise false.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromPhredToSolexa(System.Int32)">
            <summary>
            Converts Phred quality score to Solexa quality score.
            </summary>
            <param name="qualScore">Quality score to be converted.</param>
            <returns>Solexa quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ConvertFromSolexaToPhared(System.Int32)">
            <summary>
            Converts Solexa quality score to Phred quality score.
            </summary>
            <param name="qualScore">Quality score to be converted.</param>
            <returns>Phred quality score.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetDefaultQualScore">
            <summary>
            Gets the default quality score depending on the QualitativeSequenceItem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.QualitativeSequence.ValidateQualScore(System.Byte)">
            <summary>
            Validates whether the specified quality score is within the FastQFormatType limit or not.
            </summary>
            <param name="qualScore">Quality score.</param>
            <returns>Returns true if the specified quality score is with in the limit, otherwise false.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.GetSymbolSafeISequenceItem(MBF.ISequenceItem)">
            <summary>
            Get the sequence item converted from Encoding to Alphabet
            </summary>
            <param name="item">Sequence item to veify.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.GetAlphabetISeqeunceItem(System.Byte)">
            <summary>
            Gets the ISequenceItem from Alphabet eventhough Encoding is set.
            </summary>
            <param name="value">value to verify.</param>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.QualitativeSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="P:MBF.QualitativeSequence.Encoding">
            <summary>
            The encoding being used to translate the sequence items into string
            representations when needed, such as when calling ToString(). This
            value may also be used by individual implementations of ISequence to
            convert strings or characters passed into constructors or methods to
            convert to sequence items.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.VirtualQualitativeSequenceProvider">
            <summary>
            Gets or sets the virtual sequence provider
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.MapToAlphabet">
            <summary>
            Gets the mappring from Encoding to Alphabet.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Type">
            <summary>
            Gets the type of this QualitativeSequence.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Scores">
            <summary>
            Gets the quality scores.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.BlockSize">
            <summary>
            Gets or sets block size
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.IsDataVirtualized">
            <summary>
            Gets a value indicating that whether the Data Virtualization is 
            enabled on this instance or not.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular OrganismInfo
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["OrganismInfo"] = myOrganismInfo;
            
            To fetch the data you would use:
            
            OrganismInfo myOrganismInfo = mySequence.Metadata["OrganismInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.Count">
            <summary>
            The number of sequence items contained in the QualitativeSequence.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this QualitativeSequence.
            When IsReadOnly is true, the sequence data is stored in a compact
            array and any method for editing that data will throw an exception.
            When IsReadOnly is false, the sequence data is stored in a less
            compact structure that allows for quick edits.
            
            You can set the IsReadOnly flag. The result of doing so will transfer
            the internal storage of the data from one mechanism to the other.
            </summary>
        </member>
        <member name="P:MBF.QualitativeSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AccessionSequenceNotFound">
            <summary>
              Looks up a localized string similar to Sequence for the accession number {0} not found..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AllItemMustBeAminoAcid">
            <summary>
              Looks up a localized string similar to All items must be of type AminoAcid.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AllItemMustBeNucleotide">
            <summary>
              Looks up a localized string similar to All items must be of type Nucleotide.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ALPHABET_NULL">
            <summary>
              Looks up a localized string similar to SequenceAlphabet is null. Set it to correct alphabet!.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AlphabetMismatchInConstructor">
            <summary>
              Looks up a localized string similar to Alphabet in the specified sequence list does not have the same Alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AlphabetMismatchInEdit">
            <summary>
              Looks up a localized string similar to To add or replace with new sequence, Alphabet of the new sequence must match with the Alphabet of this SegmentedSequence..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AminoAcidsAndWeightsShouldMatch">
            <summary>
              Looks up a localized string similar to Total number of aminoacids and weights should match.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ARGUMENT_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Start of range must be smaller than end..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.AZURE_BLAST_NAME">
            <summary>
              Looks up a localized string similar to Azure BLAST.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_BAMFileNIndexFileContbeSame">
            <summary>
              Looks up a localized string similar to BAM filename and Index filename can&apos;t be same..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_CantUseBAMIndexStreamDisposed">
            <summary>
              Looks up a localized string similar to Can&apos;t use this instance anymore as underlying stream is already disposed..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .bam.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_FormatMultipleAlignmentsNotSupported">
            <summary>
              Looks up a localized string similar to BAM format does not supports writing multiple ISequenceAlignment objects to a file..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_FormatStringNotSupported">
            <summary>
              Looks up a localized string similar to BAM formatter does not support formatting to string..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_INDEXFILEEXTENSION">
            <summary>
              Looks up a localized string similar to .bai.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidBAMFile">
            <summary>
              Looks up a localized string similar to Invalid BAM file..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidCIGAR">
            <summary>
              Looks up a localized string similar to Invalid CIGAR found..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidEncodedSequenceValue">
            <summary>
              Looks up a localized string similar to Invalid encoded sequence value.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidIndexFile">
            <summary>
              Looks up a localized string similar to Invalid BAM index file..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidIntValueInOptField">
            <summary>
              Looks up a localized string similar to Invalid integer value &quot;{0}&quot; found in optional field &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidIntValueInOptFieldOfAlignedSeq">
            <summary>
              Looks up a localized string similar to Invalid integer value &quot;{0}&quot; found in optional field &quot;{1}&quot; of the alingned seq &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_InvalidOptValType">
            <summary>
              Looks up a localized string similar to Invalid optional valuetype.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_NAME">
            <summary>
              Looks up a localized string similar to BAM.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_RefSeqNotFound">
            <summary>
              Looks up a localized string similar to Reference sequence name \&quot;{0}\&quot; not found..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_TextreaderNotSupportedMessage">
            <summary>
              Looks up a localized string similar to BAM parser does not supports reading from a text reader..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_TextWriterNotSupported">
            <summary>
              Looks up a localized string similar to BAM formatter does not support writing to text writer..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAM_UnableToReadCompressedBlock">
            <summary>
              Looks up a localized string similar to Unable to read compressed block.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAMFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the BAM file format..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAMPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A BAMParser reads from a source of binary data that is formatted according to the BAM 
            file specification, and converts the data to in-memory SequenceAlignmentMap object..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BAMParserAlphabetCantBeSet">
            <summary>
              Looks up a localized string similar to Alphabet can&apos;t be set as BAM supports only DNA alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BIOHPC_BLAST_NAME">
            <summary>
              Looks up a localized string similar to BLAST @ BioHPC.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BlastNoRecords">
            <summary>
              Looks up a localized string similar to BlastXmlParser.Parse: No records were found in the input..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BREAK_LENGTH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Number of bases to be extended before stopping alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BREAK_LENGTH_NAME">
            <summary>
              Looks up a localized string similar to Break Length.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.BuilderIncorrectLength">
            <summary>
              Looks up a localized string similar to Reverse Complement builder (char array) has incorrect length. Should be equal to sequence length.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CannotAddNullSequence">
            <summary>
              Looks up a localized string similar to Can not add null to SegmentedSequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CannotContinueWithRemove">
            <summary>
              Looks up a localized string similar to The sequences at index {0} and {1} of the underlying sequence list are refer to a same sequence instance thus cannot continue with this operation..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CanNotModifyReadonlySequence">
            <summary>
              Looks up a localized string similar to Can not modify a read only sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ClustalUnknownSequence">
            <summary>
              Looks up a localized string similar to Clustal file has unknown sequence {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CLUSTALW_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .aln.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CLUSTALW_NAME">
            <summary>
              Looks up a localized string similar to ClustalW.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.CLUSTALWPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A ClustalWParser reads from a source of text that is formatted according to the ClustalW flat file specification, and converts the data to in-memory ISequenceAlignment objects.  For advanced users, the ability to select an encoding for the internal memory representation is provided. There is also a default encoding for each alphabet that may be encountered..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ComplementWithMorethanOneSubLocs">
            <summary>
              Looks up a localized string similar to Location with Complement operator cannot contain more than one sub locations..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DataVirtualizationNeedsInputFile">
            <summary>
              Looks up a localized string similar to Data virtualization needs to be enabled with proper file name..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DataVirtualizationPropertyCannotBeSet">
            <summary>
              Looks up a localized string similar to Data Virtualization is not enabled and this property cannot be set..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DataVirtualizationPropertyInvalidSet">
            <summary>
              Looks up a localized string similar to Data Virtualization is enbled and this property cannot be 0 or less..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DensePairAnsiMissingValueSignatureMustBe">
            <summary>
              Looks up a localized string similar to For DensePairAnsi the missingValue must be (UO &apos;?&apos;, &apos;?&apos;).
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DestArrayNotLargeEnoughError">
            <summary>
              Looks up a localized string similar to Destination array was not long enough..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DuplicateSQHeader">
            <summary>
              Looks up a localized string similar to Duplicate SQ header found for {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.DuplicatingReadIds">
            <summary>
              Looks up a localized string similar to Duplicate read found. Id:{0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.EBIWUBLAST_NAME">
            <summary>
              Looks up a localized string similar to EBI WU-BLAST.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.EMPTYRESPONSE">
            <summary>
              Looks up a localized string similar to Service response was empty. Request: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.EndDataCannotBeNull">
            <summary>
              Looks up a localized string similar to EndData can not be null or empty..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorCheckConditionFailed">
            <summary>
              Looks up a localized string similar to A call to CheckCondition() failed.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorCheckConditionFirstAndOnlyTooFew">
            <summary>
              Looks up a localized string similar to CheckCondition.FirstAndOnly() failed to Get the first item.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorCheckConditionFirstAndOnlyTooMany">
            <summary>
              Looks up a localized string similar to CheckCondition.FirstAndOnly() found more than one item available.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorConvertingCharacterNucleotideToDouble">
            <summary>
              Looks up a localized string similar to Error converting character nucleotide [{0}] to double.  Expected &apos;A&apos;, &apos;C&apos;, &apos;G&apos;, or &apos;T&apos;.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorConvertingDoubleToNucleotide">
            <summary>
              Looks up a localized string similar to Error converting double [{0}] to a character nucleotide.  Expected 0.0, 1.0, 2.0, or 3.0.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorConvertingSparseValToStore">
            <summary>
              Looks up a localized string similar to Expected val length [{0}] to be 1.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorConvertingValGaveMissingValue">
            <summary>
              Looks up a localized string similar to Error converting value [{0}] gave the special &apos;MissingValue &apos;[{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorInputDataShouldBeGroupedByVar">
            <summary>
              Looks up a localized string similar to The input data should be grouped by var.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ErrorNoFilesMatchSpecifiedName">
            <summary>
              Looks up a localized string similar to No files match the name given [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectDoubleToBeMinusOneOrOne">
            <summary>
              Looks up a localized string similar to Expected double [{0}] to be -1 or 1.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.Expected_var_AsFirstColumnOfHeader">
            <summary>
              Looks up a localized string similar to Expected &apos;var&apos; as first column of header.  Found [{0}] in file [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedAllMatricesToHaveSameMissingValue">
            <summary>
              Looks up a localized string similar to Expected all matrices to have the same &apos;MissingValue&apos; value.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedArgCountOfThreeOrFour">
            <summary>
              Looks up a localized string similar to Expected argument count of 3 or 4.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedBoolToBeTrueOrFalse">
            <summary>
              Looks up a localized string similar to Expected bool? to be true or false.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedByteArrayLengthAndBytesPerValueToBeEqual">
            <summary>
              Looks up a localized string similar to Expected byteArray.Length [{0}] and BytesPerValue [{[1}] to be equal.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedCharToBeZeroOrOne">
            <summary>
              Looks up a localized string similar to Expected char [{0}] to be &apos;0&apos; or &apos;1&apos;.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedColumnKeysCountToEqualValueArrayCount">
            <summary>
              Looks up a localized string similar to Expected the number of columns in the input array [{0}] to match the number of items in varList [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedColumnsToMatch">
            <summary>
              Looks up a localized string similar to Expected the columns of the two matrices to match.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedEveryColumnToBeAMemberOfThePermutation">
            <summary>
              Looks up a localized string similar to Expected every column to be a member of the permutation.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedEveryColumnToBeUsedOnceInThePermuation">
            <summary>
              Looks up a localized string similar to Expected every column to be used once and only once in a permutation.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedEveryRemappedColKeyToBeInOriginalMatrix">
            <summary>
              Looks up a localized string similar to Expected every re-mapped colKey to be in original matrix.  Unmatched keys include [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedEveryVarLineToHaveOneTab">
            <summary>
              Looks up a localized string similar to Expected every &apos;var&apos; line in file [{0}] to have exactly one tab, found [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedFileToHaveData">
            <summary>
              Looks up a localized string similar to Expected file [{0}] to have data.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedFileToHaveHeader">
            <summary>
              Looks up a localized string similar to Expected file [{0}] to have header.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedHeaderAsFirstLineOfFile">
            <summary>
              Looks up a localized string similar to Expected header as first line of file [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedHeaderToBe_var_cid_val">
            <summary>
              Looks up a localized string similar to Expected header to be &apos;var&lt;tab&gt;cid&lt;tab&gt;val&apos;, found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedItemToExist">
            <summary>
              Looks up a localized string similar to Expected item [{0}] to already exist.  Item not found.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedItemToNotExist">
            <summary>
              Looks up a localized string similar to Expected item [{0}] to not exist.  Found item more than once.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedMatrixViewColKeysToBeSubsetOfParentMatrix">
            <summary>
              Looks up a localized string similar to The colKeys of the MatrixView must be a subset the colKeys of the parentMatrix. The sets can also be equal.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedMatrixViewRowKeysToBeSubsetOfParentMatrix">
            <summary>
              Looks up a localized string similar to The rowKeys of the MatrixView must be a subset the rowKeys of the parentMatrix. The sets can also be equal.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedMaxLengthToGreaterThanOne">
            <summary>
              Looks up a localized string similar to Expected maxLength parameter to be greater than 1.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedNoCommentsInRowKeysAnsiFiles">
            <summary>
              Looks up a localized string similar to Expected no comments in RowKeysAnsi and related files.  File [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedNonZeroLengthArrayOfMatrices">
            <summary>
              Looks up a localized string similar to Expected non-zero length for the array of matrices.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedNonZeroLengthCommentToken">
            <summary>
              Looks up a localized string similar to Expected non-zero length comment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedNoOverlapBetweenRowKeys">
            <summary>
              Looks up a localized string similar to Expected no overlap between rowKeys.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedOneValueForEveryColKey">
            <summary>
              Looks up a localized string similar to Expected one value in the storeList for every colKey.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedRowKeyAndColKeyToBeInMatrix">
            <summary>
              Looks up a localized string similar to Expected rowKey and colKey to be in matrix.  rowKey [{0}] or colKey [{1}] not found..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedRowKeysCountToEqualValueArrayCount">
            <summary>
              Looks up a localized string similar to Expected the number of rows in the input array [{0}] to match the number of items in varList [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedRowsOfMatricesToMatch">
            <summary>
              Looks up a localized string similar to Expected rows of  matrices to match.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedStoreListCountToEqualColCount">
            <summary>
              Looks up a localized string similar to Expected storeList.Count [{0}] to equal colCount [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedThreeFields">
            <summary>
              Looks up a localized string similar to Expected 3 fields on each line,  found {0} in [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedToReadAllBytesOfValue">
            <summary>
              Looks up a localized string similar to Expected to read all the bytes of a value.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedTwoFieldsFoundN">
            <summary>
              Looks up a localized string similar to Expected two fields, found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedUniqueRowKeysInMatrix">
            <summary>
              Looks up a localized string similar to Expected unique rowkeys in the matrix.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedUoPairElementsToBeIComparable">
            <summary>
              Looks up a localized string similar to Expected UoPair&apos;s elements to be IComparable.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedValidRangeString">
            <summary>
              Looks up a localized string similar to Expected a valid Range string in the form m-n or m or &apos;empty&apos; (or &apos;null&apos;).  Found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedValToBeSingleCharacter">
            <summary>
              Looks up a localized string similar to Expected the &apos;val&apos; to be a single character.  Found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ExpectedValToContainTwoCharacters">
            <summary>
              Looks up a localized string similar to Expected 2 characters in val, found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTA_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fa,.mpfa,.fna,.faa,.fsa,.fas,.fasta.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTA_NAME">
            <summary>
              Looks up a localized string similar to Fasta.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTAFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. .
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTAPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_EmptyQualityScoreLine">
            <summary>
              Looks up a localized string similar to Quality score line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTQ_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .fq,.fastq.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_InvalidQualityScoreHeaderData">
            <summary>
              Looks up a localized string similar to Quality scores header does not match with sequence header for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_InvalidQualityScoreHeaderLine">
            <summary>
              Looks up a localized string similar to Input file or data stream is missing &quot;+&quot; in the quality score header line for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_InvalidQualityScoresLength">
            <summary>
              Looks up a localized string similar to Total number of quality scores and sequence symbols are not same for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_InvalidSequence">
            <summary>
              Looks up a localized string similar to FastQ formatter can format IQualitativeSequence instances only..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FastQ_InvalidSequenceLine">
            <summary>
              Looks up a localized string similar to Sequence data line is empty for the sequence Id: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTQ_NAME">
            <summary>
              Looks up a localized string similar to FastQ.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTQFORMATTER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Writes an IQualitativeSequence to a particular location, usually a file. The output is formatted according to the FASTQ file format..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FASTQPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A FastQParser reads from a source of text that is formatted according to the FASTQ file specification, and converts the data to in-memory IQualitativeSequence objects..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FileNameMustNotContainPathInformation">
            <summary>
              Looks up a localized string similar to The file name must not include any path information. It will be created in the other file&apos;s directory..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FirstInputSequenceMismatchSimilarityMatrix">
            <summary>
              Looks up a localized string similar to First input sequence alphabet does not match similarity matrix alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FIXED_SEPARATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum fixed diagonal difference.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.FIXED_SEPARATION_NAME">
            <summary>
              Looks up a localized string similar to Fixed Separation.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ForwardReadCount">
            <summary>
              Looks up a localized string similar to Forward Read is empty.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GAP_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of inserting a gap character.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GAP_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Cost.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GAP_EXTENSION_COST_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Cost of extending an already existing gap.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GAP_EXTENSION_COST_NAME">
            <summary>
              Looks up a localized string similar to Gap Extension Cost.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GENBANK_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gb,.gbk,.genbank.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GENBANK_NAME">
            <summary>
              Looks up a localized string similar to GenBank.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GenbankEmptyFeature">
            <summary>
              Looks up a localized string similar to Unexpected empty feature key..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GenBankFailedToParseLocusTokenFormat">
            <summary>
              Looks up a localized string similar to Failed to parse locus token: {0}, Locus: {1}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GENBANKFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GenbankInvalidFeature">
            <summary>
              Looks up a localized string similar to Invalid feature line: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GENBANKPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GenBankUnknownLocusFormat">
            <summary>
              Looks up a localized string similar to Unknown LOCUS format: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GFF_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .gff.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GFF_NAME">
            <summary>
              Looks up a localized string similar to GFF.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GFFFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GFF file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GffInvalidField">
            <summary>
              Looks up a localized string similar to Invalid {0} field: {1}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GffInvalidSequence">
            <summary>
              Looks up a localized string similar to Invalid sequence line: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GFFNoFeatures">
            <summary>
              Looks up a localized string similar to GFF file contains no features..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GFFPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A GffParser reads from a source of text that is formatted according to the GFF flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.GffUnsupportedVersion">
            <summary>
              Looks up a localized string similar to Unsupported GFF version: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.HeaderContainsNullValue">
            <summary>
              Looks up a localized string similar to Header should not contain null values..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.IndexParameterName">
            <summary>
              Looks up a localized string similar to index.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InputAlphabetsMismatch">
            <summary>
              Looks up a localized string similar to Input sequences use different alphabets..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InputSequenceMustBeGreaterThanMUM">
            <summary>
              Looks up a localized string similar to Length of input sequence should be greater than Length of MUM [{0}]..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.INVALID_INPUT_FILE">
            <summary>
              Looks up a localized string similar to Bad input in file [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.INVALID_SYMBOL">
            <summary>
              Looks up a localized string similar to Symbol {0} is not a valid {1} symbol.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidByteValue">
            <summary>
              Looks up a localized string similar to Could not recognize the byte value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidEncodingForAlphabet">
            <summary>
              Looks up a localized string similar to Specified encoding &quot;{0}&quot; is not valid for the {1} Alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidEndData">
            <summary>
              Looks up a localized string similar to Invalid end data [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidIndexAndLength">
            <summary>
              Looks up a localized string similar to Index and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidKmerIndex">
            <summary>
              Looks up a localized string similar to Node does not have valid Kmer index information.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidLength_Sequence_QualScores">
            <summary>
              Looks up a localized string similar to The number of characters in the sequence and number of bytes in the qualScores are must be equal..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidLocationString">
            <summary>
              Looks up a localized string similar to Invalid location string [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidOptionalField">
            <summary>
              Looks up a localized string similar to Invalid optional field [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidParameterValue">
            <summary>
              Looks up a localized string similar to Parameter value is not belongs to the specified encoding..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidPatternFormat">
            <summary>
              Looks up a localized string similar to Invalid character {0} encountered at {1}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidPatternMessage">
            <summary>
              Looks up a localized string similar to Invalid {0}: &quot;{1}&quot;. The allowed pattern is: {2}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidPositionAndLength">
            <summary>
              Looks up a localized string similar to Position and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidQNameLength">
            <summary>
              Looks up a localized string similar to Invalid QName value. Maximum allowed length for QName value is 254 characters..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidQualityScore">
            <summary>
              Looks up a localized string similar to Invalid quality score: [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidRangeBeginMustBeLessThanLast">
            <summary>
              Looks up a localized string similar to Invalid Range: &apos;begin&apos; [{0}] must be less than &apos;last&apos; [{1}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidRangeMessage">
            <summary>
              Looks up a localized string similar to Invalid {0}: &quot;{1}&quot;. The allowed range is {2} to {3}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidRangeSizeOfRangeMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Invalid Range Size: Size of range must be greater than 0.  Found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidRangeSizeOfRangeMustBeLessThanMaxValue">
            <summary>
              Looks up a localized string similar to Invalid Range Size: Size of range must be less than long.MaxValue.  Found [{0}].
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidReferredAlphabet">
            <summary>
              Looks up a localized string similar to Alphabet of {0} sequence is invalid..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidSearchParameter">
            <summary>
              Looks up a localized string similar to SearchParameter: Only int, float, and stringList supported..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidSeparator">
            <summary>
              Looks up a localized string similar to Invalid separator {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidStartAndLength">
            <summary>
              Looks up a localized string similar to Start and length do not denote a valid range of elements in the sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidStartData">
            <summary>
              Looks up a localized string similar to Invalid start data: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidStartNEndPositions">
            <summary>
              Looks up a localized string similar to Start position must be less than or equal to the end position..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidStreamEncoding">
            <summary>
              Looks up a localized string similar to Cannot stream on sequences of ambiguous encoding..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidSuffixTreeEncoding">
            <summary>
              Looks up a localized string similar to Cannot build suffix tree on sequences of ambiguous encoding..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidSymbol">
            <summary>
              Looks up a localized string similar to Could not recognize symbol: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidSymbolInString">
            <summary>
              Looks up a localized string similar to Could not recognize one or more symbol in the sequence: {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidType">
            <summary>
              Looks up a localized string similar to Unknown type format: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidTypeIndexedItem">
            <summary>
              Looks up a localized string similar to obj is not an IndexedItem&lt;T&gt;.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.InvalidTypeIndexedSequenceItem">
            <summary>
              Looks up a localized string similar to obj is not an IndexedSequenceItem.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.IOFormatErrorMessage">
            <summary>
              Looks up a localized string similar to {0} Format error - {1}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.IONoTextToParse">
            <summary>
              Looks up a localized string similar to No text to parse in the specified input file or data stream..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ItemAlreadyExists">
            <summary>
              Looks up a localized string similar to Item already exists.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.KmerDictionaryCannotBeNull">
            <summary>
              Looks up a localized string similar to KmerDictionary Cannot Be Null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.KmerIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Kmer sequence index is out of range for node.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.KmerLengthIsTooLong">
            <summary>
              Looks up a localized string similar to Kmer Length is larger than the sequence length.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.KmerLengthShouldBePositive">
            <summary>
              Looks up a localized string similar to Kmer Length needs to be a positive value.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.KmerPositionOutOfRange">
            <summary>
              Looks up a localized string similar to Kmer position or length is out of range for node.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LENGTH_OF_MUM_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum legnth of Maximal Unique Match.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LENGTH_OF_MUM_NAME">
            <summary>
              Looks up a localized string similar to Length of MUM.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LibraryExist">
            <summary>
              Looks up a localized string similar to Library doesn&apos;t exist.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LibraryInvalidParameters">
            <summary>
              Looks up a localized string similar to Library - Invalid Parameters.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LIST_EMPTY">
            <summary>
              Looks up a localized string similar to List is empty. Should contain atleast one element!.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.LogFileName">
            <summary>
              Looks up a localized string similar to MBF.log.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MandatoryTagNotFound">
            <summary>
              Looks up a localized string similar to Mandatory tag {0} is not found for the record type {1}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MatrixSpecialValueUseError">
            <summary>
              Looks up a localized string similar to The value in the pair should not be the special &apos;missing value&apos;..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MAXIMUM_SEPARATION_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Maximum separation between the adjacent matches in clusters.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MAXIMUM_SEPARATION_NAME">
            <summary>
              Looks up a localized string similar to Maximum Separation.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MINIMUM_SCORE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Minimum output score.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MINIMUM_SCORE_NAME">
            <summary>
              Looks up a localized string similar to Minimum Score.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MinimumTwoSequences">
            <summary>
              Looks up a localized string similar to Minimum two sequences are required to run alignment..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MUMLengthTooSmall">
            <summary>
              Looks up a localized string similar to Minimum length of MUM cannot be less than 1..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MUMMER3">
            <summary>
              Looks up a localized string similar to MUMmer 3.0.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MUMMER3DESC">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.MUMmerIncompatibleAligner">
            <summary>
              Looks up a localized string similar to MUMmer currently runs only with Needleman-Wunsch / Smith-Waterman algorithms..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NCBIQBLAST_NAME">
            <summary>
              Looks up a localized string similar to NCBI QBLAST.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEEDLEMAN_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEEDLEMAN_NAME">
            <summary>
              Looks up a localized string similar to Needleman-Wunsch.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEWICK_FILE_EXTENSION">
            <summary>
              Looks up a localized string similar to .txt, .tre, .newick.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEWICK_FORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a PhylogeneticTree to a particular location, usually a file. The output is formatted
            according to the Newick format..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEWICK_NAME">
            <summary>
              Looks up a localized string similar to Newick.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEWICK_PARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Reads from a source of text that is formatted according to the Newick flat
            file specification, and converts the data to in-memory PhylogeneticTree object..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEXUS_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .nxs,.nex.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEXUS_NAME">
            <summary>
              Looks up a localized string similar to Nexus.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NEXUSPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A NexusParser reads from a source of text that is formatted according to the Nexus flat file specification, and converts the data to in-memory ISequenceAlignment objects.  For advanced users, the ability to select an encoding for the internal memory representation is provided. There is also a default encoding for each alphabet that may be encountered..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NoneWithSubLocs">
            <summary>
              Looks up a localized string similar to Location with None operator can not contain sub locations..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupported_SequenceContainsNullItem">
            <summary>
              Looks up a localized string similar to Not Supported as sequence contains null sequence items.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupportedBasicDerivedSequence">
            <summary>
              Looks up a localized string similar to Not supported in BasicDerivedSequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupportedInBasicDerivedSequence">
            <summary>
              Looks up a localized string similar to Modifying a source sequence through a derived sequence is not supported..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupportedInVirtualSequence">
            <summary>
              Looks up a localized string similar to Not supported in VirtualSequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupportedReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Not supported in ReadOnlyCollection..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NotSupportedSparseSequence">
            <summary>
              Looks up a localized string similar to Not supported in SparseSequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NtaxMismatch">
            <summary>
              Looks up a localized string similar to ntax does not match the number of IDs..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NucleotidesAndWeightsShouldMatch">
            <summary>
              Looks up a localized string similar to Total number of nucleoties and weights should match.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NUCMER3">
            <summary>
              Looks up a localized string similar to NUCmer 3.0.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NUCMER3DESC">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NullLocationBuild">
            <summary>
              Looks up a localized string similar to LocationBuilder can not be null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.NullResolver">
            <summary>
              Looks up a localized string similar to Resolver can not be null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.OnlyDNAOrRNAInput">
            <summary>
              Looks up a localized string similar to Only DNA &amp; RNA sequences can be passed as input to {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.OutOfSpec">
            <summary>
              Looks up a localized string similar to out-of-spec SOURCE.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PAIRWISE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise global alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PAIRWISE_NAME">
            <summary>
              Looks up a localized string similar to Pairwise-Overlap.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PairwiseAlignerWrongArgumentCount">
            <summary>
              Looks up a localized string similar to Pairwise Alignment expected 2 input sequences, received {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParamCHmustbeLessThan256">
            <summary>
              Looks up a localized string similar to ch must be less than 256.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PARAMETER_UNKNOWN">
            <summary>
              Looks up a localized string similar to Unknown parameter name {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PARAMETER_VALUE_INVALID">
            <summary>
              Looks up a localized string similar to Invalid parameter value {0} for parameter {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterContainsNullValue">
            <summary>
              Looks up a localized string similar to Specified argument contains a null value..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterEmpty">
            <summary>
              Looks up a localized string similar to Specified argument was empty..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterItemMustBeAminoAcid">
            <summary>
              Looks up a localized string similar to Parameter item must be of type AminoAcid.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterItemMustBeNucleotide">
            <summary>
              Looks up a localized string similar to Parameter item must be of type Nucleotide.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterMustLessThanCount">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative and less than the count of this sequence..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterMustLessThanOrEqualToCount">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative and less than or equal to the count of this sequence..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterMustNonNegative">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range it must be non negative..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameAlphabet">
            <summary>
              Looks up a localized string similar to alphabet.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameAminoAcids">
            <summary>
              Looks up a localized string similar to aminoacids.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameArray">
            <summary>
              Looks up a localized string similar to array.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameEncoding">
            <summary>
              Looks up a localized string similar to encoding.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameEndPos">
            <summary>
              Looks up a localized string similar to endPos.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameiContig">
            <summary>
              Looks up a localized string similar to iContig.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameIndex">
            <summary>
              Looks up a localized string similar to index.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameItem">
            <summary>
              Looks up a localized string similar to item.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameLength">
            <summary>
              Looks up a localized string similar to length.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameLocation">
            <summary>
              Looks up a localized string similar to location.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameNucleotides">
            <summary>
              Looks up a localized string similar to nucleotides.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNamePosition">
            <summary>
              Looks up a localized string similar to position.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameQualScore">
            <summary>
              Looks up a localized string similar to qualScore.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameQualScores">
            <summary>
              Looks up a localized string similar to qualScores.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameQualSequence">
            <summary>
              Looks up a localized string similar to qualSequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameQuery">
            <summary>
              Looks up a localized string similar to query.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSequence">
            <summary>
              Looks up a localized string similar to sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSequenceAlignment">
            <summary>
              Looks up a localized string similar to sequenceAlignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSequenceItems">
            <summary>
              Looks up a localized string similar to sequenceItems.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSequences">
            <summary>
              Looks up a localized string similar to sequences.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSize">
            <summary>
              Looks up a localized string similar to size.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameSource">
            <summary>
              Looks up a localized string similar to source.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameStart">
            <summary>
              Looks up a localized string similar to start.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameStartPos">
            <summary>
              Looks up a localized string similar to startPos.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameValue">
            <summary>
              Looks up a localized string similar to value.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameWeights">
            <summary>
              Looks up a localized string similar to weights.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNameWriter">
            <summary>
              Looks up a localized string similar to writer.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParameterNotKnownByAlphabet">
            <summary>
              Looks up a localized string similar to Specified argument was not known by the Alpabet of this sequence..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParseHeaderError">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid header..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.Parser_NoTextErrorMessage">
            <summary>
              Looks up a localized string similar to No text to parse..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserIncorrectAlphabet">
            <summary>
              Looks up a localized string similar to Incorrect alphabet set by user..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserInvalidDate">
            <summary>
              Looks up a localized string similar to Invalid date format: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserInvalidLocus">
            <summary>
              Looks up a localized string similar to Unknown LOCUS format: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserInvalidReferenceField">
            <summary>
              Looks up a localized string similar to Invalid reference field name: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserInvalidSourceField">
            <summary>
              Looks up a localized string similar to Invalid source field name: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserInvalidStrand">
            <summary>
              Looks up a localized string similar to Invalid strand topology: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserPrimaryLineError">
            <summary>
              Looks up a localized string similar to Error in PRIMARY line: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserReferenceError">
            <summary>
              Looks up a localized string similar to Data after REFERENCE should start with reference number: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserSecondLocus">
            <summary>
              Looks up a localized string similar to Second locus encountered {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ParserUnexpectedLineInSequence">
            <summary>
              Looks up a localized string similar to Unexpected line within sequence data: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PHYLIP_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .phy,.ph.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PHYLIP_NAME">
            <summary>
              Looks up a localized string similar to Phylip.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.PHYLIPPARSER_DESCRIPTION">
            <summary>
              Looks up a localized string similar to A PhylipParser reads from a source of text that is formatted according to the Phylip flat file specification, and converts the data to in-memory ISequenceAlignment objects.  For advanced users, the ability to select an encoding for the internal memory representation is provided. There is also a default encoding for each alphabet that may be encountered..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ProgressStatus_Reading">
            <summary>
              Looks up a localized string similar to Reading {0}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.QueryListCannotBeNull">
            <summary>
              Looks up a localized string similar to Query sequence list cannot be null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.QuerySequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Query sequence cannot be null..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.READ_ONLY_COLLECTION_MESSAGE">
            <summary>
              Looks up a localized string similar to Cannot modify a read-only collection..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ReadCannotBeNull">
            <summary>
              Looks up a localized string similar to One of the reads in input list is null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ReadCount">
            <summary>
              Looks up a localized string similar to Read is empty.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.RealAssert">
            <summary>
              Looks up a localized string similar to real assert.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ReferenceListCannotBeNull">
            <summary>
              Looks up a localized string similar to Reference sequence list cannot be null..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ReferenceSequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Reference sequence cannot be null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.RefSequenceNofFound">
            <summary>
              Looks up a localized string similar to Can&apos;t parse sequences which contains &apos;=&apos; symbol without the reference sequence..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.REGISTRATION_LOADING_ERROR">
            <summary>
              Looks up a localized string similar to Add-In Loading Issue on {0} , Instance : {1}.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ReverseReadCount">
            <summary>
              Looks up a localized string similar to Reverse Read is empty.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_AlignedSequenceHeaderMissing">
            <summary>
              Looks up a localized string similar to Header is missing in one of the aligned sequence in specified sequenceAlignment object..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_AlignmentHeaderMissing">
            <summary>
              Looks up a localized string similar to Alignment header not found..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .sam.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_FormatMultipleAlignmentsNotSupported">
            <summary>
              Looks up a localized string similar to SAM format does not supports writing multiple ISequenceAlignment objects to a file..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_InvalidInputFile">
            <summary>
              Looks up a localized string similar to Invalid SAM File..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAM_NAME">
            <summary>
              Looks up a localized string similar to SAM.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMAlignedSequenceHeaderNotFound">
            <summary>
              Looks up a localized string similar to SAMAlignedSequenceHeader not found.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMAlignmentHeaderNotFound">
            <summary>
              Looks up a localized string similar to SAMAlignmentHeader not found.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMFORMATTER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to Writes a SequenceAlignmentMap to a particular location, usually a file. The output is formatted
            according to the SAM file format..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMFormatterSupportsDNAOnly">
            <summary>
              Looks up a localized string similar to SAM only supports DNA aplhabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMPARSER_DESCRIPTION">
             <summary>
               Looks up a localized string similar to A SAMParser reads from a source of text that is formatted according to the SAM 
            file specification, and converts the data to in-memory SequenceAlignmentMap objects..
             </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SAMParserAlphabetCantBeSet">
            <summary>
              Looks up a localized string similar to Alphabet can&apos;t be set as SAM supports only DNA alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SecondInputSequenceMismatchSimilarityMatrix">
            <summary>
              Looks up a localized string similar to Second input sequence alphabet does not match similarity matrix alphabet..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SEPARATION_FACTOR_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Separation factor.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SEPARATION_FACTOR_NAME">
            <summary>
              Looks up a localized string similar to Separation Factor.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceAlphabetMismatch">
            <summary>
              Looks up a localized string similar to Sequences are of different alphabet type in the alignment..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceCannotBeNull">
            <summary>
              Looks up a localized string similar to Sequence should not be null.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceCountMismatch">
            <summary>
              Looks up a localized string similar to Number of sequence in alignment do not match the actual count..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceLengthExceedsLimit">
            <summary>
              Looks up a localized string similar to Cross product of input sequences length ({0}, {1}) exceeds integer maximum value {2}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceLengthMismatch">
            <summary>
              Looks up a localized string similar to Sequence length does not match..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceLengthsMismatch">
            <summary>
              Looks up a localized string similar to Sequence length in alignment do not match the actual length..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceRangeEndError">
            <summary>
              Looks up a localized string similar to End index of SequenceRange cannot be lesser than start index.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceRangeNonNegative">
            <summary>
              Looks up a localized string similar to SequenceRange start and end cannot be set to negative numbers.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SequenceRangeStartError">
            <summary>
              Looks up a localized string similar to Start index of SequenceRange cannot be greater than end index.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SERVICE_HANDLER_ASSEMBLY">
            <summary>
              Looks up a localized string similar to MBF.WebServiceHandlers.dll.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMILARITY_MATRIX_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Describes matrix that determines the score for any possible pair of symbols.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMILARITY_MATRIX_NAME">
            <summary>
              Looks up a localized string similar to Similarity Matrix.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_BadOrMissingValue">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Bad or missing value in line {0}, exception {1}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_DiagonalSM">
            <summary>
              Looks up a localized string similar to Diagonal (Match x Mismatch).
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_FewerMatrixLines">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Fewer matrix line than needed..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_InvalidMoleculeType">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Invalid molecule type {0} in similarity matrix file..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_NameMissing">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Missing name (first line)..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrix_SecondLineMissing">
            <summary>
              Looks up a localized string similar to SimilarityMatrix from file or stream. Missing second line..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SimilarityMatrixCannotBeNull">
            <summary>
              Looks up a localized string similar to Similarity Matrix cannot be null..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMPLE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Implements a simple greedy assembly algorithm for DNA..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMPLE_NAME">
            <summary>
              Looks up a localized string similar to Simple-Sequence.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMPLE_SNP_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Basic SNP Parser that uses XSV format.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMPLE_SNP_FILEEXTENSION">
            <summary>
              Looks up a localized string similar to .tsv.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SIMPLE_SNP_NAME">
            <summary>
              Looks up a localized string similar to Basic SNP.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SMITH_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Pairwise local alignment.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SMITH_NAME">
            <summary>
              Looks up a localized string similar to Smith-Waterman.
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SparseSequenceConstructorIndexOutofRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the maximum value of an integer..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.SQHeaderMissing">
            <summary>
              Looks up a localized string similar to SQ header is missing for {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.StartDataCannotBeNull">
            <summary>
              Looks up a localized string similar to StartData can not be null or empty..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.TracebackBadSource">
            <summary>
              Looks up a localized string similar to {0} : Bad source in Traceback..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.UnexpectedSecondSequenceName">
            <summary>
              Looks up a localized string similar to Unexpected second sequence name encountered: {0}..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.UnknownElement">
            <summary>
              Looks up a localized string similar to {0}: Don&apos;t know element &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.ValidExtensionsNotSet">
            <summary>
              Looks up a localized string similar to Valid extensions not set. In case &apos;valid&apos; flag is being used, call ComputeValidExtensions(). Otherwise, use RightExtension / LeftExtension property instead..
            </summary>
        </member>
        <member name="P:MBF.Properties.Resource.XsvOffsetNotFound">
            <summary>
              Looks up a localized string similar to Could not find a comment line with the offset, sequence ID.
            </summary>
        </member>
        <member name="T:MBF.MetadataListItem`1">
            <summary>
            It is common for a biological sequence file to contain lists of certain types of metadata,
            such as features or references, which can be stored as MetadataListItems.  A
            MetadataListItem contains a key (which might not be unique) a free-text field of top level
            information (such as a sequence location), and a list of sub-items, each consisting of
            a key and a data field of type T.  If the sub-items have unique keys, a string type can be
            used for T.  But if the sub-item keys are not unique, a list of strings should be used
            for T.
            </summary>
        </member>
        <member name="M:MBF.MetadataListItem`1.#ctor(System.String,System.String)">
            <summary>
            Constructs list item with given key and free text.
            </summary>
            <param name="key">The key, which might not be unique among items in the list.</param>
            <param name="freeText">The top level free-text information, such as a location string.
            </param>
        </member>
        <member name="M:MBF.MetadataListItem`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.MetadataListItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the metadata list item.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.MetadataListItem`1.Key">
            <summary>
            Gets the key for this item.  These are not necessarily unique within a list,
            which is why this is a property of an object to be included in a list, rather than
            omitting this as a property and using a dictionary instead of a list.
            </summary>
        </member>
        <member name="P:MBF.MetadataListItem`1.FreeText">
            <summary>
            Gets the free-text for this item.  This will often be a location string.
            </summary>
        </member>
        <member name="P:MBF.MetadataListItem`1.SubItems">
            <summary>
            Gets the dictionary of attributes.
            </summary>
        </member>
        <member name="T:MBF.IO.XsvSparseFormatter">
            <summary>
            This class will write a sparse sequence to a character separated value file,
            with one line per sequence item. The sequence ID, the sequence count and 
            offset (if provided) will be written as a comment to a sequence start line.
            Multiple sparse sequences can be written with the sequence start line
            acting as delimiters.
            E.g. formatting with '#' as sequence prefix and ',' as character separator
            #0,100, A sparse sequence of length 100 with 2 items
            12,A
            29,T
            #3,10, A sparse sequence of length 10 at offset 3 with 1 item
            2,G
            #0,10, A sparse sequence of length 15 with no items
            </summary>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.#ctor(System.Char,System.Char)">
            <summary>
            Creates an XsvSparseFormatter to format ISequences with one 
            line per sequence item. Useful for efficient serialization of sparse 
            sequences.
            </summary>
            <param name="separator_">Seprator character to be used between sequence item 
            position and its symbol.</param>
            <param name="sequenceIDPrefix_">The character to prefix the sequence start 
            line with.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
                        Writes an ISequence to the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.Format(MBF.ISequence,System.Int32,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to the location specified by the writer, 
            after adding an offset value to the position.
            
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="positionOffset">Adds this offset value to the item position within the sequence</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.Format(MBF.ISequence,System.String)">
            <summary>
                        Writes an ISequence to the specified file.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="filename">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.IO.TextWriter)">
            <summary>
                        Write a collection of ISequences to a writer.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequences.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.String)">
            <summary>
                        Write a collection of ISequences to a file.
            </summary>
            <param name="sequences">The sequences to write.</param>
            <param name="filename">The name of the file to write the formatted sequences.</param>
        </member>
        <member name="M:MBF.IO.XsvSparseFormatter.FormatString(MBF.ISequence)">
            <summary>
                        Converts an ISequence to a formatted string.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <returns>
            A string of the formatted text.
            </returns>
        </member>
        <member name="P:MBF.IO.XsvSparseFormatter.Separator">
            <summary>
            The character to separate the position and sequence item symbol on each line
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseFormatter.SequenceIDPrefix">
            <summary>
            this prefix will be printed at the start of the line with 
            the offset, count and sequence ID. This is treated as the comment 
            character prefix in the underlying XsvTextReader.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseFormatter.Name">
            <summary>
                        Gets the name of the sequence formatter being
                        implemented. This is intended to give the
                        developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseFormatter.Description">
            <summary>
                        Gets the description of the sequence formatter being
                        implemented. This is intended to give the
                        developer some information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseFormatter.FileTypes">
            <summary>
                        Gets the file extensions that the formatter implementation
                        will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceDivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.None">
            <summary>
            None - Division code is unspecified.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.PRI">
            <summary>
            Primate sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.ROD">
            <summary>
            Rodent sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.MAM">
            <summary>
            Other mammalian sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.VRT">
            <summary>
            Other vertebrate sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.INV">
            <summary>
            Invertebrate sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.PLN">
            <summary>
            Plant, fungal, and algal sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.BCT">
            <summary>
            Bacterial sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.VRL">
            <summary>
            Viral sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.PHG">
            <summary>
            Bacteriophage sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.SYN">
            <summary>
            Synthetic sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.UNA">
            <summary>
            Unannotated sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.EST">
            <summary>
            EST sequences (expressed sequence tags).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.PAT">
            <summary>
            Patent sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.STS">
            <summary>
            STS sequences (sequence tagged sites).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.GSS">
            <summary>
            GSS sequences (genome survey sequences).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.HTG">
            <summary>
            HTGS sequences (high throughput genomic sequences).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.HTC">
            <summary>
            HTC sequences (high throughput cDNA sequences).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.ENV">
            <summary>
            Environmental sampling sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceDivisionCode.CON">
            <summary>
            Constructed sequences.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankMetadata">
            <summary>
            GenBankMetadata class holds metadata provided 
            by the gen bank flat file format.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.#ctor">
            <summary>
            Default Constructor.
            Creates GenBankMetadata instance.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.#ctor(MBF.IO.GenBank.GenBankMetadata)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">GenBankMetadata instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.GetFeatures(System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.GetFeatures(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the features which are partly or completely inside the specified range 
            and belongs to specified accession.
            Note that the startPosition and endPosition are one based position.
            </summary>
            <param name="accession">Accession number.</param>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeature(MBF.IO.GenBank.FeatureItem)">
            <summary>
            Returns list of citation references in this metadata which are referred in the specified feature.
            </summary>
            <param name="item">Feature Item.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.GetCitationsReferredInFeatures">
            <summary>
            Returns list of citation references in this metadata which are referred in features.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.Clone">
            <summary>
            Creates a new GenBankMetadata that is a copy of the current GenBankMetadata.
            </summary>
            <returns>A new GenBankMetadata that is a copy of this GenBankMetadata.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankMetadata.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankMetadata that is a copy of the current GenBankMetadata.
            </summary>
            <returns>A new object that is a copy of this GenBankMetadata.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Locus">
            <summary>
            Gets or sets the locaus information.
            Locus is a short mnemonic name for the entry, chosen to suggest the
            sequence's definition
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Definition">
            <summary>
            Gets or sets the defination.
            Definition is a concise description of the sequence
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Accession">
            <summary>
            Accession is identifier assigned to each GenBank sequence record.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Version">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Project">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flatfile format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.DBLink">
            <summary>
            DBLink provides cross-references to resources that support the existence 
            a sequence record, such as the Project Database and the NCBI 
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.DBSource">
            <summary>
            DBSource provies reference to the GenBank record from which the protein 
            translation was obtained.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Keywords">
            <summary>
            Short phrases describing gene products and other information about the sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Segment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Source">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.References">
            <summary>
            Citations for all articles containing data reported in this entry.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Comments">
            <summary>
            Cross-references to other sequence entries, comparisons to
            other collections, notes of changes in LOCUS names, and other remarks.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Primary">
            <summary>
            Provides the reference to the primary GenBank files from which annotaions 
            in this file are derived.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Features">
            <summary>
            Containing information on portions of the sequence that code for 
            proteins and RNA molecules and information on experimentally determined 
            sites of biological significance.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.BaseCount">
            <summary>
            Summary of the number of occurrences of each basepair code 
            (a, c, t, g, and other) in the sequence.
            
            This is obsolete and was removed from the GenBank flatfile 
            format in October 2003.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Origin">
            <summary>
            Specification of how the first base of the reported sequence is 
            operationally located within the genome. Where possible, this 
            includes its location within a larger genetic map.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankMetadata.Contig">
            <summary>
            provides information about how individual sequence records can be 
            combined to form larger-scale biological objects, such as chromosomes 
            or complete genomes. Rather than presenting actual sequence data, a 
            special join() statement provides the accession numbers and basepair 
            ranges of the underlying records which comprise the object.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ProteinBindingSite">
            <summary>
            Non-covalent protein binding site on nucleic acid.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ProteinBindingSite.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new ProteinBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ProteinBindingSite.#ctor(System.String)">
            <summary>
            Creates new ProteinBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ProteinBindingSite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ProteinBindingSite.#ctor(MBF.IO.GenBank.ProteinBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ProteinBindingSite instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ProteinBindingSite.Clone">
            <summary>
            Creates a new ProteinBindingSite that is a copy of the current ProteinBindingSite.
            </summary>
            <returns>A new ProteinBindingSite that is a copy of this ProteinBindingSite.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProteinBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.OverlapDeNovoAssembler">
            <summary>
            Implements a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IOverlapDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing 
            overlap based De Novo Sequence assembler.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing De Novo Sequence assembler.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.IDeNovoAssembler.Assemble(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>IDeNovoAssembly instance which contains list of 
            assembled sequences</returns>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeNovoAssembler.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeNovoAssembler.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold that determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler._sequenceAlphabet">
            <summary>
            The alphabet type of sequences to be assembled
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.#ctor">
            <summary>
            Initializes a new instance of the OverlapDeNovoAssembler class.
            Sets default threshold values, pairwise aligner, consensusResolver.
            Users will typically reset these using parameters 
            specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.Assemble(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Assemble the input sequences into the largest possible contigs. 
            </summary>
            <remarks>
            The algorithm is:
            1.  initialize list of contigs to empty list. List of seqs is passed as argument.
            2.  compute pairwise overlap scores for each pair of input seqs (with reversal and
                complementation as appropriate).
            3.  choose best overlap score. the “merge items” (can be seqs or contigs) are the 
                items with that score. If best score is less than threshold, assembly is finished.
            4.  merge the merge items into a single contig and remove them from their list(s)
            5.  compute the overlap between new item and all existing items
            6.  go to step 3
            </remarks>
            <param name="inputSequences">The sequences to assemble.</param>
            <returns>Returns the OverlapDeNovoAssembly instance which contains list of 
            contigs and list of unmerged sequences which are result of this assembly.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MakeConsensus(MBF.IAlphabet,MBF.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            Public method to allow testing of consensus generation part.
            Used by test automation.
            </summary>
            <param name="alphabet">Sequence alphabet</param>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.SequenceWithoutTerminalGaps(MBF.ISequence)">
            <summary>
            Removes gaps that are inserted by overlap algorithm at beginning or end of sequence.
            </summary>
            <param name="inputSequence">input sequence</param>
            <returns>Sequence without gaps</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MergeLowerIndexedContig(MBF.Algorithms.Assembly.Contig,MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,MBF.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge lower-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score along with offsets information</param>
            <param name="consumedContig">Contig to be merged</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MergeLowerIndexedSequence(MBF.Algorithms.Assembly.Contig,MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,MBF.ISequence)">
            <summary>
            Method to merge lower-indexed item with new constructed contig
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MergeHigherIndexedContig(MBF.Algorithms.Assembly.Contig,MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,MBF.Algorithms.Assembly.Contig)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed contig with new contig. For each sequence in consumed contig, 
            compute sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedContig">Consumed Contig to be merged</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MergeHigherIndexedSequence(MBF.Algorithms.Assembly.Contig,MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,MBF.ISequence)">
            <summary>
            Method to merge higher-indexed item with new constructed contig.
            Merges consumed sequence with new contig. For the consumed sequence,
            compute new sequence and offset to be added to new contig.
            </summary>
            <param name="newContig">New contig for merging</param>
            <param name="globalBest">Best Score, consensus, their offsets</param>
            <param name="consumedSequence">Consumed Sequence to be merged</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.Dump(System.Collections.Generic.IList{MBF.Algorithms.Alignment.ISequenceAlignment})">
            <summary>
            Write sequence alignment to application log
            </summary>
            <param name="alignment">sequence alignment</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.Dump(MBF.Algorithms.Assembly.Contig)">
            <summary>
            Write contig to application log
            </summary>
            <param name="contig">contig to be dumped</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.AlignSequence(MBF.ISequence,MBF.ISequence,System.Int32,System.Int32)">
            <summary>
            Aligns the two input sequences, their reverseComplement, complement and reverse
            Keeps track of best score for these combinations.
            </summary>
            <param name="lowerIndexedSequence">Lower-indexed sequence to be aligned</param>
            <param name="higherIndexedSequence">Higher-indexed sequence to be aligned</param>
            <param name="lowerIndex">Index of first sequence in pool</param>
            <param name="higherIndex">Index of second sequence in pool</param>
            <returns>ItemScore containing score, consensus, offset of best alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.AlignAndUpdateBestScore(MBF.ISequence,MBF.ISequence,System.Boolean,System.Boolean,MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore,System.Int32,System.Int32,System.String)">
            <summary>
            Alignes the two input sequence
            Updates best score, if necessary
            </summary>
            <param name="sequence1">First Sequence to be aligned</param>
            <param name="sequence2">Second Sequence to be aligned</param>
            <param name="reversed">Is first sequence reversed?</param>
            <param name="complement">Is first sequence complemented?</param>
            <param name="bestScore">Structure to track best score</param>
            <param name="sequence1PoolIndex">Index of first sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="sequence2PoolIndex">Index of second sequence in pool.
            Used in printing for debug purpose.</param>
            <param name="message">Message to be printed for debug purpose</param>
            <returns>Updated best score</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.RunAlignSimple(MBF.ISequence,MBF.ISequence)">
            <summary>
            Execute Simple Align and return Sequence alignment
            </summary>
            <param name="sequence1">First sequence item</param>
            <param name="sequence2">Second sequence item</param>
            <returns>List of Sequence alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MakeConsensus(MBF.Algorithms.Assembly.Contig)">
            <summary>
            Analyze the passed contig and store a consensus into its Consensus property.
            </summary>
            <param name="contig">Contig for which consensus is to be constructed</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.MergeThreshold">
            <summary>
            Gets or sets Threshold determines how much overlap is needed 
            for two sequences to be merged. The score from the overlap algorithm 
            must at least equal Threshold for a merge to occur.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.AssumeStandardOrientation">
            <summary>
            Gets or sets a value indicating whether standard orientation is assumed.
            if true, assume that the input sequences are in 5'-to-3' orientation.
            This means that only normal and reverse-complement overlaps need to be tested.
            if false, need to try both orientations for overlaps.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.OverlapAlgorithm">
            <summary>
            Gets or sets the pairwise sequence aligner that will be used to compute overlap during assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ConsensusResolver">
            <summary>
            Gets or sets the method that will be used to compute a contig's consensus during assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.Name">
            <summary>
            Gets the name of the current assembly algorithm used.
            This property returns the Name of our assembly algorithm i.e 
            Simple-sequence algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.Description">
            <summary>
            Gets the description of the current assembly algorithm used.
            This property returns a simple description of what 
             SimpleSequenceAssembler class implements.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore">
            <summary>
            An ItemScore is the overlap score between the current item (owner of this struct)
            and a lower-indexed item. The lower-indexed item may have been reversed or 
            complemented (or both) to get that score. We always perform reverse and/or
            complement on the lower-indexed item (at no loss of generality).
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.OtherItem">
            <summary>
            the pool index of the lower-indexed item 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.OverlapScore">
            <summary>
            the overlap score 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.Reversed">
            <summary>
            true if the lower-indexed item was reversed 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.Complemented">
            <summary>
            true if the lower-indexed item was complemented 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.FirstOffset">
            <summary>
            the offset to apply to the first sequence (from the
            right if reversed, from the left if not reversed) 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.SecondOffset">
            <summary>
            the offset to apply to the second sequence (always from 
            the left, since it's never reversed)
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.#ctor(System.Int32,System.Double,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ItemScore struct
            constructor that sets all properties 
            </summary>
            <param name="otherItem">Pool index of the lower-indexed item</param>
            <param name="overlapScore">Overlap score</param>
            <param name="reversed">Was lower-indexed item reversed</param>
            <param name="complemented">Was lower-indexed item complemented</param>
            <param name="firstOffset">First sequence offset</param>
            <param name="secondOffset">Second sequence offset</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore.#ctor(MBF.Algorithms.Assembly.OverlapDeNovoAssembler.ItemScore)">
            <summary>
            Initializes a new instance of the ItemScore struct
            copy constructor
            </summary>
            <param name="other">instance from which item score need to be copied</param>
        </member>
        <member name="T:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem">
            <summary>
            A PoolItem is one item in the merge pool (either a sequence or a contig)
            along with its overlap scores with lower-numbered items.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem._isContig">
            <summary>
            Flag that distinguished whether _item is a contig or sequence. 
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(MBF.Algorithms.Assembly.Contig)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for contig.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(MBF.ISequence)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor for sequence.
            </summary>
            <param name="item">Pool object</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the PoolItem class.
            constructor that sets item and type.
            </summary>
            <param name="item">Pool object</param>
            <param name="isContig">Is it contig</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.FreeSequences">
            <summary>
            Free the item reference when no longer needed.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.IsContig">
            <summary>
            Gets a value indicating whether item is a contig. 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Contig">
            <summary>
            Gets stored Contig, assuming there is one.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Sequence">
            <summary>
            Gets stored sequence, assuming there is one.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.SequenceOrConsensus">
            <summary>
            Gets the sequence that will be aligned with other pool items. For
            a contig, this is the consensus; for a sequence, it's just the sequence. 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Item">
            <summary>
            Gets or sets the item.
            Item can either be an ISequence, or a Contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.Scores">
            <summary>
            Gets or sets list of overlap scores.
            List stores the overlap scores with all pool items 
            that have a lower index than this.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembler.PoolItem.ConsumedBy">
            <summary>
            Gets or sets the index of the pool item that replaced it.
            If a pool item has been merged, consumedBy will be
            the index of the pool item that replaced it.
            A negative value means the  item is still unmerged.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.DeltaAlignment">
            <summary>
            Represents a alignment object in terms of delta.
            Delta is an encoded representation of alignments between input sequences.
            It contains the start and end indices of alignment in reference and
            query sequence followed by error values and list of integer in 
            following lines. Each integer represent an insertion (+ve) in reference
            sequence and deletion (-ve) in reference sequence.
            This class represents such alignment with required properties and
            utility methods.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DeltaAlignment._deltas">
            <summary>
            List of integers that pointing the insertion and deletion indices
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DeltaAlignment._referenceSequence">
            <summary>
            Reference sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.DeltaAlignment._querySequence">
            <summary>
            Query sequence
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DeltaAlignment.#ctor(MBF.ISequence,MBF.ISequence)">
            <summary>
            Initializes a new instance of the DeltaAlignment class
            </summary>
            <param name="referenceSequence">Reference Sequence</param>
            <param name="querySequence">Query Sequence</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DeltaAlignment.NewAlignment(MBF.ISequence,MBF.ISequence,MBF.Algorithms.Alignment.Cluster,MBF.Algorithms.Alignment.MaxUniqueMatchExtension)">
            <summary>
            Create a new delta alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="cluster">Cluster object</param>
            <param name="match">Match object</param>
            <returns>Newly created DeltaAlignment object</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.DeltaAlignment.ConvertDeltaToSequences">
            <summary>
            Convert the delta alignment object to its sequence representation
            </summary>
            <returns>Reference sequence alignment at 0th index and
            Query sequence alignment at 1st index</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.QueryDirection">
            <summary>
            Gets or sets the query sequence direction
                FORWARD_CHAR or REVERSE_CHAR
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.FirstSequenceStart">
            <summary>
            Gets or sets the start index of first sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.FirstSequenceEnd">
            <summary>
            Gets or sets the end index of first sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.SecondSequenceStart">
            <summary>
            Gets or sets the start index of second sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.SecondSequenceEnd">
            <summary>
            Gets or sets the end index of second sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.Errors">
            <summary>
            Gets or sets errors
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.SimilarityErrors">
            <summary>
            Gets or sets similarity errors
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.NonAlphas">
            <summary>
            Gets or sets number of non alphabets encountered during alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.DeltaReferencePosition">
            <summary>
            Gets or sets the value of delta reference position
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.Deltas">
            <summary>
            Gets list of integers that pointing the insertion and 
            deletion indices
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.ReferenceSequence">
            <summary>
            Gets reference sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.DeltaAlignment.QuerySequence">
            <summary>
            Gets query sequence
            </summary>
        </member>
        <member name="T:MBF.PatternConverter">
            <summary>
            Implements the IPatternConverter.
            Converts the prosite pattern into protein/dna/rna sequence, applying the ruleset from 
            http://www.hpa-bioinfotools.org.uk/ps_scan/PS_SCAN_PATTERN_SYNTAX.html and
            http://www.ncbi.nlm.nih.gov/blast/html/PHIsyntax.html
            </summary>
        </member>
        <member name="T:MBF.IPatternConverter">
            <summary>
            Interface that defines a converter for the given list of patterns into locally 
            understood patterns. i.e., converting a prosite pattern to simple 
            Protein/Dna/Rna sequence/string.
            </summary>
        </member>
        <member name="M:MBF.IPatternConverter.Convert(System.Collections.Generic.IList{System.String})">
            <summary>
            Convert the given list of patterns into locally understood patterns.
            To simple Protein/Dna/Rna
            </summary>
            <param name="patterns">List of patterns to be converted.</param>
            <returns>Converted list of patterns.</returns>
        </member>
        <member name="M:MBF.IPatternConverter.Convert(System.String)">
            <summary>
            Convert the given pattern into locally understood patterns.
            To simple Protein/Dna/Rna
            </summary>
            <param name="pattern">Pattern to be converted.</param>
            <returns>Converted list of patterns.</returns>
        </member>
        <member name="F:MBF.PatternConverter.Seperator">
            <summary>
            Seperator character.
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.RangeSeperator">
            <summary>
            Seperator character.
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.LeftSquareBracket">
            <summary>
            Left square bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.RightSquareBracket">
            <summary>
            Right square bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.LeftCurlyBracket">
            <summary>
            Left curly bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.RightCurlyBracket">
            <summary>
            Right curly bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.LeftParenthesis">
            <summary>
            Left parenthesis
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.RightParenthesis">
            <summary>
            Right parenthesis
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.LeftAngle">
            <summary>
            Left angle bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.RightAngle">
            <summary>
            Right angle bracket
            </summary>
        </member>
        <member name="F:MBF.PatternConverter.Repeater">
            <summary>
            Repeater character
            </summary>
        </member>
        <member name="F:MBF.PatternConverter._patternConverter">
            <summary>
            Multiton instance of PatternConverter
            </summary>
        </member>
        <member name="F:MBF.PatternConverter._alphabets">
            <summary>
            List of unique and ambiguous Alphabets
            </summary>
        </member>
        <member name="F:MBF.PatternConverter._alphabetSet">
            <summary>
            Alphabet set supported by this pattern converter
            </summary>
        </member>
        <member name="M:MBF.PatternConverter.#ctor(MBF.IAlphabet)">
            <summary>
            Multiton class.
            </summary>
        </member>
        <member name="M:MBF.PatternConverter.GetInstanace(MBF.IAlphabet)">
            <summary>
            Returns an instance of PatternConverter
            </summary>
        </member>
        <member name="M:MBF.PatternConverter.Convert(System.Collections.Generic.IList{System.String})">
            <summary>
            Convert the given list of patterns into locally understood patterns.
            </summary>
            <param name="patterns">List of patterns to be converted.</param>
            <returns>Converted list of patterns.</returns>
        </member>
        <member name="M:MBF.PatternConverter.Convert(System.String)">
            <summary>
            Convert the given pattern into locally understood patterns.
            </summary>
            <param name="pattern">Pattern to be converted.</param>
            <returns>Converted list of patterns.</returns>
        </member>
        <member name="M:MBF.PatternConverter.MapSymbol(System.Char)">
            <summary>
            Create a dictionary which has the mapping for ambiguous/unambiguous characters
            </summary>
            <summary>
            Find the list of characters that maps to the inputs symbol and applies the pattern rule.
            </summary>
            <param name="symbol">Character which has to be mapped.</param>
        </member>
        <member name="M:MBF.PatternConverter.ResolveSquareBracket(System.String,System.Int32,System.Collections.Generic.IList{System.Text.StringBuilder},System.Boolean@,System.Boolean@)">
            <summary>
            Resolve the pattern for Square bracket
            </summary>
            <param name="pattern">Pattern string.</param>
            <param name="index">Current index in pattern.</param>
            <param name="patterns">List of result patterns.</param>
            <param name="isLeftAngleSet">Is left angle bracket set.</param>
            <param name="isRightAngleSet">Is right angle bracket set.</param>
            <returns>Current index in pattern</returns>
        </member>
        <member name="M:MBF.PatternConverter.ResolveCurlyBracket(System.String,System.Int32,System.Collections.Generic.IList{System.Text.StringBuilder})">
            <summary>
            Resolve the pattern for Curly bracket
            </summary>
            <param name="pattern">Pattern string.</param>
            <param name="index">Current index in pattern.</param>
            <param name="patterns">List of result patterns.</param>
            <returns>Current index in pattern.</returns>
        </member>
        <member name="M:MBF.PatternConverter.ResolveParenthesis(System.String,System.Int32,System.Collections.Generic.IList{System.Text.StringBuilder})">
            <summary>
            Resolve the pattern for Parenthesis
            </summary>
            <param name="pattern">Pattern string.</param>
            <param name="index">Current index in pattern.</param>
            <param name="patterns">List of result patterns.</param>
            <returns>Current index in pattern.</returns>
        </member>
        <member name="M:MBF.PatternConverter.ResolveSymbol(System.String,System.Int32,System.Collections.Generic.IList{System.Text.StringBuilder})">
            <summary>
            Resolve the symbol and extend the result patterns list
            </summary>
            <param name="pattern">Pattern string.</param>
            <param name="index">Current index in pattern.</param>
            <param name="patterns">List of result patterns.</param>
        </member>
        <member name="M:MBF.PatternConverter.ExtendPattern(System.Collections.Generic.IList{System.Text.StringBuilder},System.Char[])">
            <summary>
            Extend the list of pattern.
            Resolve the symbol and extend the pattern.
            </summary>
            <param name="patterns">Current list of pattern.</param>
            <param name="symbolMap">List of characters to be appended.</param>
        </member>
        <member name="M:MBF.PatternConverter.ExtendPattern(System.Collections.Generic.IList{System.Text.StringBuilder},System.Char,System.Int32,System.Int32)">
            <summary>
            Extend the list of pattern.
            Resolve the symbol and extend the pattern.
            </summary>
            <param name="patterns">Current list of pattern.</param>
            <param name="character">Character to be appended.</param>
            <param name="startCount">Lower limit of repeat count.</param>
            <param name="endCount">Upper limit of repeat count.</param>
        </member>
        <member name="T:MBF.Matrix.SelectRowsAndColsView`3">
            <summary>
            A wrapper around a parent matrix that can select a subset of rows and cols. It can also change the order
            of the row keys and col keys.
            Because it is a view, any changes made to the values of this matrix or the parent matrix are reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="F:MBF.Matrix.SelectRowsAndColsView`3.IndexOfParentRowKey">
            <summary>
            A read-only list that maps a row index for this matrix into a row index of the parent matrix
            </summary>
        </member>
        <member name="F:MBF.Matrix.SelectRowsAndColsView`3.IndexOfParentColKey">
            <summary>
            A read-only list that maps a col index for this matrix into a col index of the parent matrix
            </summary>
        </member>
        <member name="P:MBF.Matrix.SelectRowsAndColsView`3.ParentMatrix">
            <summary>
            The matrix that this view wraps.
            </summary>
        </member>
        <member name="T:MBF.Matrix.TryParseMatrixDelegate`3">
            <summary>
            The type of functions that can create new Matrix objects from a file.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="filename">The name of the file containing the matrix information.</param>
            <param name="missingValue">The special value that represents missing in the created matrix.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The matrix created.</param>
            <returns>true if the function was able to create a matrix from the information in the file; otherwise, false</returns>
        </member>
        <member name="T:MBF.Matrix.MatrixFactory`3">
            <summary>
            A class for creating a factory for parsing matrix files.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.MatrixFactory`3.GetInstance">
            <summary>
            Initializes a new instance of a Matrix parse factory.
            </summary>
            <returns>A MatrixFactory that can be used to create a Matrix instance from a file.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixFactory`3.RegisterMatrixParser(MBF.Matrix.TryParseMatrixDelegate{`0,`1,`2})">
            <summary>
            Adds the specificed parsing function to the MatrixFactory
            </summary>
            <param name="tryParseMatrixDelegate">The function to add.</param>
        </member>
        <member name="M:MBF.Matrix.MatrixFactory`3.Parse(System.String,`2,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Create a Matrix by parsing the file. The MatrixFactory may try many different parsers to get a result.
            </summary>
            <param name="filename">The name of the file containing the matrix information.</param>
            <param name="missingValue">The special value that represents missing in the created matrix.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>the Matrix created</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixFactory`3.TryParse(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@)">
            <summary>
            Create a Matrix by parsing the file. The MatrixFactory may try many different parsers to get a result.
            </summary>
            <param name="filename">The name of the file containing the matrix information.</param>
            <param name="missingValue">The special value that represents missing in the created matrix.</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="result">The matrix created.</param>
            <returns>true, if some parse succeeds; otherwise, false</returns>
        </member>
        <member name="P:MBF.Matrix.MatrixFactory`3.ErrorMessages">
            <summary>
            The last error messges
            </summary>
        </member>
        <member name="T:MBF.Matrix.DenseMatrix`3">
            <summary>
            A Matrix that stores the values internally in a .NET 2-D array.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.#ctor(`2[0:,0:]@,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Initializes a new instance of the DenseMatrix class that wraps a .NET 2-D array
            </summary>
            <param name="valueArray">The 2-D .NET array to wrap.</param>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special value that represents missing.</param>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.#ctor(`2[0:,0:],System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Initializes a new instance of the DenseMatrix class that wraps a .NET 2-D array
            </summary>
            <param name="valueArray">The 2-D .NET array to wrap.</param>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special value that represents missing.</param>
        </member>
        <member name="F:MBF.Matrix.DenseMatrix`3.ValueArray">
            <summary>
            The 2-D .NET array used to store values.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.TryParseRFileWithDefaultMissing(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@)">
            <summary>
            Create a DenseMatrix from a file in RFile format.
            </summary>
            <param name="rFileName">a file in RFile format</param>
            <param name="missingValue">The special value that represents 'missing'</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The DenseMatrix created</param>
            <returns>True if the file is parsable; otherwise false</returns>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.TryParseTabbedRFileWithDefaultMissing(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@)">
            <summary>
            Create a DenseMatrix from a file in RFile format.
            </summary>
            <param name="rFileName">a file in RFile format with tab delimited columns</param>
            <param name="missingValue">The special value that represents 'missing'</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The DenseMatrix created</param>
            <returns>True if the file is parsable; otherwise false</returns>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.TryParseRFileWithDefaultMissing(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@,System.String@)">
            <summary>
            Create a DenseMatrix from a file in RFile format.
            </summary>
            <param name="rFileName">a file in RFile format with space or tab delimited columns</param>
            <param name="missingValue">The special value that represents 'missing'</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The DenseMatrix created</param>
            <param name="errorMsg">If the file is not parsable, an error message about the problem.</param>
            <returns>True if the file is parsable; otherwise false</returns>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.TryParseTabbedRFileWithDefaultMissing(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@,System.String@)">
            <summary>
            Create a DenseMatrix from a file in RFile format.
            </summary>
            <param name="rFileName">a file in RFile format with tab delimited columns</param>
            <param name="missingValue">The special value that represents 'missing'</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="result">The DenseMatrix created</param>
            <param name="errorMsg">If the file is not parsable, an error message about the problem.</param>
            <returns>True if the file is parsable; otherwise false</returns>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.TryParseRFileWithDefaultMissing(System.String,`2,System.Char[],System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@,System.String@)">
            <summary>
            Create a DenseMatrix from a file in RFile format.
            </summary>
            <param name="rFileName">a file in RFile format with delimited columns</param>
            <param name="missingValue">The special value that represents 'missing'</param>
            <param name="separatorArray">An array of character delimiters</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="result">The DenseMatrix created</param>
            <param name="errorMsg">If the file is not parsable, an error message about the problem.</param>
            <returns>True if the file is parsable; otherwise false</returns>
        </member>
        <member name="M:MBF.Matrix.DenseMatrix`3.CreateDefaultInstance(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Initalizes a new instance of the DenseMatrix class filled with the default value of TValue. For example, if TValue is double,
            the matrix will be filled with 0.0's.
            </summary>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special Missing value.</param>
            <returns>A new instance of DenseMatrix</returns>
        </member>
        <member name="T:MBF.Matrix.DenseAnsi">
            <summary>
            A Matrix that presents values externally as a (16-bit) char and internally as a (8-bit) byte.
            For this class, the special Missing value must be '?'.
            </summary>
        </member>
        <member name="F:MBF.Matrix.DenseAnsi.StaticMissingValue">
            <summary>
            Always '?'
            </summary>
        </member>
        <member name="F:MBF.Matrix.DenseAnsi.StaticStoreMissingValue">
            <summary>
            Always (byte)'?'
            </summary>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.CreateEmptyInstance(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Creates an DenseAnsi with values missing.
            </summary>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special Missing value, which must be '?'</param>
            <returns>A new, empty, DenseAnsi</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.TryGetInstanceFromSparse(System.String,MBF.Matrix.Matrix{System.String,System.String,System.Char}@)">
            <summary>
            Creates a Matrix, internally in DenseAnsi format, from file(s) in sparse format.
            </summary>
            <param name="inputSparsePattern">The name of a file (or a pattern matching several files). The file(s) are in sparse format.</param>
            <param name="matrix">The new matrix, or null if the method fails.</param>
            <returns>true if the file(s) is read and the Matrix is created; otherwise, false </returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.TryGetInstanceFromSparse(System.String,MBF.Matrix.DenseAnsi@)">
            <summary>
            Creates a DenseAnsi from file(s) in sparse format.
            </summary>
            <param name="inputSparsePattern">The name of a file (or a pattern matching several files). The file(s) are in sparse format.</param>
            <param name="denseAnsi">The new DenseAnsi (or null, if the method fails).</param>
            <returns>true if the file(s) is read and the DenseAnsi is created; otherwise, false </returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.TryParseDenseAnsiFormatAsDoubleMatrix(System.String,System.Double,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{System.String,System.String,System.Double}@)">
            <summary>
            Parse a file in DenseAnsi format such that the values are returned as doubles.
            </summary>
            <param name="filename">The file to parse</param>
            <param name="missingValue">The special value that represents missing</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The matrix created from parsing the file</param>
            <returns>True if the file can be parsed; false, otherwise.</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.TryParseDenseAnsiFormatAsGenericMatrix``1(System.String,``0,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{System.String,System.String,``0}@)">
            <summary>
            Tries to read a file in DenseAnsi format and then creates a DenseAnsi class with values of the desired type.
            </summary>
            <typeparam name="TValue">The type of values wanted, for example, double</typeparam>
            <param name="filename">The dense ansi formatted file to read from.</param>
            <param name="missingValue">The special value that represents missing</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">A matrix that internally stores values in a DenseAnsi object.</param>
            <returns>true, if the file can be parsed; false, otherwise.</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.GetInstanceFromSparse(System.String)">
            <summary>
            Creates a DenseAnsi from file(s) in sparse format. Throws an exception if the class cannot be created.
            </summary>
            <param name="inputSparsePattern">The name of a file (or a pattern matching several files). The file(s) are in sparse format.</param>
            <returns>The new DenseAnsi.</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.TryGetInstance(System.String,System.Char,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{System.String,System.String,System.Char}@)">
            <summary>
            This awkward method is provided for the sake of MatrixFactory. Right now it simply catches exceptions. Should switch and make it fail silently when doesn't work.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DenseAnsi.GetInstance(System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Creates a DenseAnsi object from a file in dense ansi format.
            </summary>
            <param name="denseAnsiFileName">a file in dense ansi format</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>the DenseAnsi object</returns>
        </member>
        <member name="P:MBF.Matrix.DenseAnsi.MissingValue">
            <summary>
            Always '?'
            </summary>
        </member>
        <member name="T:MBF.Matrix.DenseAnsiExtensions">
            <summary>
            Extension methods on Matrix related to DenseAnsi.
            </summary>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.AsDenseAnsi(MBF.Matrix.Matrix{System.String,System.String,System.Char},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DenseAnsi. If matrix is already a DenseAnsi, then returns the given matrix without copying. 
            </summary>
            <param name="inputMatrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A denseAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.ToDenseAnsi(MBF.Matrix.Matrix{System.String,System.String,System.Char},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DenseAnsi. Even if the matrix is already an denseAnsi, a new one is created.. 
            </summary>
            <param name="matrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A denseAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.AsDenseAnsi``1(MBF.Matrix.Matrix{System.String,System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DenseAnsi. If matrix is already a dense collection, then returns the given matrix without copying. 
            </summary>
            <param name="inputMatrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A denseAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.ToDenseAnsi``1(MBF.Matrix.Matrix{System.String,System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a DenseAnsi. Even if the matrix is already an denseAnsi, a new one is created.. 
            </summary>
            <param name="matrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A denseAnsi version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.WriteDenseAnsi``1(MBF.Matrix.Matrix{System.String,System.String,``0},System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Writes a matrix in DenseAnsi format to a file. Converts the values of the matrix to char (on the fly). Does not need to convert to DenseAnsi format.
            </summary>
            <typeparam name="T">The type of the values of the matrix, for example, double</typeparam>
            <param name="matrix">The matrix to write</param>
            <param name="filename">The file to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.WriteDenseAnsi``1(MBF.Matrix.Matrix{System.String,System.String,``0},System.IO.TextWriter,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Writes a matrix in DenseAnsi format to a textWriter. Converts the values of the matrix to char (on the fly). Does not need to convert to DenseAnsi format.
            </summary>
            <typeparam name="T">The type of the values of the matrix, for example, double</typeparam>
            <param name="matrix">The matrix to write</param>
            <param name="textWriter">The stream to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="M:MBF.Matrix.DenseAnsiExtensions.WriteDenseAnsi(MBF.Matrix.Matrix{System.String,System.String,System.Char},System.IO.TextWriter,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Writes a matrix with char values in DenseAnsi format to a textWriter. Does not need to convert to DenseAnsi format.
            </summary>
            <param name="matrix">The matrix to write</param>
            <param name="textWriter">The stream to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="T:MBF.Matrix.AbstractMatrixView`3">
            <summary>
            An abstract wrapper used to store common code by several of the other matrix views.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmersOfSequence">
            <summary>
            Contains base sequence, and information regarding associated k-mers
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmersOfSequence._baseSequence">
            <summary>
            Holds an instance of sequence used for building k-mer
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmersOfSequence._length">
            <summary>
            Length of k-mer
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmersOfSequence._kmers">
            <summary>
            Positions and count of k-mers occurring in base sequence
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmersOfSequence.#ctor(MBF.ISequence,System.Int32,System.Collections.Generic.HashSet{MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions})">
            <summary>
            Initializes a new instance of the KmersOfSequence class.
            Takes k-mer sequence and occurring position.
            </summary>
            <param name="sequence">Source sequence</param>
            <param name="kmerLength">Length of k-mer</param>
            <param name="kmers">Set of associated k-mers</param>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmersOfSequence.#ctor(MBF.ISequence,System.Int32)">
            <summary>
            Initializes a new instance of the KmersOfSequence class.
            Takes k-mer sequence and k-mer length.
            </summary>
            <param name="sequence">Source sequence</param>
            <param name="kmerLength">Length of k-mer</param>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmersOfSequence.KmersToSequences">
            <summary>
            Returns the associated k-mers as a list of k-mer sequences
            </summary>
            <returns>List of k-mer sequences</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmersOfSequence.KmerToSequence(MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions)">
            <summary>
            Builds the sequence corresponding to input kmer, 
            using base sequence
            </summary>
            <param name="kmer">Input k-mer</param>
            <returns>Sequence corresponding to input k-mer</returns>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmersOfSequence.Length">
            <summary>
            Gets the length of associated k-mers
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmersOfSequence.Kmers">
            <summary>
            Gets the set of associated Kmers
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmersOfSequence.BaseSequence">
            <summary>
            Gets the base sequence
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions">
            <summary>
            Contains information regarding k-mer
            position in the base sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions._kmerPositions">
            <summary>
            List of positions
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Initializes a new instance of the KmerPositions class.
            </summary>
            <param name="positions">List of positions</param>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions.Positions">
            <summary>
            Gets the list of positions for the k-mer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmersOfSequence.KmerPositions.Count">
            <summary>
            Gets the number of positions
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.PairedRead">
            <summary>
            Class to hold Paired reads.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedRead._alignedSequences">
            <summary>
            holds reads.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,System.String)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryName">library name.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,System.String,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryName">library name.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            </param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,MBF.CloneLibraryInformation)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryInfo">Library information.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,MBF.CloneLibraryInformation,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="libraryInfo">Library information.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            </param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,System.Single,System.Single)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.PairedRead,System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="pairedRead">Paired read.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
            <param name="useInsertLengthOfReads">
            If this flag is set to true then insert length will be calculated from read1 and read2,
            else InsertLength in spcified paired read will be used.
            By default this will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.SAMAlignedSequence,MBF.IO.SAM.SAMAlignedSequence,System.String)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="libraryName">library name.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.SAMAlignedSequence,MBF.IO.SAM.SAMAlignedSequence,MBF.CloneLibraryInformation)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="libraryInfo">Library information.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetPairedReadType(MBF.IO.SAM.SAMAlignedSequence,MBF.IO.SAM.SAMAlignedSequence,System.Single,System.Single)">
            <summary>
            Gets the paired reads type.
            </summary>
            <param name="read1">First aligned sequence.</param>
            <param name="read2">Second aligned sequence.</param>
            <param name="meanLengthOfInsert">Mean of the insertion length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insertion length.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetInsertLength(MBF.IO.SAM.SAMAlignedSequence,MBF.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets the insert length of reads.
            </summary>
            <param name="read1">First read.</param>
            <param name="read2">Second read.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.GetInsertLength(MBF.IO.SAM.SAMAlignedSequence,MBF.IO.SAM.SAMAlignedSequence,System.Boolean)">
            <summary>
            Gets the insert length of reads.
            </summary>
            <param name="read1">First read.</param>
            <param name="read2">Second read.</param>
            <param name="validate">Validates the reads before calculating the insert length.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.IsForwardRead(MBF.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets a boolean value which indicates that whether the specified read is forward oriented or not.
            </summary>
            <param name="read">Aligned Sequence.</param>
        </member>
        <member name="M:MBF.IO.SAM.PairedRead.IsReverseRead(MBF.IO.SAM.SAMAlignedSequence)">
            <summary>
            Gets a boolean value which indicates that whether the specified read is reverse oriented or not.
            </summary>
            <param name="read">Aligned Sequence.</param>
        </member>
        <member name="P:MBF.IO.SAM.PairedRead.Reads">
            <summary>
            Gets the list of paired reads.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.PairedRead.Read1">
            <summary>
            First aligned sequence or read.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.PairedRead.Read2">
            <summary>
            Second aligned sequence or read.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.PairedRead.PairedType">
            <summary>
            Paired type <see cref="T:MBF.IO.SAM.PairedReadType"/>
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.PairedRead.InsertLength">
            <summary>
            Gets or sets the insert length.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.PairedReadType">
            <summary>
            Specifies the type of paired read.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.Normal">
            <summary>
            Normal - Reads are aligning to same reference sequence 
                    and insertion length is with in the limit. 
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.Orphan">
            <summary>
            Orphan - One read is not aligned to any reference sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.Chimera">
            <summary>
            Chimera - Reads are not aligning to same reference sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.StructuralAnomaly">
            <summary>
            StructuralAnomaly - Reads are not in proper orientation.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.LengthAnomaly">
            <summary>
            LengthAnomaly - Insertion length is either too short or too long.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.PairedReadType.MultipleHits">
            <summary>
            MultipleHits - A mapped read pair is stored in more than two aligned sequences.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Graph.DeBruijnGraph">
            <summary>
            Representation of a De Bruijn Graph.
            Graph is encoded as a collection of de Bruijn nodes.
            The nodes themselves hold the adjacency information.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.ContigStartNodeIndicator">
            <summary>
            Constant used to mark node as contig start node
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.ContigEndNodeIndicator">
            <summary>
            Constant used to mark node as contig end node
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.DnaSymbols">
            <summary>
            Array of DNA Symbols
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.DnaSymbolsComplement">
            <summary>
            Array containing the complement of DNA symbols 
            (in same order as DnaSymbols)
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph._baseSequence">
            <summary>
            Base sequence that holds the list of input sequences.
            Nodes reference into base sequence for k-mers.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnGraph._kmerNodes">
            <summary>
            List of graph nodes
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.ValidateGraph(MBF.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Validate input graph.
            Throws exception if graph is null
            </summary>
            <param name="graph">Input graph</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.GetNodeSequence(MBF.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Gets the sequence for kmer associated with input node.
            Uses index and position information along with base sequence 
            to construct sequence. 
            There should be atleast one valid position in the node.
            Since all positions indicate the same kmer sequence, 
            the position information from the first kmer is used
            to construct the sequence
            </summary>
            <param name="node">Graph Node</param>
            <returns>Sequence associated with input node</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.Build(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Build graph nodes and edges from list of k-mers.
            Creates a node for every unique k-mer (and reverse-complement) 
            in the read. Then, generates adjacency information between nodes 
            by computing pairs of nodes that have overlapping regions 
            between node sequences.
            </summary>
            <param name="sequences">List of input sequences</param>
            <param name="kmerLength">Kmer Length</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.BuildContigGraph(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Builds a contig graph from kmer graph using contig data information.
            Creates a graph node for each contig, computes adjacency 
            for contig graph using edge information in kmer graph.
            Finally, all kmer nodes are deleted from the graph.
            </summary>
            <param name="contigs">List of contig data</param>
            <param name="kmerLength">Kmer length</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.RemoveNodes(System.Collections.Generic.IEnumerable{MBF.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Remove all nodes in input list from graph
            </summary>
            <param name="nodes">Nodes to be removed</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.GenerateContigAdjacency(System.Collections.Generic.IList{MBF.ISequence},System.Int32,MBF.Algorithms.Assembly.Graph.DeBruijnNode[])">
            <summary>
            Generate adjacency information between contig nodes
            by computing overlapping regions between contig sequences.
            </summary>
            <param name="contigs">List of contig data</param>
            <param name="kmerLength">Kmer length</param>
            <param name="contigNodes">Array of contig nodes</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.AddContigGraphEdges(MBF.Algorithms.Assembly.Graph.DeBruijnNode[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Int32)">
            <summary>
            Checks for and adds edges between contigs 
            based on left, right kmer maps.
            </summary>
            <param name="contigNodes">Array of contig nodes</param>
            <param name="leftKmerMap">Map of left k-mer to contig nodes</param>
            <param name="rightKmerMap">Map of right k-mer to contig nodes</param>
            <param name="kmerLength">Kmer Length</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.GenerateAdjacency(System.Collections.Generic.Dictionary{System.String,MBF.Algorithms.Kmer.KmerDataGraphNodePair},System.Int32)">
            <summary>
            Generate adjacency information between nodes
            by computing overlapping regions between sequences.
            </summary>
            <param name="kmerNodeMap">Graph Nodes mapped by sequence string</param>
            <param name="kmerLength">Kmer Length</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.Dispose">
            <summary>
            Implements dispose to supress GC finalize
            This is done as one of the methods uses ReadWriterLockSlim
            which extends IDisposable.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnGraph.Nodes">
            <summary>
            Gets the list of nodes in graph.
            </summary>
        </member>
        <member name="T:MBF.IO.FileVirtualQualitativeSequenceProvider">
            <summary>
            This class holds the virtual data (specific to QualitativeSequence) and parser info for each QualitativeSequence
            This class is used by the Data Virtualization on Large data where it reads block by block.
            </summary>
        </member>
        <member name="T:MBF.IVirtualQualitativeSequenceProvider">
            <summary>
            Interface to virtual sequence data.
            Classes which implement this interface should hold virtual data of sequence.
            </summary>
        </member>
        <member name="T:MBF.IVirtualSequenceProvider">
            <summary>
            Interface to virtual sequence data.
            Classes which implement this interface should hold virtual data of sequence.
            </summary>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.InsertRange(System.Int32,System.String)">
            <summary>
            Inserts a string of symbols into the sequence at the specified position.
            </summary>
            <param name="position">The zero-based index at which the new symbols should be inserted.</param>
            <param name="sequence">The string of symbols which should be inserted into the sequence.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of symbols from the sequence.
            </summary>
            <param name="position">The zero-based starting index of the range of symbols to remove.</param>
            <param name="length">The number of symbols to remove.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.IndexOf(System.Char)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Insert(System.Int32,System.Char)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the symbol should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.GetItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.SetItem(System.Int32,System.Char)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Add(System.Char)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Contains(System.Char)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The symbol to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.CopyTo(System.Char[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Remove(System.Char)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.IndexOf(MBF.ISequenceItem)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the symbol should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.GetISequenceItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.SetISequenceItem(System.Int32,MBF.ISequenceItem)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Contains(MBF.ISequenceItem)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The symbol to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IVirtualSequenceProvider.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="P:MBF.IVirtualSequenceProvider.BlockSize">
            <summary>
            Gets or sets block size.
            </summary>
        </member>
        <member name="P:MBF.IVirtualSequenceProvider.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="M:MBF.IVirtualQualitativeSequenceProvider.GetScores">
            <summary>
            Get the quality scores of a particular sequence.
            </summary>
            <returns>The quality scores.</returns>
        </member>
        <member name="F:MBF.IO.FileVirtualQualitativeSequenceProvider._virtualData">
            <summary>
            Instance of a Virtual data holder.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualQualitativeSequenceProvider._parser">
            <summary>
            Instance of a Virtual Sequence Parser.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualQualitativeSequenceProvider._count">
            <summary>
            The number of sequence items contained in the sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualQualitativeSequenceProvider._alphabet">
            <summary>
            Holds Alphabet of the sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualQualitativeSequenceProvider._editedSequences">
            <summary>
            A collection of edited sequences.
            </summary>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.#ctor(MBF.IO.IVirtualSequenceParser,MBF.IO.SequencePointer)">
            <summary>
            Initializes a new instance of the MBF.IO.FileVirtualQualitativeSequenceProvider  
            class to hold a sequence pointer with a parser.
            </summary>
            <param name="parser">A virtual parser object.</param>
            <param name="pointer">The sequence pointer.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetISequenceItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.SetItem(System.Int32,System.Char)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.SetISequenceItem(System.Int32,MBF.ISequenceItem)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.IndexOf(MBF.ISequenceItem)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.IndexOf(System.Byte)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.IndexOf(System.Char)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts a sequence item into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The sequence item to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Insert(System.Int32,System.Byte)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Insert(System.Int32,System.Char)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the symbol should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.RemoveAt(System.Int32)">
            <summary>
            Removes the symbol at the specified index of the sequence.
            </summary>
            <param name="index">The zero-based index of the symbol to remove.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces a sequence item at a specified index of the sequence.
            </summary>
            <param name="index">The zero-based index of the sequence item to be replaced.</param>
            <param name="item">The sequence item to replace the existing item with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Replace(System.Int32,System.Char)">
            <summary>
            Replaces a symbol at a specified index of the sequence.
            </summary>
            <param name="index">
            The zero-based index of the symbol to be replaced.
            </param>
            <param name="item">The symbol to replace the existing symbol with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Replace(System.Int32,System.Byte)">
            <summary>
            Replaces a symbol at a specified index of the sequence.
            </summary>
            <param name="index">
            The zero-based index of the symbol to be replaced.
            </param>
            <param name="item">The symbol to replace the existing symbol with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Add(System.Char)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Add(System.Byte)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Clear">
            <summary>
            Removes all symbols from the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Contains(MBF.ISequenceItem)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The sequence item to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Contains(System.Char)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The symbol to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Contains(System.Byte)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The sequence item to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.CopyTo(System.Char[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first occurrence of a specific sequence item from the current sequence.
            </summary>
            <param name="item">The sequence item to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Remove(System.Char)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetEnumerator">
            <summary>
            Get the enumerator to the symbols in sequence
            </summary>
            <returns>Enumerator to the symbols in sequence</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of symbols from the sequence.
            </summary>
            <param name="position">The zero-based starting index of the range of symbols to remove.</param>
            <param name="length">The number of symbols to remove.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.InsertRange(System.Int32,System.String)">
            <summary>
            Inserts a string of symbols into the sequence at the specified index.
            </summary>
            <param name="position">The zero-based index at which the new symbols should be inserted.</param>
            <param name="sequence">The string of symbols which should be inserted into the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the symbols starting from a specified index of a sequence.
            </summary>
            <param name="index">The zero-based starting index of the symbols to replace in the sequence.</param>
            <param name="sequence">The symbols to replace the existing symbols with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetScores">
            <summary>
            Get the quality scores of a particular sequence.
            </summary>
            <returns>The quality scores.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator to the symbols in sequence
            </summary>
            <returns>Enumerator to the symbols in sequence</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.UpdateStartAndEndRanges(System.Int64,System.Int32)">
            <summary>
            Updates the start and end ranges of the edited sequences.
            </summary>
            <param name="position">The positions to be edited.</param>
            <param name="value">The value to update the ranges by.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetEditedBlock(System.Int32)">
            <summary>
            Gets a derived sequence block if the specified position is contained in it.
            </summary>
            <param name="position">The position inside the derived sequence block.</param>
            <returns>The derived sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.CreateEditedSequenceBlock(System.Int32)">
            <summary>
            Creates an edited sequence block at the specified position.
            </summary>
            <param name="position">The position to create the block at.</param>
            <returns>The edited sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetCacheBlock(System.Int32)">
            <summary>
            Gets a block from the cache at the specified index.
            </summary>
            <param name="index">The zero-based index of the block.</param>
            <returns>The cached sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualQualitativeSequenceProvider.GetPositionDiff(System.Int32)">
            <summary>
            Gets the difference in positions between the cached and edited version of a block.
            </summary>
            <param name="position">The position in the cached block.</param>
            <returns>The position in the edited block.</returns>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.BlockSize">
            <summary>
            Gets or sets the block size.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.Count">
            <summary>
            Gets the number of symbols in the sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the sequence is read-only.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.SequencePointerInstance">
            <summary>
            Holds a sequence pointer for DV to access the sequence
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualQualitativeSequenceProvider.Item(System.Int32)">
            <summary>
            Gets or sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol to get or set.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmerPositionDictionary">
            <summary>
            Wrapper for dictionary that maps kmer strings 
            to list of positions of occurance. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmerPositionDictionary._kmerDictionary">
            <summary>
            Maps kmer to list of positions of occurance 
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerPositionDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            kmer and corresponding list of positions
            </summary>
            <returns>Enumerator over kmers</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerPositionDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether kmer dictionary contains specified key.
            </summary>
            <param name="key">The key to locate</param>
            <returns>Boolean indicating if key exists</returns>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerPositionDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key
            </summary>
            <param name="key">The key of the value to get or set</param>
            <returns>The value associated with the specified key</returns>
        </member>
        <member name="T:MBF.CloneLibraryInformation">
            <summary>
            Stores Information of Library
            </summary>
        </member>
        <member name="M:MBF.CloneLibraryInformation.op_Equality(MBF.CloneLibraryInformation,MBF.CloneLibraryInformation)">
            <summary>
            Overrides == Operator
            </summary>
            <param name="obj1">First Input Object</param>
            <param name="obj2">Second Input Object</param>
            <returns>Result of reference comparison</returns>
        </member>
        <member name="M:MBF.CloneLibraryInformation.op_Inequality(MBF.CloneLibraryInformation,MBF.CloneLibraryInformation)">
            <summary>
            Overrides != Operator
            </summary>
            <param name="obj1">First Input Object</param>
            <param name="obj2">Second Input Object</param>
            <returns>Result of reference comparison</returns>
        </member>
        <member name="M:MBF.CloneLibraryInformation.Equals(System.Object)">
            <summary>
            Override Equals method
            </summary>
            <param name="obj">Input Object</param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:MBF.CloneLibraryInformation.GetHashCode">
            <summary>
            Returns the Hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:MBF.CloneLibraryInformation.LibraryName">
            <summary>
            Gets or sets name of library
            </summary>
        </member>
        <member name="P:MBF.CloneLibraryInformation.MeanLengthOfInsert">
            <summary>
            Gets or sets mean length of Insert
            </summary>
        </member>
        <member name="P:MBF.CloneLibraryInformation.StandardDeviationOfInsert">
            <summary>
            Gets or sets standard deviation of length of inserts
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.SequenceAlignment">
            <summary>
            A simple implementation of ISequenceAlignment that stores the 
            result of an alignment. 
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.ISequenceAlignment">
            <summary>
            An ISequenceAlignment is the result of running an alignment algorithm on a set 
            of two or more sequences. This could be a pairwise alignment, an MSA (multiple 
            sequence alignment), or an overlap alignment of the sort needed for sequence
            assembly.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAlignment.AlignedSequences">
            <summary>
            Gets list of the IAlignedSequences which contains aligned sequences with score, offset and consensus 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAlignment.Sequences">
            <summary>
            Gets list of sequences.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.ISequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAlignment.#ctor">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Default Constructor.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAlignment.#ctor(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Internal constructor to create SequenceAlignemnt from ISequenceAlignment.
            </summary>
            <param name="seqAlignment">Sequence Alignment</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAlignment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SequenceAlignment class
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAlignment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceAlignment.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAlignment.AlignedSequences">
            <summary>
            Gets list of aligned sequences.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAlignment.Sequences">
            <summary>
            Gets list of source sequences involved in the alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAlignment.Documentation">
            <summary>
            Gets or sets documentation for this alignment.
            </summary>
        </member>
        <member name="T:MBF.Util.ValueConverter">
            <summary>
            A set of predefined convertion pairs for use with ConvertValueView.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.CharToInt">
            <summary>
            Converts the characters '0'...'9' to the integers 0 ... 9
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.IntToChar">
            <summary>
            Converts the integers 0...9 to the characters '0' ... '9'
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.CharToString">
            <summary>
            Converts a character into a string.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.StringToChar">
            <summary>
            Converts a length-one string into a character.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.CharToDouble">
            <summary>
            Converts the characters '0' ... '9' to the doubles 0.0 ... 9.0.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.IntToDouble">
            <summary>
            Converts an integer to a double
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.DoubleToChar">
            <summary>
            Converts the doubles 0.0 ... 9.0 to the characters '0' ... '9'.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.DoubleToInt">
            <summary>
            Converts a double to an int.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.Char01ToMinusOneOne">
            <summary>
            Converts the character '0' to the double -1.0 and the character '1' to the double 1.0.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.MinusOneOneToChar01">
            <summary>
            Converts the double -1.0 to the character '0' and the double 1.0 to the character '1'.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.Char01ToBool">
            <summary>
            Converts the character '0' to boolean false and the character '1' to boolean true.
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.BoolToChar01">
            <summary>
             Converts boolean false to the character '0' and boolean true to character '1'
            </summary>
        </member>
        <member name="F:MBF.Util.ValueConverter.CharACTGToDouble0123Converter">
            <summary>
            Converts the characters 'A', 'C', 'T', 'G' to doubles 0.0, 1.0, 3.0, 2.0.
            Lower case is accepted, the inverse always produces uppercase.
            </summary>
        </member>
        <member name="T:MBF.Util.ValueConverter`2">
            <summary>
            A pair of functions used by ConvertView to transform a matrix's nonmissing values from one type to another. The two functions are
            perfect inverses of each other.
            </summary>
            <typeparam name="TInput">The type to convert from</typeparam>
            <typeparam name="TOutput">The type to convert to</typeparam>
        </member>
        <member name="M:MBF.Util.ValueConverter`2.#ctor(System.Converter{`0,`1},System.Converter{`1,`0})">
            <summary>
            Initializes a new instance of the ValueConverter class.
            </summary>
            <param name="convertForward">A function used to a matrix's nonmissing values from one type to another.</param>
            <param name="convertBackward">The perfect inverse of ConvertForward</param>
        </member>
        <member name="P:MBF.Util.ValueConverter`2.ConvertForward">
            <summary>
            A function used to a matrix's nonmissing values from one type to another.
            </summary>
        </member>
        <member name="P:MBF.Util.ValueConverter`2.ConvertBackward">
            <summary>
            The perfect inverse of ConvertForward
            </summary>
        </member>
        <member name="P:MBF.Util.ValueConverter`2.Inverted">
            <summary>
            The ValueConverter that reverses ConvertForward and ConvertBackward
            </summary>
        </member>
        <member name="T:MBF.Util.CharToDoubleWithLimitsConverter">
            <summary>
            A char to double converter that limits the size of the double.
            </summary>
        </member>
        <member name="M:MBF.Util.CharToDoubleWithLimitsConverter.#ctor(System.Int32)">
            <summary>
            Create a char to double converter that limits the size of the double.
            </summary>
            <param name="maxValue">The largest double that can ever be returned.</param>
        </member>
        <member name="T:MBF.Util.CharToGenericConverter`1">
            <summary>
            This is a slow parser that will parse to anything with a Parse or TryParse method using the Parser class. This uses reflection and will not
            be terribly efficient.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MBF.SequenceRangeGrouping">
            <summary>
            A grouping of SequenceRange objects sorted by their ID values. The
            purpose of these groups is to allow a set of SequenceRange objects
            to be associated together by bucketing them into groups where each
            bucket has a unique SequenceRange ID and all SequenceRange objects
            within the bucket has that same ID.
            </summary>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.#ctor">
            <summary>
            Creates an empty grouping.
            </summary>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.#ctor(System.Collections.Generic.IEnumerable{MBF.ISequenceRange})">
            <summary>
            Creates a grouping object from a set of currently ungrouped
            ISequenceRange objects.
            </summary>
            <param name="ranges">Sequence ranges.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.Add(MBF.ISequenceRange)">
            <summary>
            Adds a SequenceRange to the grouping, creating a new bucket
            if the ID of the range has not yet been added to the grouping
            or adding to an existing bucket if it has.
            </summary>
            <param name="range">The range item to add to the grouping</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.GetGroup(System.String)">
            <summary>
            Returns a list of SequenceRange objects each of which has the
            ID specified in the rangeID parameter.
            </summary>
            <param name="rangeID">The identification to look up in the grouping</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.Flatten">
            <summary>
            Ungroups each of the ISequenceRanges and places them into a flat list
            of every ISequenceRange stored across each of the groups in this grouping.
            The resulting list will still be ordered in such a way that each item of
            a particular group will be enumerated before starting the enumeration of
            items from another group.
            </summary>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.MergeOverlaps(System.Int64,System.Boolean)">
            <summary>
            For each group in the grouping, this method traverses through each range
            in the group and normalizes the ranges down to the minimal spanning set
            required to still show the same range spans.
            
            For instance if you had in group 'Chr1' the following ranges:
            
            -> 10 to 100
            -> 200 to 250
            -> 35 to 45
            -> 90 to 150
            
            The result of MergeOverlaps would reduce the ranges in the 'Chr1' group to:
            For minOverlap = 0
            
            -> 10 to 150
            -> 200 to 250
            
            for minOverlap = -50
            
            -> 10 to 250
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.MergeOverlaps(MBF.SequenceRangeGrouping,System.Int64,System.Boolean)">
            <summary>
            Merges query sequence ranges with this sequence ranges.
            
            For example,
            
             Ranges in this instance   Ranges in the query 
               3 to  15                   4 to 10
               5 to  18                  11 to 20
            
             Result for minOverlap set to 1
              3 to 20
            
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query sequence ranges.</param>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.Intersect(MBF.SequenceRangeGrouping,System.Int64,MBF.IntersectOutputType,System.Boolean)">
            <summary>
            Returns overlapping sequence ranges from this and specified SequenceRangeGroup for each group in this grouping.
            
            For instance if you had in group 'Chr1' the following ranges:
            
             Ranges in this instance   Ranges in the query 
               0 to   10                 20 to   40
              30 to   50                 70 to  100     
              60 to   80                400 to  800
             300 to  500                850 to  900
             600 to  700                900 to 1200
             800 to 1000                
            
            Result for minOverlap set to 1
                1. If outputType is OverlappingPiecesOfIntervals.
                    30 to 40
                    70 to 80
                    400 to 500
                    600 o 700
                    850 to 900
                    900 to 1000
                2. If outputType is OverlappingIntervals
                     30 to   50
                     60 to   80
                    300 to  500
                    600 to  700
                    800 to 1000
                    
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of bases pairs should be overlapped.
            By default this will be set to 1.</param>
            <param name="outputType">
            Type of output required, OverlappingPiecesOfIntervals or OverlappingIntervals. 
            By default this will be set to OverlappingPiecesOfIntervals that is only the base pairs that overlaps with 
            query ranges will be returned.</param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence ranges.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.Subtract(MBF.SequenceRangeGrouping,System.Int64,MBF.SubtractOutputType,System.Boolean)">
            <summary>
            Subtracts the query SequenceRangeGrouping from this SequenceRangeGrouping.
            
            For example,
            
             Ranges in this instance   Ranges in the query 
                1 to  4                   2 to  6
                4 to  8                   3 to  6
                8 to 12                   9 to 14
               25 to 35
               
            Result for minOverlap set to 1
            1. If outputType is IntervalsWithNoOverlap
               25 to 35
               
            2. If outputType is NonOverlappingPiecesOfIntervals
               1 to  2
               6 to  8
               8 to  9
              25 to 35
              
            Running this method creates all new ISequenceRange objects and adds them
            to the newly created SequenceRangeGrouping returned here.
            </summary>
            <param name="query">Query grouping.</param>
            <param name="minOverlap">Minmum length of overlap. By default this will be set to 1</param>
            <param name="outputType">
            Type of output required, IntervalsWithNoOverlap or NonOverlappingPiecesOfIntervals. 
            By default this will be set to NonOverlappingPiecesOfIntervals that is non overlapping 
            pieces of intervels along with non overlapping ranges from this instance 
            will be returned.
            </param>
            <param name="isParentSeqRangesRequired">If this flag is set to true then the sequence ranges from 
            which the new sequence range is created are added to the ParentSeqRanges property of the 
            new sequence range.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.GetOverlappingRenges(MBF.ISequenceRange,System.Collections.Generic.List{MBF.ISequenceRange},System.Int64)">
            <summary>
            Return overlapping ranges from the query sequence ranges for the specified minimal overlap. 
            Note that this method does not verifies the id.
            This method is used by intersect and subtract methods.
            </summary>
            <param name="refSeqRange">Reference seq range</param>
            <param name="querySeqRanges">Query sequence ranges</param>
            <param name="minimalOverlap">Minimum overlap required.</param>
            <returns>Overlapping Ranges from query ranges.</returns>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.AddParent(MBF.ISequenceRange,MBF.ISequenceRange)">
            <summary>
            Adds specified parentrange to the specified range's metadata.
            </summary>
            <param name="range">ISequenceRange instance to which the parentrange to be added.</param>
            <param name="parentRange">Parent range of the specified range.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.AddParent(MBF.ISequenceRange,System.Collections.Generic.IList{MBF.ISequenceRange})">
            <summary>
            Adds specified parentranges to the specified range's metadata.
            </summary>
            <param name="range">ISequenceRange instance to which the parentrange to be added.</param>
            <param name="parentRanges">Parent ranges of the specified range.</param>
        </member>
        <member name="M:MBF.SequenceRangeGrouping.CopyOfMetadata(MBF.ISequenceRange,MBF.ISequenceRange)">
            <summary>
            Copies the metadata from specified fromRange to toRange.
            </summary>
            <param name="toRange">Range to which the metadata has to be copied.</param>
            <param name="fromRange">Range from which the metadata has to be copied.</param>
        </member>
        <member name="P:MBF.SequenceRangeGrouping.GroupIDs">
            <summary>
            An enumeration of all the SequenceRange IDs contained in
            this grouping.
            </summary>
        </member>
        <member name="P:MBF.SequenceRangeGrouping.GroupRanges">
            <summary>
            Gets sequence range from all the groups
            </summary>
        </member>
        <member name="T:MBF.IntersectOutputType">
            <summary>
            This enum indicates type of output an intersect operation should return.
            </summary>
        </member>
        <member name="F:MBF.IntersectOutputType.OverlappingIntervals">
            <summary>
            OverlappingIntervals indicates that intersect operation should return 
            intervals from the reference that overlap with the query intervals. 
            This option only filters out intervals that do not overlap with the query intervals.
            </summary>
        </member>
        <member name="F:MBF.IntersectOutputType.OverlappingPiecesOfIntervals">
            <summary>
            OverlappingPiecesOfIntervals indicates that intersect operation should return intervals that 
            indicate the exact base pair overlap between the reference intervals and 
            the query intervals. 
            </summary>
        </member>
        <member name="T:MBF.SubtractOutputType">
            <summary>
            This enum indicates type of output an subtract operation should return.
            </summary>
        </member>
        <member name="F:MBF.SubtractOutputType.IntervalsWithNoOverlap">
            <summary>
            IntervalsWithNoOverlap indicates that subtract operation should return  
            intervals from the reference intervals that do not overlap with the query intervals. 
            This option only filters out intervals that overlap with the query intervals.
            </summary>
        </member>
        <member name="F:MBF.SubtractOutputType.NonOverlappingPiecesOfIntervals">
            <summary>
            NonOverlappingPiecesOfIntervals indicates that Subtract operation should return 
            intervals from the reference intervals that have the intervals from the query intervals removed. 
            Any overlapping base pairs are removed from the range of the interval.
            </summary>
        </member>
        <member name="T:MBF.Encoding.IupacNAEncoding">
            <summary>
            A standard encoding for nucleic acids of DNA and RNA sequences. This encoding
            allows for the common ambiguities found when sequencing DNA and RNA but does
            not allow for gap characters.
            
            An encoding that contains all of these symbols plus a gap character is found
            in Ncbi4NaEncoding and will likely be a better choice for encoding unless
            working with code or formats that require this encoding.
            
            The encoding comes from the IUPACna standard and is summarized by:
            
            Value - Symbol - Name
            
            65 - A - Adenine
            66 - B - G or T or C
            67 - C - Cytosine
            68 - D - G or A or T
            71 - G - Guanine
            72 - H - A or C or T
            75 - K - G or T
            77 - M - A or C
            78 - N - A or G or C or T
            82 - R - G or A
            83 - S - G or C
            84 - T - Thymine/Uracil
            86 - V - G or C or A
            87 - W - A or T
            89 - Y - T or C
            
            Note that the reason for the byte values found here is that they represent
            the ASCII value for the symbol.
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.B">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.D">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.H">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.K">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.M">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.N">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.R">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.S">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.T">
            <summary>
            Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.V">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.W">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.IupacNAEncoding.Y">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.GetComplement(System.Byte)">
            <summary>
            Gets the complement of a given byte value
            </summary>
            <param name="value">Value of which complement has to be found</param>
            <returns>Complemented byte value</returns>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:MBF.Encoding.IupacNAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.Instance">
            <summary>
            An instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.Name">
            <summary>
            The name of this encoding is always 'IUPACna'
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.Count">
            <summary>
            The number of encoding symbols. For this encoding the result should
            always be 15.
            </summary>
        </member>
        <member name="P:MBF.Encoding.IupacNAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SignalPeptide">
            <summary>
            Signal peptide coding sequence; coding sequence for an N-terminal domain of a secreted protein; this 
            domain is involved in attaching nascent polypeptide to the membrane leader sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SignalPeptide.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new SignalPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.SignalPeptide.#ctor(System.String)">
            <summary>
            Creates new SignalPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the SignalPeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.SignalPeptide.#ctor(MBF.IO.GenBank.SignalPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other SignalPeptide instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.SignalPeptide.Clone">
            <summary>
            Creates a new SignalPeptide that is a copy of the current SignalPeptide.
            </summary>
            <returns>A new SignalPeptide that is a copy of this SignalPeptide.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SignalPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscBinding">
            <summary>
            Site in nucleic acid which covalently or non-covalently binds another moiety that cannot be described
            by any other binding key (primer_bind or protein_bind).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscBinding.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscBinding feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscBinding.#ctor(System.String)">
            <summary>
            Creates new MiscBinding feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscBinding.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscBinding.#ctor(MBF.IO.GenBank.MiscBinding)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscBinding instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscBinding.Clone">
            <summary>
            Creates a new MiscBinding that is a copy of the current MiscBinding.
            </summary>
            <returns>A new MiscBinding that is a copy of this MiscBinding.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscBinding.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Minus10Signal">
            <summary>
            Pribnow box; a conserved region about 10 bp upstream of the start point of bacterial transcription units
            which may be involved in binding RNA polymerase.
            Consensus=TAtAaT.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Minus10Signal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Minus10Signal feature item from the specified location.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus10Signal.#ctor(System.String)">
            <summary>
            Creates new Minus10Signal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Minus10Signal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus10Signal.#ctor(MBF.IO.GenBank.Minus10Signal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Minus10Signal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Minus10Signal.Clone">
            <summary>
            Creates a new Minus10Signal that is a copy of the current Minus10Signal.
            </summary>
            <returns>A new Minus10Signal that is a copy of this Minus10Signal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Minus10Signal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ILocationBuilder">
            <summary>
            Interface to build the location from location string and from location object to location string.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationBuilder.GetLocation(System.String)">
            <summary>
            Returns the location object for the specified location string.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocationBuilder.GetLocationString(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns the location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="T:MBF.IO.GenBank.ILocation">
            <summary>
            Interface to hold location information.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.GetSubSequence(MBF.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.GetSubSequence(MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.GetLeafLocations">
            <summary>
            Returns the leaf locations.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ILocation.Clone">
            <summary>
            Creates a new ILocation that is a copy of the current ILocation.
            </summary>
            <returns>A new ILocation that is a copy of this ILocation.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.Start">
            <summary>
            Start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.End">
            <summary>
            End position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.StartData">
            <summary>
            Start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.EndData">
            <summary>
            End position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ILocation.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder">
            <summary>
            This class implements Kurtz Algorithm (using Hash Table) to build the Suffix Tree.
            Steps to build the suffix tree are:
                For every prefix in suffix of sequence string
                Add prefix to the tree, prefix can be added in to ways
                    1. New edge is created
                    2. Previous edge is updated (split the tree and and new edges)
            <remarks>
            Kurtz Algorithm adds a terminating symbol if the last character
            repeats anywhere in the string. This implementation has a method that
            (GetSequenceSymbol) takes care of terminating symbol without actually 
            adding the symbol to the sequence. Note that the Suffix Tree returned
            by this implementation will have index reference to symbol which actually
            does not exist in the Sequence.
            </remarks>
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.ISuffixTreeBuilder">
            <summary>
            This interface defines contract for classes implementing Suffix Tree Builder Algorithm.
            Suffix tree algorithm that takes a sequence as an input and produces an 
            Suffix Tree of the sequence as output.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixTreeBuilder.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Build a Suffix Tree for the given input sequence.
            </summary>
            <param name="sequence">Sequence to build Suffix Tree for</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixTreeBuilder.FindMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.ISuffixTreeBuilder.FindMaximumMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Finds all the matches of given sequence in suffix tree irrespective of the uniqueness in
            reference or query sequence
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.TERMINATING_SYMBOL">
            <summary>
            Character used as terminating symbol for Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.CONCATENATING_SYMBOL">
            <summary>
            Character used as Concatenating symbol for Suffix Tree
            Note: This is specific to NUCmer implementation
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._maxHashKey">
            <summary>
            Hash table size for storing edges
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._minimumLengthOfMUM">
            <summary>
            Minimum Required length of MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._lastMatch">
            <summary>
            Last Match found
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._lastEdge">
            <summary>
            Last edge in the previous match
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._suffixTree">
            <summary>
            Current suffix tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._referenceSequences">
            <summary>
            Reference sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._querySequence">
            <summary>
            Query sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._referenceSymbolsList">
            <summary>
            If reference sequence is segmented sequence then store sequence's encoded values in 
            segemented sequence in list of byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._referenceSymbols">
            <summary>
            Reference sequence's encoded values are in the byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._querySymbols">
            <summary>
            Query sequence's encoded values in the byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder._findMaximumMatch">
            <summary>
            If set, find all the matches irrespective of the uniqueness in 
            reference or query sequence.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.#ctor">
            <summary>
            Initializes a new instance of the KurtzSuffixTreeBuilder class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Builds the Suffix Tree using Kurtz Algorithm(using Hash Table)
            </summary>
            <example>
            --------------------------------------------------
            Create the Sequence from string (let say DNA sequence "CACCAS")
            --------------------------------------------------
            string aOriginalStr = "CACCAS";
            Sequence aInput = new Sequence(Alphabets.DNA, aOriginalStr);
            --------------------------------------------------
            Instantiate and run the suffix tree builder
            --------------------------------------------------
            ISuffixTreeBuilder suffixTreeBuilder = new KurtzSuffixTreeBuilder();
            SuffixTree suffixTree = suffixTreeBuilder.BuildSuffixTree(aInput);
            </example>
            <param name="sequence">Input Sequence</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.FindMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.FindMaximumMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Finds all the matches of given sequence in suffix tree irrespective of the uniqueness in
            reference or query sequence
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.FindMatchWithOption(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix tree to searh on</param>
            <param name="searchSequence">query sequence to find matches</param>
            <param name="lengthOfMUM">Minimum length of the match</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.ValidateReferenceSequence(MBF.ISequence)">
            <summary>
            Validate input sequences are of same encoding
            </summary>
            <param name="sequence">Reference sequence</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.InitializeReferenceSequence(MBF.ISequence)">
            <summary>
            Initialize reference sequence.
            If the sequence is DV-enabled pre-fetch the sequence in local byte array
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.ValidateSequence(MBF.ISequence,MBF.ISequence)">
            <summary>
            Validate input sequences are of same encoding
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.InitializeQuerySequence(MBF.ISequence)">
            <summary>
            Initialize query sequence.
            If the sequence is DV-enabled pre-fetch the sequence in local byte array
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.GetReferenceSymbol(System.Int32)">
            <summary>
            Get the symbol from refrence sequence at given index
            </summary>
            <param name="index">Index of symbol</param>
            <returns>Symbol at index</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.GetQuerySymbol(System.Int32)">
            <summary>
            Get the symbol from query sequence at given index
            </summary>
            <param name="index">Index of symbol</param>
            <returns>Symbol at index</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.FindMUMs(System.Int32,System.Int32)">
            <summary>
            Finds the MUMs for suffix in given interval of query sequence
            </summary>
            <param name="startIndex">startindex of interval</param>
            <param name="interval">length of interval</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.Hash(System.Int32,System.Byte)">
            <summary>
            Find the position (hash) of the edge in the hash table
            </summary>
            <param name="node">Start node of the edge</param>
            <param name="character">Starting character of the edge</param>
            <returns>Hash code of node</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.AppendSuffix(System.Collections.Generic.IList{System.Int32},MBF.ISequence)">
            <summary>
            Add suffix to the tree, the loop inside will break under two conditions
                1. If you have reached the leaf node
                2. If you have reached end of suffix
            </summary>
            <param name="startIndices">List of index of the first character of suffix</param>
            <param name="sequence">Reference sequence</param>
            <returns>Suffix tree</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.Find(System.Int32,System.Byte,MBF.Algorithms.SuffixTree.SequenceSuffixTree)">
            <summary>
            Find the edge leading out of the node
            </summary>
            <param name="node">Start node</param>
            <param name="character">Starting character of the edge</param>
            <param name="tree">Suffix Tree</param>
            <returns>Edge leading out from the node</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.Insert(MBF.Algorithms.SuffixTree.Edge,MBF.Algorithms.SuffixTree.SequenceSuffixTree)">
            <summary>
            Insert an Edge into Hash Table, if not already in the list
            </summary>
            <param name="edge">Edge that has to be inserted</param>
            <param name="tree">Suffix Tree</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.SplitEdge(MBF.Algorithms.SuffixTree.Edge,System.Int32,System.Int32,MBF.Algorithms.SuffixTree.SequenceSuffixTree)">
            <summary>
            Splitting the edge for creation of new node
                Remove the edge at given position
                Add new edge to the parent of removed edge
                Add the removed edge to the new edge (requires start character to be recalculated)
            </summary>
            <param name="edge">Edge of tree which has to be split</param>
            <param name="splitAt">Split edge at index</param>
            <param name="parentNode">Parent node of new edge</param>
            <param name="tree">Suffix Tree</param>
            <returns>Value of new edge End node</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.Remove(MBF.Algorithms.SuffixTree.Edge,MBF.Algorithms.SuffixTree.SequenceSuffixTree)">
            <summary>
            Remove the given edge from the tree and fill the gap
            </summary>
            <param name="edge">Edge that has to be removed</param>
            <param name="tree">Suffix Tree</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.CreateMUM(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate following conditions and create MUM only if valid
            1. Make sure there is no split edge in reference sequence (this 
                represent duplicate in reference sequence)
            2. Validate required length of MUM
            </summary>
            <param name="referenceEndIndex">End index of string found in reference sequence</param>
            <param name="queryStartIndex">Start index of string found in query sequence</param>
            <param name="length">Length of match</param>
            <returns>Maximum Unique Match</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.Search(System.Int32)">
            <summary>
            Search for a query sequence in give Suffix Tree for existence
            </summary>
            <param name="startIndex">Index of first suffix character in search sequence</param>
            <returns>Does query sequence exists</returns>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.KurtzSuffixTreeBuilder.ReferenceLength">
            <summary>
            Gets the length of reference sequence
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Contig">
            <summary>
            Contig is a data storage object representing a set of sequences
            that have been assembled into a new, longer sequence.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.Sequences">
            <summary>
            The set of sequences that have been assembled to form the contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.Consensus">
            <summary>
            A sequence derived from the input sequences as assembled, representing the
            contents of the whole range of the contig.
            <remarks>
            This is built by an IConsensusMethod.
            </remarks>
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.Length">
            <summary>
            The length of the contig equals the length of its consensus.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Contig.AssembledSequence">
            <summary>
            A sequence, as it has been located into the contig. This includes
            possible reversal, complementation, or both.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.Sequence">
            <summary>
            The sequence, as possibly modified (via gap insertion) by
            the overlap algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.Position">
            <summary>
            The offset from the start of the contig where this sequence begins.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.IsComplemented">
            <summary>
            Whether the sequence was complemented in order to find sufficient overlap.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.IsReversed">
            <summary>
            Whether the orientation of the sequence was reversed in order to find
            sufficient overlap.
            <remarks>
            If the assembly algorithm used AssumeStandardOrientation=true, then IsReversed
            and IsComplemented will both be true (reverse complement) or both be false.
            </remarks>
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.ReadPosition">
            <summary>
            Position of the Read in alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Contig.AssembledSequence.Length">
            <summary>
            Length of alignment between read and contig.
            </summary>
        </member>
        <member name="T:MBF.Matrix.RowKeysAnsi">
            <summary>
            Be sure to use this is a "Using" to that it gets disposed correctly.
            </summary>
        </member>
        <member name="T:MBF.Matrix.RowKeysStructMatrix`1">
            <summary>
            An abstract Matrix class for accessing values off disk instead of keeping them memory. For example, RowKeysAnsi
            is a subclass that access values from DenseAnsi format. The on-disk file format must be a subtype of DenseStructMatrix, 
            for example, DenseAnsi or PaddedDouble. The method is IDisposable and should be used with a 'Using' statement or should be closed.
            </summary>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="M:MBF.Matrix.RowKeysStructMatrix`1.ByteArrayToValueOrMissing(System.Byte[])">
            <summary>
            A method that converts bytes (read from the on-disk file) into a value.
            </summary>
            <param name="byteArray">bytes from the on-disk file</param>
            <returns>a value</returns>
        </member>
        <member name="M:MBF.Matrix.RowKeysStructMatrix`1.ValueOrMissingToByteArray(`0)">
            <summary>
            A method that converts a value (including the special missing value) to an array of bytes.
            </summary>
            <param name="value">The value to convert</param>
            <returns>The byte array</returns>
        </member>
        <member name="F:MBF.Matrix.RowKeysStructMatrix`1.ColSerialNumbers">
            <summary>
            The mapping from column keys to column indexes.
            </summary>
        </member>
        <member name="M:MBF.Matrix.RowKeysStructMatrix`1.WriteRowKeys(System.String)">
            <summary>
            Write out the RowKeys file for a matrix. This file is an index to the rows of another file.
            </summary>
            <param name="simpleFileName">The rowKeys file to write to. It must not include any path information. It will be created in the other file's directory.</param>
        </member>
        <member name="M:MBF.Matrix.RowKeysStructMatrix`1.GetInstanceFromRowKeysStructFileNameInternal(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Get a instance from a file in a RowKeys format
            </summary>
            <param name="rowKeysStructFileName">The rowKeys file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
        </member>
        <member name="M:MBF.Matrix.RowKeysStructMatrix`1.GetInstanceFromDenseStructFileNameInternal(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Used by subclasses, such as RowKeyAnsi, to open a file on disk.
            The enseStructFileNam is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="denseStructFileName">The file on disk to open</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
        </member>
        <member name="P:MBF.Matrix.RowKeysStructMatrix`1.BytesPerValue">
            <summary>
            The number of bytes per value in the on-disk file format.
            </summary>
        </member>
        <member name="M:MBF.Matrix.RowKeysAnsi.GetInstanceFromDenseAnsi(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysAnsi from a file in DenseAnsi format.
            The RowKeysAnsi is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="denseAnsiFileName">The DenseAnsi file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>A RowKeysAnsi object</returns>
        </member>
        <member name="M:MBF.Matrix.RowKeysAnsi.GetInstanceFromRowKeysAnsi(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysAnsi from a file in RowKeysAnsi format.
            The RowKeysAnsi is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="rowKeysAnsiFileName">The rowKeys ansi file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>a RowKeysAnsi instance</returns>
        </member>
        <member name="T:MBF.Matrix.PermuteValuesView`3">
            <summary>
            A wrapper around a parent matrix that permutes the values by column.
            e.g. Before m1=
                     cid0 cid1 cid2
                v0    a     b   c
                v1    d    null f
                v2    null null i
                
                m1.PermuteValuesView(1, 2, 0) =
                     cid0 cid1 cid2
                v0    b    c    a
                v1    null f   d
                v2    null i   null
            
            
            Because it is a view, any changes made to the values of this matrix or the parent matrix are reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="P:MBF.Matrix.PermuteValuesView`3.ParentMatrix">
            <summary>
            The matrix that this view wraps.
            </summary>
        </member>
        <member name="T:MBF.IO.Nexus.NexusParser">
            <summary>
            A NexusParser reads from a source of text that is formatted according 
            to the NexusParser flat file specification, and converts the data to 
            in-memory ISequenceAlignment objects.  For advanced users, the ability 
            to select an encoding for the internal memory representation is provided. 
            There is also a default encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="F:MBF.IO.Nexus.NexusParser._basicParser">
            <summary>
            Basic Sequence Alignment Parser that contains all the common methods required.
            </summary>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.#ctor">
            <summary>
            Initializes a new instance of the NexusParser class.
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Initializes a new instance of the NexusParser class.
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single Nexus text from a reader into a sequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.GetTokens(System.String)">
            <summary>
            Split the line and return the tokens in the line
            </summary>
            <param name="line">Line to be split</param>
            <returns>Tokens in line</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseHeader(MBF.IO.MBFTextReader)">
            <summary>
            Parse Nexus Header
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseTaxaBlock(MBF.IO.MBFTextReader)">
            <summary>
            Gets the list of sequence titles
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <returns>List of sequence IDs</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseCharacterBlock(MBF.IO.MBFTextReader,System.Collections.Generic.IList{System.String})">
            <summary>
            Parse the Sequence data in the block
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="IDs">List of sequence IDs</param>
            <returns>parse sequence in alignment</returns>
        </member>
        <member name="M:MBF.IO.Nexus.NexusParser.ParseOne(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single sequences using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence Alignment instance containing parsed data.</returns>
        </member>
        <member name="P:MBF.IO.Nexus.NexusParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.Nexus.NexusParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.Nexus.NexusParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.Nexus.NexusParser.Encoding">
            <summary>
            Gets or sets encoding to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.Nexus.NexusParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.FileVirtualSequenceProvider">
            <summary>
            This class holds the virtual data and parser info for each sequence
            This class is used by the Data Virtualization on Large data where it reads block by block.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._virtualData">
            <summary>
            Instance of a Virtual data holder.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._parser">
            <summary>
            Instance of a Virtual Sequence Parser.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._sidecarProvider">
            <summary>
            The sidecar file which stores the index information for
            each seqeuence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._sequenceIndex">
            <summary>
            The index of this sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._count">
            <summary>
            The number of sequence items contained in the sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._alphabet">
            <summary>
            Holds Alphabet of the sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FileVirtualSequenceProvider._editedSequences">
            <summary>
            A collection of edited sequences.
            </summary>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.#ctor(MBF.IO.IVirtualSequenceParser,MBF.IO.SequencePointer)">
            <summary>
            Initializes a new instance of the MBF.IO.FileVirtualSequenceProvider 
            class to hold a sequence pointer with a parser.
            </summary>
            <param name="parser">A virtual parser object.</param>
            <param name="pointer">The sequence pointer.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.#ctor(MBF.IO.IVirtualSequenceParser,MBF.IO.SequencePointer,MBF.IO.SidecarFileProvider,System.Int32)">
            <summary>
            Initializes a new instance of MBF.IO.FileVirtualSequenceProvider
            class to hold a sequence parser, a sidecar file provider and
            the index of the sequence.
            </summary>
            <param name="parser">A virtual parser object.</param>
            <param name="pointer">The sequence pointer.</param>
            <param name="sidecarFileProvider">A sidecar file provider.</param>
            <param name="index">The zero-based index of the sequence within the file.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetISequenceItem(System.Int32)">
            <summary>
            Gets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.SetItem(System.Int32,System.Char)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.SetISequenceItem(System.Int32,MBF.ISequenceItem)">
            <summary>
            Sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol.</param>
            <param name="item">Symbol to set.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.IndexOf(MBF.ISequenceItem)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.IndexOf(System.Byte)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.IndexOf(System.Char)">
            <summary>
            Finds the index of the first occurrence of a given symbol in the current sequence.
            </summary>
            <param name="item">The symbol whose index is required.</param>
            <returns>The index of the first occurrence of the symbol in the current sequence.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts a sequence item into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The sequence item to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Insert(System.Int32,System.Byte)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Insert(System.Int32,System.Char)">
            <summary>
            Inserts a symbol into the sequence at the specified index.
            </summary>
            <param name="index">The zero-based index at which the symbol should be inserted.</param>
            <param name="item">The symbol to insert.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.RemoveAt(System.Int32)">
            <summary>
            Removes the symbol at the specified index of the sequence.
            </summary>
            <param name="index">The zero-based index of the symbol to remove.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces a sequence item at a specified index of the sequence.
            </summary>
            <param name="index">The zero-based index of the sequence item to be replaced.</param>
            <param name="item">The sequence item to replace the existing item with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Replace(System.Int32,System.Char)">
            <summary>
            Replaces a symbol at a specified index of the sequence.
            </summary>
            <param name="index">
            The zero-based index of the symbol to be replaced.
            </param>
            <param name="item">The symbol to replace the existing symbol with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Replace(System.Int32,System.Byte)">
            <summary>
            Replaces a symbol at a specified index of the sequence.
            </summary>
            <param name="index">
            The zero-based index of the symbol to be replaced.
            </param>
            <param name="item">The symbol to replace the existing symbol with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Add(System.Char)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Add(System.Byte)">
            <summary>
            Adds a sequence item to the end of the sequence.
            </summary>
            <param name="item">The sequence item to be added to the end of the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Clear">
            <summary>
            Removes all symbols from the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Contains(MBF.ISequenceItem)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The sequence item to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Contains(System.Char)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The symbol to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Contains(System.Byte)">
            <summary>
            Determines whether a specific sequence item is in the current sequence.
            </summary>
            <param name="item">The sequence item to locate in the current sequence.</param>
            <returns>true if the sequence item is found in the sequence; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.CopyTo(System.Char[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the entire sequence to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current sequence. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first occurrence of a specific sequence item from the current sequence.
            </summary>
            <param name="item">The sequence item to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Remove(System.Char)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of a specific symbol from the current sequence.
            </summary>
            <param name="item">The symbol to remove from the sequence.</param>
            <returns>true if item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetEnumerator">
            <summary>
            Get the enumerator to the symbols in sequence
            </summary>
            <returns>Enumerator to the symbols in sequence</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of symbols from the sequence.
            </summary>
            <param name="position">The zero-based starting index of the range of symbols to remove.</param>
            <param name="length">The number of symbols to remove.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.InsertRange(System.Int32,System.String)">
            <summary>
            Inserts a string of symbols into the sequence at the specified index.
            </summary>
            <param name="position">The zero-based index at which the new symbols should be inserted.</param>
            <param name="sequence">The string of symbols which should be inserted into the sequence.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the symbols starting from a specified index of a sequence.
            </summary>
            <param name="index">The zero-based starting index of the symbols to replace in the sequence.</param>
            <param name="sequence">The symbols to replace the existing symbols with.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator to the symbols in sequence
            </summary>
            <returns>Enumerator to the symbols in sequence</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.UpdateStartAndEndRanges(System.Int64,System.Int32)">
            <summary>
            Updates the start and end ranges of the edited sequences.
            </summary>
            <param name="position">The positions to be edited.</param>
            <param name="value">The value to update the ranges by.</param>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetEditedBlock(System.Int32)">
            <summary>
            Gets a derived sequence block if the specified position is contained in it.
            </summary>
            <param name="position">The position inside the derived sequence block.</param>
            <returns>The derived sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.CreateEditedSequenceBlock(System.Int32)">
            <summary>
            Creates an edited sequence block at the specified position.
            </summary>
            <param name="position">The position to create the block at.</param>
            <returns>The edited sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetCacheBlock(System.Int32)">
            <summary>
            Gets a block from the cache at the specified index.
            </summary>
            <param name="index">The zero-based index of the block.</param>
            <returns>The cached sequence block.</returns>
        </member>
        <member name="M:MBF.IO.FileVirtualSequenceProvider.GetPositionDiff(System.Int32)">
            <summary>
            Gets the difference in positions between the cached and edited version of a block.
            </summary>
            <param name="position">The position in the cached block.</param>
            <returns>The position in the edited block.</returns>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.BlockSize">
            <summary>
            Gets or sets the block size.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.Count">
            <summary>
            Gets the number of symbols in the sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the sequence is read-only.
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.SequencePointerInstance">
            <summary>
            Holds a sequence pointer for DV to access the sequence
            </summary>
        </member>
        <member name="P:MBF.IO.FileVirtualSequenceProvider.Item(System.Int32)">
            <summary>
            Gets or sets the symbol at the specified index.
            </summary>
            <param name="index">The zero-based index of the symbol to get or set.</param>
            <returns> The symbol at the specified index.</returns>
        </member>
        <member name="T:MBF.IO.MBFStreamReader">
            <summary>
            A MBFStreamReader reads from a biological sequence file stream.
            </summary>
        </member>
        <member name="F:MBF.IO.MBFStreamReader.KBytes">
            <summary>
            1 KB
            </summary>
        </member>
        <member name="F:MBF.IO.MBFStreamReader.bufferSize">
            <summary>
            Buffer size (4KB) of reading block
            </summary>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MBFStreamReader class.
            Constructor from a file name using the default data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to true.
            </summary>
            <param name="fileName">The filename to open.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFStreamReader class.
            Constructor from a file name using the default data indent; opens a StreamReader on
            the file, and reads in the first line of text, with SkipBlankLines set to the specified value.
            </summary>
            <param name="filename">The filename to open.</param>
            <param name="skipBlankLines">Indicates whether to skip blank lines or not.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MBFStreamReader class.
            Constructor from a Stream using the default data indent; opens a StreamReader on
            the Stream, and reads in the first line of text.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFStreamReader class.
            Constructor from a Stream using the default data indent; opens a StreamReader on
            the Stream, and reads in the first line of text, with SkipBlankLines set to the specified value
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="skipBlankLines">Indicates whether to skip blank lines or not.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.#ctor(System.String,System.IO.StreamReader,System.Boolean)">
            <summary>
            Initializes a new instance of the MBFStreamReader class.
            </summary>
            <param name="filename">The filename to open.</param>
            <param name="reader">The stream to read.</param>
            <param name="skipBlankLines">Indicates whether to skip blank lines or not.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.GoToNextLine">
            <summary>
            Reads the next line of text, storing it in the Line property.  If SkipBlankLines is
            true, any lines containing only white space are skipped.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.GetLineField(System.Int32,System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <param name="end">1-based index of last character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.GetLineField(System.Int32)">
            <summary>
            Access substrings from the current line in the form used by the specs for many
            file formats: start and end positions, inclusive, one-based.  Allows the use
            of numbers directly from specs.
            </summary>
            <param name="start">1-based index of first character of field.</param>
            <returns>A string of the requested field.</returns>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.ReadChars(System.Int64,System.Int32)">
            <summary>
            Reads the next block of characters from the sequence file into
            the specified character array.
            </summary>
            <param name="index">
            Zero-based starting index of the range of sequence characters to retrieve.
            This index must be the exact position within the actual file.
            </param>
            <param name="count">
            The number of characters to be read.
            </param>
            <returns>The number of characters read.</returns>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.ReadBytes(System.Int64,System.Int32)">
            <summary>
            Reads the next block of characters from the sequence file into
            the specified byte array.
            </summary>
            <param name="index">
            Zero-based starting index of the range of sequence characters to retrieve.
            This index must be the exact position within the actual file.
            </param>
            <param name="count">
            The number of characters to be read.
            </param>
            <returns>Returns byte array.</returns>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.ReadLine">
            <summary>
            Reads a line of characters from the current stream and returns the data as a string.
            </summary>
            <returns>
            The next line from the input stream, or null if the end 
            of the input stream is reached.
            </returns>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="position">The position to seek to.</param>
            <param name="seekOrigin">The reference position in the stream.</param>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.Close">
            <summary>
            Closes the stream reader.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.Dispose">
            <summary>
            Implements dispose to supress GC finalize
            This is done as one of the methods uses ReadWriterLockSlim
            which extends IDisposable.
            </summary>
        </member>
        <member name="M:MBF.IO.MBFStreamReader.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.FileName">
            <summary>
            The full path to the file.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.HasLines">
            <summary>
            Gets a value indicating whether current line is not past the end of the formatted text.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.Line">
            <summary>
            Gets current line of text.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.NewLineCharacterCount">
            <summary>
            Gets the number of new line characters that
            terminate the current line stored in the Line property.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.CurrentLineStartingIndex">
            <summary>
            Gets the starting index of the current line
            held by MBFStreamReader.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.NumberOfNewlineCharacters">
            <summary>
            Gets the number of new line characters for
            the current sequence being parsed.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.SkipBlankLines">
            <summary>
            Gets or sets a value indicating whether or not blank lines should be skipped when GoToNextLine is called.
            </summary>
        </member>
        <member name="P:MBF.IO.MBFStreamReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMSortByFields">
            <summary>
            Defines list of possible sort option for SequenceAlignmentMap
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortByFields.ChromosomeCoordinates">
            <summary>
            Sort by Positions (Pos)
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortByFields.ReadNames">
            <summary>
            Sort by Read name (QName)
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortByFields.ChromosomeNameAndCoordinates">
            <summary>
            Sort by Chromosome name (RName) and Positions (Pos)
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMSort">
            <summary>
            Class implements sorting in a SequenceAlignmentMap.
            Sorts the data in "SequenceAlignmentMap" By
             ChromosomeCoordinates
             Or
             ReadNames
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSort.sortedList_MaxCount">
            <summary>
            Maximum limit of sorted bucket.
            Write the list to file once the limit is reached.
            The max count number is an optimized value based on local tests.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSort._seqAlignMap">
            <summary>
            Holds SequenceAlignmentMap object to be sorted.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSort._sortType">
            <summary>
            Type of sort needed.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSort.#ctor(MBF.IO.SAM.SequenceAlignmentMap,MBF.IO.BAM.BAMSortByFields)">
            <summary>
            Default Constructor
            Initializes a new instance of the BAMSorter class
            </summary>
            <param name="seqAlignMap">SequenceAlignmentMap object to be sorted.</param>
            <param name="sortType">Type of sort required.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMSort.Sort">
            <summary>
            Sorts the SequenceAlignmentMap based on the sort by fields,
            either chromosome coordinates or read names and retuns sorted BAM indexer
            </summary>
            <example>
            1. Sort by chromosome name.
            BAMSort sorter = new BAMSort([SequenceAlignmentMap], BAMSortByFields.ChromosomeCoordinates);
            IList&lt;BAMSortedIndex&gt; sortedGroups = sorter.Sort();
            foreach (BAMSortedIndex sortedGroup in sortedGroups)
            {
                sortedGroup.GroupName // Containes the RName
                foreach (int index in sortedGroup)
                {
                    index // index of SequenceAlignmentMap.QuerySequences 
                }
            }
            2. Sort by read name.
            BAMSort sorter = new BAMSort([SequenceAlignmentMap], BAMSortByFields.ChromosomeCoordinates);
            IList&lt;BAMSortedIndex&gt; sortedGroups = sorter.Sort();
            foreach (int index in sortedGroups[0]) // There will be only Group in list.
            {
                index // index of SequenceAlignmentMap.QuerySequences 
            }
            </example>
            <returns>sorted BAM indexer</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMSort.SortByReadNames">
            <summary>
            Sort the index of SequenceAlignmentMap by QName.
            Fill the index (sorted by QName) into a list, when the list size reaches
            the maximum limit, write the list to file and clear the list.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSort.SortByChromosomeCoordinates">
            <summary>
            Sort the index of SequenceAlignmentMap by RName then by Pos.
            Fill the index (sorted by RName then by Pos) into a list, when the list size reaches
            the maximum limit, write the list to file and clear the list.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSort.WriteToFile(System.Collections.Generic.SortedList{System.Object,System.String})">
            <summary>
            Creates a file in Temp folder.
            Write the data in SortedList to a file.
            Returns the filename
            </summary>
            <param name="sortedList">List to be written to file.</param>
            <returns>File name.</returns>
        </member>
        <member name="T:MBF.IO.BAM.BAMParser">
            <summary>
            A BAMParser reads from a source of binary data that is formatted according to the BAM
            file specification, and converts the data to in-memory SequenceAlignmentMap object.
            Documentation for the latest BAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser.BAMOptionalFieldPattern">
            <summary>
            Holds BAM optional field regular expression pattern.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser.BAMOptionalFieldRegex">
            <summary>
            Regular expression object for BAM optioanl field.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._readStream">
            <summary>
            Holds the BAM file stream.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._isCompressed">
            <summary>
            Flag to indicate whether the BAM file is compressed or not.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser.refSeqNames">
            <summary>
            Holds the names of the reference sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser.refSeqLengths">
            <summary>
            Holds the length of the reference sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._deCompressedStream">
            <summary>
            A temporary file stream to hold uncompressed blocks.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser.currentCompressedBlockStartPos">
            <summary>
            Holds the current position of the compressed BAM file stream.
            Used while creating BAMIndex objects from a BAM file and while parsing a BAM file using a BAM index file.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._bamIndex">
            <summary>
            Holds the bam index object created from a BAM file.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._createBamIndex">
            <summary>
            Flag to indicate to whether to create BAMIndex while parsing BAM file or not.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._isDataVirtualizationEnforced">
            <summary>
            Indicates whether data virtualization has been explictly enabled.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._filename">
            <summary>
            Name of the file being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._isReadOnly">
            <summary>
            Indicates whether the parsed sequence is read-only.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMParser._enforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            A constructor to set the encoding used.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.IsCompressedBAMFile(System.Byte[])">
            <summary>
            Returns a boolean value indicating whether a BAM file is compressed or uncompressed.
            </summary>
            <param name="array">Byte array containing first 4 bytes of a BAM file</param>
            <returns>Returns true if the specified byte array indicates that the BAM file is compressed else returns false.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.IsUnCompressedBAMFile(System.Byte[])">
            <summary>
            Returns a boolean value indicating whether a BAM file is valid uncompressed BAM file or not.
            </summary>
            <param name="array">Byte array containing first 4 bytes of a BAM file</param>
            <returns>Returns true if the specified byte array indicates a valid uncompressed BAM file else returns false.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetOptionalValue(System.Char,System.Byte[],System.Int32@)">
            <summary>
            Gets optional value depending on the valuetype.
            </summary>
            <param name="valueType">Value Type.</param>
            <param name="array">Byte array to read from.</param>
            <param name="startIndex">Start index of value in the array.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetStringLength(System.Byte[],System.Int32)">
            <summary>
            Gets the length of the string in byte array.
            </summary>
            <param name="array">Byte array which contains string.</param>
            <param name="startIndex">Start index of array from which string is stored.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetSeqChar(System.Int32)">
            <summary>
            Gets equivalent sequence char for the specified encoded value.
            </summary>
            <param name="encodedValue">Encoded value.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses specified compressed stream to out stream.
            </summary>
            <param name="compressedStream">Compressed stream to decompress.</param>
            <param name="outStream">Out stream.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Parse(System.IO.Stream)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="reader">Stream to read.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Parse(System.IO.Stream,System.Boolean)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="reader">Stream to read.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Parse(System.String)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="fileName">BAM filename to parse.</param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Parse(System.String,System.Boolean)">
            <summary>
            Returns a SequenceAlignmentMap object by parsing a BAM file.
            </summary>
            <param name="fileName">BAM filename to parse.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetIndexFromBAMFile(System.String)">
            <summary>
            Returns BAMIndex by parsing specified BAM stream.
            </summary>
            <param name="bamfilename">BAM file to read.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetIndexFromBAMFile(System.IO.Stream)">
            <summary>
            Returns BAMIndex by parsing specified BAM stream.
            </summary>
            <param name="bamStream">Stream to read.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.String)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqName">Name of reference sequence.</param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.String,System.Boolean)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqName">Name of reference sequence.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqName">Name of reference sequence.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>SequenceAlignmentMap object which contains alignments overlaps with the specified start 
            and end co-ordinate of the specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqName">Name of reference sequence.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object which contains alignments overlaps with the specified start 
            and end co-ordinate of the specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.Int32)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM filename to parse.</param>
            <param name="refSeqIndex">Index of reference sequence.</param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.Int32,System.Boolean)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqIndex">Index of reference sequence.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqIndex">Index of reference sequence.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <returns>SequenceAlignmentMap object which contains alignments overlaps with the specified start 
            and end co-ordinate of the specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Parses specified BAM file using index file.
            Index file is assumed to be in the same location as that of the specified bam file with the name "filename".bai
            For example, if the specified bam file name is D:\BAMdata\sample.bam then index file name will be taken as D:\BAMdata\sample.bam.bai
            If index file is not available then this method throw an exception.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="refSeqIndex">Index of reference sequence.</param>
            <param name="start">Start index.</param>
            <param name="end">End index.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object which contains alignments overlaps with the specified start 
            and end co-ordinate of the specified reference sequence.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,MBF.SequenceRange)">
            <summary>
            Parses specified BAM file using index file.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="range">SequenceRange object which contains reference sequence name and start and end co-ordinates.</param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence and for specified range.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseRange(System.String,MBF.SequenceRange,System.Boolean)">
            <summary>
            Parses specified BAM file using index file.
            </summary>
            <param name="fileName">BAM file name.</param>
            <param name="range">SequenceRange object which contains reference sequence name and start and end co-ordinates.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the SequenceAlignmentMap should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>SequenceAlignmentMap object which contains alignments for specified reference sequence and for specified range.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.IO.TextReader)">
            <summary>
            Always throws NotSupportedException as BAM parser does not supports reading from a text reader.
            </summary>
            <param name="reader">Text reader.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Always throws NotSupportedException as BAM parser does not supports reading from a text reader.
            </summary>
            <param name="reader">Text reader.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.String)">
            <summary>
            Parses a list of sequence alignment from a BAM file.
            </summary>
            <param name="fileName">The name of a BAM file to parse.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.MBF#IO#ISequenceAlignmentParser#Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of sequence alignment from a BAM file.
            </summary>
            <param name="fileName">The name of a BAM file to parse.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseOne(System.IO.TextReader)">
            <summary>
            Always throws NotSupportedException as BAM parser does not supports reading from a text reader.
            </summary>
            <param name="reader">Text reader.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Always throws NotSupportedException as BAM parser does not supports reading from a text reader.
            </summary>
            <param name="reader">Text reader.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseOne(System.String)">
            <summary>
            Parses a SequenceAlignmentMap from a BAM file.
            </summary>
            <param name="fileName">The name of a BAM file.</param>
            <returns>ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a SequenceAlignmentMap from a BAM file.
            </summary>
            <param name="fileName">The name of a BAM file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the sequence alignment should be in 
            readonly mode or not. If this flag is set to true then the resulting sequences's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
            <returns>ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Dispose">
            <summary>
            Disposes resources if any.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetHeader(System.IO.Stream)">
            <summary>
            Gets the SAMAlignmentHeader from the specified stream.
            Note that this method resets the specified stream to BOF before reading.
            </summary>
            <param name="bamStream">BAM file stream.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetAlignedSequence(System.Boolean)">
            <summary>
            Returns an aligned sequence by parses the BAM file.
            </summary>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence in the SAMAlignedSequence should be in 
            readonly mode or not. If this flag is set to true then the resulting sequence's 
            isReadOnly property will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing">If true disposes resourses held by this instance.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ValidateReader">
            <summary>
            Validates the BAM stream.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetHeader">
            <summary>
            Parses the BAM file and returns the Header.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ReduceChunks">
            <summary>
            Merges small chunks belongs to a bin which are in the same compressed block.
            This will reduce number of seek calls required.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GotoNextAlignedSequence">
            <summary>
            Seeks to next aligned sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.SeekUnCompressedData(System.Int32)">
            <summary>
            Seeks the uncompressed bam file.
            </summary>
            <param name="count">Number of bytes to seek.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetAlignedSequence(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an aligned sequence by parses the BAM file.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ReadUnCompressedData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads specified number of uncompressed bytes from BAM file to byte array
            </summary>
            <param name="array">Byte array to copy.</param>
            <param name="offset">Offset of Byte array from which the data has to be copied.</param>
            <param name="count">Number of bytes to copy.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetNextBlock">
            <summary>
            Gets next block by reading and decompressing the compressed block from compressed BAM file.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.GetTempStream(System.UInt32)">
            <summary>
            Gets the temp stream to store Decompressed blocks.
            If the specified capacity is with in the Maximum integer (32 bit int) limit then 
            a MemoryStream is created else a temp file is created to store Decompressed data.
            </summary>
            <param name="capacity">Required capacity.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.IsEOF">
            <summary>
            Returns a boolean indicating whether the reader is reached end of file or not.
            </summary>
            <returns>Returns true if the end of the file has been reached.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMParser.ParseAlignedSequence(MBF.IO.SequencePointer)">
            <summary>
            Parses the sequence represented by the specified sequence pointer.
            </summary>
            <param name="pointer">
            A sequence pointer which holds information about the sequence to be retrieved.
            </param>
            <returns>IAlignedSequence object.</returns>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.Alphabet">
            <summary>
            The alphabet to use for sequences in parsed SequenceAlignmentMap objects.
            Always returns DNA.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.Encoding">
            <summary>
            The encoding to use for sequences in parsed SequenceAlignmentMap objects.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.RefSequences">
            <summary>
            Reference sequences, used to resolve "=" symbol in the sequence data.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.IsDataVirtualizationEnabled">
            <summary>
            Indicates whether data virtualization is enabled or not.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMParser.EnforceDataVirtualization">
            <summary>
            Enforces data virtualization on the parser.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.StringSearch.BoyerMoore">
            <summary>
            Implements IPatternFinder interface.
            This class contains the implementation of Boyer-Moore string search algorithm.
            Reference: http://www-igm.univ-mlv.fr/~lecroq/string/node14.html
            </summary>
        </member>
        <member name="T:MBF.Algorithms.StringSearch.IPatternFinder">
            <summary>
            Interface to be implemented by the class that implement string search algorithm.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.IPatternFinder.FindMatch(MBF.ISequence,System.Collections.Generic.IList{System.String})">
            <summary>
            Find the matches for given searchStrings in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPatterns">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.IPatternFinder.FindMatch(MBF.ISequence,System.String)">
            <summary>
            Find the matches for given searchString in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="P:MBF.Algorithms.StringSearch.IPatternFinder.StartIndex">
            <summary>
            Gets or sets the Minimum start index of the match
            </summary>
        </member>
        <member name="P:MBF.Algorithms.StringSearch.IPatternFinder.IgnoreCase">
            <summary>
            Gets or sets the value indicating whether the match is case sensitive
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </summary>
        </member>
        <member name="F:MBF.Algorithms.StringSearch.BoyerMoore.Wildcard">
            <summary>
            Wildcard character
            </summary>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.FindMatch(MBF.ISequence,System.Collections.Generic.IList{System.String})">
            <summary>
            Find the matches for given searchStrings in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPatterns">Strings to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.FindMatch(MBF.ISequence,System.String)">
            <summary>
            Find the matches for given searchString in sequence and returns
            the matched strings with indices found at.
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">String to be searched.</param>
            <returns>Matches found in sequence.</returns>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.FindMismatchIndex(MBF.ISequence,System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Find the index at which mismatch occurs
            </summary>
            <param name="sequence">Input sequence.</param>
            <param name="searchPattern">String to be searched.</param>
            <param name="foundAt">current Found at index.</param>
            <param name="patternIndex">current positon in Input sequence.</param>
            <param name="patternfoundAt">Current posistion in string to be searched.</param>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.GetGoodSuffixShift(System.String)">
            <summary>
            Get the good suffix heuristics. The pattern is shifted by the longest of the 
            two distances that are given by the bad character and the good suffix heuristics.
            </summary>
            <param name="searchString">Input string.</param>
            <returns>List of good suffix shift.</returns>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.GetBadCharacterShift(System.String)">
            <summary>
            Get the bad character heuristics. The text symbol that causes a mismatch, 
            occurs somewhere else in the pattern. Then the pattern can be shifted 
            so that it is aligned to this text symbol.
            </summary>
            <param name="searchString">Input string.</param>
            <returns>List of bad character shifts.</returns>
        </member>
        <member name="M:MBF.Algorithms.StringSearch.BoyerMoore.Suffixes(System.String)">
            <summary>
            Get the good suffix from search string
            </summary>
            <param name="searchString">Input string.</param>
            <returns>Good suffixes</returns>
        </member>
        <member name="P:MBF.Algorithms.StringSearch.BoyerMoore.StartIndex">
            <summary>
            Gets or sets the Minimum start index of the match
            </summary>
        </member>
        <member name="P:MBF.Algorithms.StringSearch.BoyerMoore.IgnoreCase">
            <summary>
            Gets or sets the value indicating whether the match is case sensitive
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.MatePair">
            <summary>
            Stores mate pair information 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.MatePair._forwardRead">
            <summary>
            Stores sequence ID of forward read.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.MatePair._reverseRead">
            <summary>
            Stores sequence ID of reverse read.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name.
            </summary>
            <param name="library">Library name</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.#ctor(MBF.ISequence,MBF.ISequence,System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name,
            forward read and reverse read.
            </summary>
            <param name="forwardRead">Forward Read</param>
            <param name="reverseRead">Reverse Read</param>
            <param name="library">Library used to sequence reads</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MatePair class with specified library name,
            forward read and reverse read.
            </summary>
            <param name="forwardReadID">ID of forward read.</param>
            <param name="reverseReadID">ID of reverse read.</param>
            <param name="library">Library used to sequence reads</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.GetForwardRead(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Sequence of forward read.
            </summary>
            <param name="sequences">List of input reads.</param>
            <returns>Sequence of forwrad read.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.GetReverseRead(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Gets the Sequence of reverse read from given list.
            </summary>
            <param name="sequences">List of input reads.</param>
            <returns>Sequence of reverse read.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.Validate(System.String)">
            <summary>
            Validate library information.
            </summary>
            <param name="library">Name of library.</param>
            <returns>Is Input Valid.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.Validate(System.String,System.String,System.String)">
            <summary>
            Validates the Input.
            </summary>
            <param name="forwardReadID">ID of forward read</param>
            <param name="reverseReadID">ID of reverse read</param>
            <param name="library">Name of Library</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePair.Validate(MBF.ISequence,MBF.ISequence,System.String)">
            <summary>
            Validates the Input.
            </summary>
            <param name="forwardRead">Sequence of forward read.</param>
            <param name="reverseRead">Sequence of reverse read.</param>
            <param name="library">Name of libarary.</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="P:MBF.Algorithms.Assembly.MatePair.ForwardReadID">
            <summary>
            Gets or sets sequence of Forward Read
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.MatePair.ReverseReadID">
            <summary>
            Gets or sets sequence for Reverse Read
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.MatePair.Library">
            <summary>
            Gets and sets Name of Library
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.MatePair.MeanLengthOfLibrary">
            <summary>
            Gets mean length of Insert for Library
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.MatePair.StandardDeviationOfLibrary">
            <summary>
            Gets standard deviation of insert lengths for a library
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Graph.DeBruijnPath">
            <summary>
            Represents a path in De Bruijn graph
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnPath._path">
            <summary>
            List of node in De Bruijn graph path
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPath.#ctor">
            <summary>
            Initializes a new instance of the DeBruijnPath class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPath.#ctor(System.Collections.Generic.IEnumerable{MBF.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Initializes a new instance of the DeBruijnPath class with specified nodes.
            </summary>
            <param name="nodes">List of nodes</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPath.#ctor(MBF.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Initializes a new instance of the DeBruijnPath class with specified node.
            </summary>
            <param name="node">Graph node</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPath.RemoveAll(System.Predicate{MBF.Algorithms.Assembly.Graph.DeBruijnNode})">
            <summary>
            Removes all nodes from path that match the given predicate
            </summary>
            <param name="predicate">Predicate to remove nodes</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnPath.PathNodes">
            <summary>
            Gets the list of nodes in path
            </summary>
        </member>
        <member name="T:MBF.Web.IntRangeValidator">
            <summary>
            A validator for int values that defines an inclusive (both first and last) range of 
            allowed values.
            </summary>
        </member>
        <member name="M:MBF.Web.IntRangeValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="first">The lowest value.</param>
            <param name="last">The highest value.</param>
        </member>
        <member name="M:MBF.Web.IntRangeValidator.IsValid(System.Object)">
            <summary>
            Given an int value as an object, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:MBF.Web.IntRangeValidator.IsValid(System.String)">
            <summary>
            Given an int value as a string, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:MBF.Web.IntRangeValidator.First">
            <summary>
            The lowest allowed value.
            </summary>
        </member>
        <member name="P:MBF.Web.IntRangeValidator.Last">
            <summary>
            The highest value allowed.
            </summary>
        </member>
        <member name="T:MBF.WordMatch">
            <summary>
            WordMatch stores the region of similarity between two sequences.
            </summary>
        </member>
        <member name="F:MBF.WordMatch.length">
            <summary>
            Length of the match.
            </summary>
        </member>
        <member name="F:MBF.WordMatch.sequence1Start">
            <summary>
            Start index of the first sequence.
            </summary>
        </member>
        <member name="F:MBF.WordMatch.sequence2Start">
            <summary>
            Start index of the second sequence.
            </summary>
        </member>
        <member name="M:MBF.WordMatch.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WordMatch class.
            </summary>
            <param name="length">Length of the match</param>
            <param name="sequence1Start">Start index of the first sequence.</param>
            <param name="sequence2Start"> Start index of the second sequence.</param>
        </member>
        <member name="M:MBF.WordMatch.GetMinimalList(System.Collections.Generic.List{MBF.WordMatch},System.Int32)">
            <summary>
            Given a list of matches, reduce it to the minimal set of best
            non-overlapping matches.
            </summary>
            <param name="completeList">List of matches to reduce to non-overlapping set.</param>
            <param name="wordLength">Wordlength entered by the user.</param>
            <returns>Minimal set of best non-overlapping matches.</returns>
        </member>
        <member name="M:MBF.WordMatch.BuildMatchTable(MBF.Algorithms.Kmer.KmersOfSequence,MBF.ISequence,MBF.ISequence,System.Int32)">
            <summary>
             Create a list of all the matches and order them by the
            second sequence.
            </summary>
            <param name="kmerList">List of kmer's.</param>
            <param name="seq1">First sequence.</param>
            <param name="seq2">Second sequence.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>List of all the matches.</returns>
        </member>
        <member name="M:MBF.WordMatch.CompareTo(System.Object)">
            <summary>
            CompareTo method is used while sorting WordMatch objects. 
            </summary>
            <param name="obj">WordMatch object</param>
            <returns>
            Returns zero if the objects are equal, 
            Else, returns zero if the objects have the same length, sequence1start and sequence2Start 
            If lengths are equal, then the objects are ordered by sequence1start
            If lengths are equal and sequence1Start are equal, then the objects are ordered by 
            </returns>
        </member>
        <member name="M:MBF.WordMatch.CompareTo(MBF.WordMatch)">
            <summary>
             Compares two sequence matches so the result can be used in sorting.
            The comparison is done by size and if the size is equal, by seq1
            start position.  If the sequence1 start positions are equal they are
            sorted by sequence2 start position.
            </summary>
            <param name="other">WordMatch object</param>
            <returns>
            Returns zero if the objects have the same length, sequence1start and sequence2Start 
            If lengths are equal, then the objects are ordered by sequence1start
            If lengths are equal and sequence1Start are equal, then the objects are ordered by sequence2start
            </returns>
        </member>
        <member name="M:MBF.WordMatch.Equals(MBF.WordMatch)">
            <summary>
            Checks if another WordMatch object is equal to the current
            object.
            </summary>
            <param name="other">WordMatch object to be compared.</param>
            <returns>
            true: if the objects are equal else false.
            </returns>
        </member>
        <member name="M:MBF.WordMatch.WordDeadZone(MBF.WordMatch,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if a match is within the region which is not overlapped by the
            match starting at position (deadx1, deady1) or ending at position
            (deadx2, deady2). If it is in this region
            (the 'live zone') then true is returned, else false is returned.
            </summary>
            <param name="wordMatch">Word Match object which holds the similarity of the two sequences.</param>
            <param name="deadx1">starting x-position of the region for which overlapped has to be checked.</param>
            <param name="deady1">starting y-position of the region for which overlapped has to be checked.</param>
            <param name="deadx2">ending x-position of the region for which overlapped has to be checked.</param>
            <param name="deady2">ending y-position of the region for which overlapped has to be checked.</param>
            <param name="wordLength">Wordlength entered by the user</param>
            <returns>
            true: if the wordMatch is in the overlapped region, else false.
            </returns>
        </member>
        <member name="M:MBF.WordMatch.FindCorrespondingMatch(MBF.ISequence,MBF.Algorithms.Kmer.KmersOfSequence)">
            <summary>
            Finds the sequence in the list of IKmer and returns the list of position
            of the Kmers.
            </summary>
            <param name="sequence">Sequence which has to be matched in the list of IKmer.</param>
            <param name="kmerList">List of IKmer.</param>
            <returns>Returns the list of position of IKmer.</returns>
        </member>
        <member name="M:MBF.WordMatch.GetHashCode">
            <summary>
            Overrides hash function for a particular type.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:MBF.WordMatch.Equals(System.Object)">
            <summary>
            Overrides the equal method
            </summary>
            <param name="obj">Object to be checked</param>
            <returns>Is equals</returns>
        </member>
        <member name="M:MBF.WordMatch.op_Equality(MBF.WordMatch,MBF.WordMatch)">
            <summary>
            Override equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.WordMatch.op_Inequality(MBF.WordMatch,MBF.WordMatch)">
            <summary>
            Override not equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.WordMatch.op_LessThan(MBF.WordMatch,MBF.WordMatch)">
            <summary>
            Override less than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.WordMatch.op_GreaterThan(MBF.WordMatch,MBF.WordMatch)">
            <summary>
            Override greater than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="P:MBF.WordMatch.Length">
            <summary>
            Gets or sets the length of the match
            </summary>
        </member>
        <member name="P:MBF.WordMatch.Sequence1Start">
            <summary>
            Gets or sets the start index of the first sequence.
            </summary>
        </member>
        <member name="P:MBF.WordMatch.Sequence2Start">
            <summary>
            Gets or sets the start index of the second sequence.
            </summary>
        </member>
        <member name="P:MBF.WordMatch.Deleted">
            <summary>
            Gets or sets a value indicating whether this word match should be considered or not.
            </summary>
        </member>
        <member name="T:MBF.Util.SerialNumbers`1">
            <summary>
            Assigns serial number of objects
            </summary>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.#ctor">
            <summary>
            Create a SerialNumbers object for assigning serial numbers to values.
            </summary>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new SerialNumbers object for assign serial numbers to values and assign serial numbers to the values in the sequence.
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="F:MBF.Util.SerialNumbers`1.ItemToSerialNumber">
            !!!should this be restricted so that it cannot be changed without using the methods of the class?
             <summary>
             A mapping from items to serial numbers
             </summary>
        </member>
        <member name="F:MBF.Util.SerialNumbers`1.ItemList">
            !!!should this be restricted so that it cannot be changed without using the methods of the class?
             <summary>
             A list of the items in order.
             </summary>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.GetNewOrOld(`0)">
            <summary>
            Returns the serial number of an item. If the item has already been assigned a serial number, returns that number; 
            otherwise, assigns a new number to the item and returns that new number.
            </summary>
            <param name="item">The item</param>
            <returns>The item's serial number</returns>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.GetNew(`0)">
            <summary>
            Assigns a serial number to a new item. Raises an exception of the item is not new.
            </summary>
            <param name="item">The item</param>
            <returns>The items serial number</returns>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.GetOld(`0)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned. Raises an exception of the item is new.
            </summary>
            <param name="item">The item</param>
            <returns>The serial number of that item.</returns>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.TryGetOld(`0,System.Int32@)">
            <summary>
            Finds the serial number of item to which a serial number has already been assigned.
            </summary>
            <param name="item">The item</param>
            <param name="serialNumber">The serial number that was assigned to that item.</param>
            <returns>true if the item has previously been assigned a serial number; otherwise, false.</returns>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.GetItem(System.Int32)">
            <summary>
            Given a serialNumber, return the item with that serial number
            </summary>
            <param name="serialNumber">The serial number of interest</param>
            <returns>The item with that serial number</returns>
        </member>
        <member name="M:MBF.Util.SerialNumbers`1.Save(System.String)">
            <summary>
            Write the items in order to a file
            </summary>
        </member>
        <member name="P:MBF.Util.SerialNumbers`1.Last">
            <summary>
            The last serial number assigned.
            </summary>
        </member>
        <member name="P:MBF.Util.SerialNumbers`1.Count">
            <summary>
            The number of items to which serial numbers have been assigned. This is always one more than the largest serial number.
            </summary>
        </member>
        <member name="T:MBF.Util.RangeCollection">
            <summary>
            A set of integers. Internally, represents this set as a sequence of ranges, for example, 1-10,333-1200,1300, so if
            the integers are clumpy then RangeCollection is very fast and uses very little memory.
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor">
            <summary>
            Create an new, empty, RangeCollection.
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor(System.Int64)">
            <summary>
            Create an new RangeCollection containing a single integer.
            </summary>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Create a new RangeCollection containing the integers from a sequence.
            </summary>
            <param name="itemSequence">A sequences of integers</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a new RangeCollection containing the integers from a sequence.
            </summary>
            <param name="itemSequence">A sequences of integers</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor(System.Int64,System.Int64)">
            <summary>
            Create a new Range colllection containing all the integers in a range (inclusive)
            </summary>
            <param name="begin">The first integer to include in the RangeCollection</param>
            <param name="last">The last integer to include in the RangeCollection</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Parse(System.String)">
            <summary>
            Parses strings of the form -10--5,-2-10,12-12 . Spaces are allowed, no other characters are.
            If mergeOverlappingRanges, then, for example, 2-3,4-5 is represented
            as 2-5. Otherwise, they're maintained as separate ranges. The only difference is in the behavior of the ToString() call.
            By extension, this will change how a RangeCollection is parsed into a RangeCollectionCollection using the latter's
            GetInstance(RangeCollection) initializer.
            </summary>
            <param name="ranges">A range or the string empty. \"empty\" will return an empty range.</param>
            <returns>a new RangeCollection</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Clear">
            <summary>
            Make the set emtpy
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.Count">
            <summary>
            The number of integer elements in the RangeCollection
            </summary>
            <returns>A size of the set</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Count(System.Int64,System.Int64)">
            <summary>
            The number of integer elements in the RangeCollection between min and max (inclusive)
            </summary>
            <param name="min">The smallest integer element to consider</param>
            <param name="max">The largest integer element to consider</param>
            <returns>The number of element in between min and max (inclusive)</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Equals(System.Object)">
            <summary>
            True if and only if two RangeCollections have exactly the same elements.
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>true, if there the RangeCollections have the same elements; false, otherwise</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.GetHashCode">
            <summary>
            Two RangeCollections with exactly the same elements will have the same hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.AddRangeCollection(MBF.Util.RangeCollection)">
            <summary>
            Add the integers of one RangeCollection to this RangeCollection.
            </summary>
            <param name="rangeCollection">The RangeCollection to add</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.TryAddRangeCollection(MBF.Util.RangeCollection)">
            <summary>
            Add the integers of one RangeCollection to this RangeCollection.
            </summary>
            <param name="rangeCollection">The RangeCollection to add</param>
            <returns>true of all the elements added are new; otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.AddRanges(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a sequence of strings, each of which represents a contiguous range, add all the integers in all the ranges to this RangeCollection.
            </summary>
            <param name="rangeAsStringSequence">A sequence of strings</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.AddRange(System.String)">
            <summary>
            Given a contiguous range represented as a string, for example, "1-5", add all the integers in that range to this RangeCollection.
            </summary>
            <param name="rangeAsString">the range to add represented as a string</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.AddRange(System.Int64,System.Int64)">
            <summary>
            Add all the integers starting at 'begin' to 'last' (inclusive) to the RangeCollection. They may or may not already be in the RangeCollection.
            The number of integers added must not be more than long.MaxValue.
            </summary>
            <param name="begin">The first integer to add</param>
            <param name="last">The last integer to add</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.AddRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Add a sequence of intergers to the RangeCollection. Each may or may not already be in the RangeCollection.
            </summary>
            <param name="itemList">The sequence of integers to add</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.Add(System.Int64)">
            <summary>
            Add an integer to the RangeCollection. The integer may or may not already be in the RangeCollection.
            </summary>
            <param name="item">The integer to add.</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.TryAdd(System.Int64)">
            <summary>
            Trys to add a new element to the set.
            </summary>
            <param name="item">An integer to add</param>
            <returns>True if item was added. False if it already existed in the range.</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Contains(System.Int64)">
            <summary>
            Returns true iff item is within the ranges of this RangeCollection.
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.Contains(System.Int64,System.Int64)">
            <summary>
            Tells if all integers from start to last (inclusive) are members of this RangeCollection.
            </summary>
            <param name="start">The first integer</param>
            <param name="last">The last integer</param>
            <returns>true if all integers from start to last (inclusive) are members of this RangeCollection; otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Contains(MBF.Util.RangeCollection)">
            <summary>
            Tells if this RangeCollection is a superset of another. An an equal RangeCollection is a superset.
            </summary>
            <param name="rangeCollection">The RangeCollection that may be the subset</param>
            <returns>true, if this RangeCollection is a superset; otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.IsBetween(System.Int64,System.Int64)">
            <summary>
            Tells if every element of the RangeCollection is between low (inclusive) and high (inclusive)
            </summary>
            <param name="low">That value that every element must be at least as large as</param>
            <param name="high">The value that every element must be no learger than</param>
            <returns>true if every element is between these two values (inclusive); otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.ToString(System.String,System.String)">
            <summary>
            Returns RangeCollection as a string in the form. For example, the range collection containing 1, 2, 10, 11, and 12 returns "1-2,10-12".
            If the set is empty, returns "Empty"
            </summary>
            <param name="seperator1">The string that indicates a contiguous range. Usually "-"</param>
            <param name="separator2">The string the separates contiguous range. Usually ","</param>
            <returns>A string version of the range collection.</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.ToString">
            <summary>
            Returns RangeCollection as a string in the form. For example, the range collection containing 1, 2, 10, 11, and 12 returns "1-2,10-12".
            If the set is empty, returns "Empty"
            </summary>
            <returns>A string version of the range collection.</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.IsComplete(System.Int64)">
            <summary>
            Tells if the range collection includes all integers from 0 (inclusive) to itemCount-1 (inclusive)
            </summary>
            <param name="itemCount">The number of integers, starting at 0, expected</param>
            <returns>true if the range collection includes the itemCount integers starting at 0; otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.IsContiguous">
            <summary>
            Tells if the range collection contains a continuous set of integers.
            </summary>
            <returns>true if a continuous set; false if empty or if gaps.</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.IsComplete(System.Int64,System.Int64)">
            <summary>
            Tells if the range collection includes all integers from firstItem to lastItem (inclusive)
            </summary>
            <param name="firstItem">The first integer of interest</param>
            <param name="lastItem">The last integer of interest</param>
            <returns>true if the range collection includes all the integers between firstItem and lastItem (inclusive); otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Test">
            <summary>
            Unit tests
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.#ctor(MBF.Util.RangeCollection)">
            <summary>
            Create a RangeCollection by doing a deep copy of a RangeCollection
            </summary>
            <param name="rangeCollection">A new RangeCollection</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.ElementsAt(MBF.Util.RangeCollection)">
            <summary>
            Returns a collection of elements at what would be the i'th element for i \in rangeCollectionOfIndeces. 
            </summary>
            <param name="rangeCollectionOfIndeces">0-based indeces.</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.ElementsAt(System.Int64,System.Int64)">
            <summary>
            Returns a collection of elements at what would be the i'th element for i \in [startIdx,lastIdx]. startIdx and lastIdx are 0-based.
            </summary>
        </member>
        <member name="M:MBF.Util.RangeCollection.ElementAt(System.Int64)">
            <summary>
            Returns what would be the i'th element if each element were enumerated.
            </summary>
            <param name="i">0-based index.</param>
        </member>
        <member name="M:MBF.Util.RangeCollection.Complement(System.Int64,System.Int64)">
            <summary>
            Returns the competeCollection - thisCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.Util.RangeCollection.Equals(MBF.Util.RangeCollection)">
            <summary>
            Tests equality between two range collections
            </summary>
            <param name="rangeCollection">The range collection we're testing against</param>
            <returns>True if and only if the ranges are identical</returns>
        </member>
        <member name="P:MBF.Util.RangeCollection.RangeAsStringForXmlSerialization">
            <summary>
            Get or set a string representation of the RangeCollection suitable for XML serialization.
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.Ranges">
            <summary>
            The ranges as a sequence, for example,  1-10 then 333-1200 then 1300
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.Elements">
            <summary>
            Returns an enumeration of the integer elements in this RangeCollection.
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.FirstElement">
            <summary>
            The smallest integer in the RangeCollection.
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.LastElement">
            <summary>
            The largest integer in the RangeCollection
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.RangeCount">
            <summary>
            Returns the number of contiguous ranges in this collection. Useful for memory
            consumption debugging.
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.MaxValue">
            <summary>
            The range starting at 0 (inclusive) and going to long.MaxValue (exclusive).
            </summary>
        </member>
        <member name="P:MBF.Util.RangeCollection.IsEmpty">
            <summary>
            True if the RangeCollection contains no elements; otherwise, false.
            </summary>
        </member>
        <member name="T:MBF.Util.Perf">
            <summary>
            Performance counters
            </summary>
        </member>
        <member name="M:MBF.Util.Perf.Start(System.String)">
            <summary>
            Start the meters
            </summary>
            <param name="name">method name</param>
        </member>
        <member name="M:MBF.Util.Perf.End">
            <summary>
            End it and write into log file
            </summary>
        </member>
        <member name="T:MBF.Util.Options">
            <summary>
            A flexible options class, implemented as a dictionary that maps key strings
            to lists of one or more value strings. The static Options.Global object holds
            library-wide options.
            </summary>
        </member>
        <member name="F:MBF.Util.Options.Global">
            <summary>
            Options.Global is the storehouse for options that are effective across all
            of the MBF library. The settings can be persisted across sessions if desired.
            </summary>
        </member>
        <member name="M:MBF.Util.Options.#ctor(System.String[])">
            <summary>
            Parse one or more options strings into a dictionary, allowing multiple values per key.
            The format of options strings is flexible. One string can contain one, or more than
            one setting (separated by ';' if multiple). Each setting is either of the form 
            "key=value", or simply "key" (resulting in a null value, as does "key=".
            </summary>
            <param name="args">A variable list of options strings.</param>
        </member>
        <member name="M:MBF.Util.Options.Add(System.String,System.String)">
            <summary>
            Ensure a value is on the list for a key.
            note that this does not check for the value already being present.
            </summary>
            <param name="key">The key to add, unless already present.</param>
            <param name="val">The value to add (unconditionally).</param>
        </member>
        <member name="M:MBF.Util.Options.Set(System.String,System.String)">
            <summary>
            Like Add, but removes any existing value for the key, replacing it
            with the new, single value.
            </summary>
            <param name="key">The key to create.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:MBF.Util.Options.Get(System.String)">
            <summary>
            Return the value for the key (or an empty string if there is no value).
            This should only be called if the key is known to be single-valued; it
            will throw an exception if there are multiple values.
            </summary>
            <param name="key">The key.</param>
            <returns>The single string value, or an empty string.</returns>
        </member>
        <member name="M:MBF.Util.Options.Delete(System.String)">
            <summary>
            Delete the key and any associated values.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MBF.Util.Options.Delete(System.String,System.String)">
            <summary>
            If the key/value pair exists, delete it. Does not delete the key,
            or any other values already associated with the key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value to remove, if present.</param>
        </member>
        <member name="M:MBF.Util.Options.ToString">
            <summary>
            Turn all the options settings into a string that is human-readable,
            and can also be parsed back into an Options object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MBF.Util.DictionaryExtensions">
            <summary>
            Extension methods for IDictionary{TKey,TValue}
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.Invert``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            With throw exception if not 1-1 mapping.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.AsRestrictedAccessDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a shallow ReadOnly dictionary wrapper around the given dictionary.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.AsRestrictedAccessDictionary``2(System.Collections.Generic.IDictionary{``0,``1},MBF.Util.AccessFlags)">
            <summary>
            Creates a shallow restricted access dictionary wrapper around the given dictionary. Only access specified by the flags is allowed.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from a dictionary. If they value is not there, adds the default value to the dictionary and returns that.
            Not thread safe because it can add items to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary's key</typeparam>
            <typeparam name="TValue">The type of the dictionary's value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key of the value to retrieve.</param>
            <returns>A value for this key.</returns>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value. The default value is created by the specified constructor.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="M:MBF.Util.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Returns the value associated with key in the dictionary. If not present, adds the default value to the dictionary and returns that
            value.
            </summary>
        </member>
        <member name="T:MBF.SimpleConsensusResolver">
            <summary>
            Calculate the consensus for a list of symbols using simple frequency fraction method.
            Normal (non-gap) symbols are given a weight of 100. 
            The confidence of a symbol is the sum of weights for that symbol, 
            divided by the total number of symbols occurring at that position. 
            If symbols have confidence >= threshold, symbol corresponding 
            to set of these high confidence symbols is used.
            If no symbol meets the threshold, symbol corresponding 
            to set of all the symbols at that position is used.
            <para>
            For ambiguous symbols, the corresponding set of base symbols are retrieved.
            And for frequency calculation, each base symbol is given a weight of 
            (100 / number of base symbols).
            </para>
            </summary>
        </member>
        <member name="T:MBF.IConsensusResolver">
            <summary>
            Framework to compute the consensus for a list of symbols
            <para>
            For example, one can construct consensus for 
            a set of aligned sequences in the following way: 
            Sequence 1: A G T C G A
            Sequence 2: A G G C - A
            Sequence 3: A G G T G -
            Consensus : A G G C G A
            </para>
            <para>
            In the example here, we might choose the character that 
            occurs maximum number of times for consensus
            This means that consensus for characters at position 1: {A, A, A} is A,
            while consensus for characters at position 3: {T, G, G} is G, and so on.
            </para>
            This interface provides the framework for consensus generation. 
            Implement this interface to provide different implementations 
            for building consensus.
            </summary>
        </member>
        <member name="M:MBF.IConsensusResolver.GetConsensus(System.Collections.Generic.List{MBF.ISequenceItem})">
            <summary>
            Find consensus symbol for a list of symbols
            </summary>
            <param name="items">List of input symbols</param>
            <returns>Consensus Symbol</returns>
        </member>
        <member name="P:MBF.IConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet
            </summary>
        </member>
        <member name="M:MBF.SimpleConsensusResolver.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets user parameter threshold.
            </summary>
            <param name="threshold">Threshold Value</param>
        </member>
        <member name="M:MBF.SimpleConsensusResolver.#ctor(MBF.IAlphabet,System.Double)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet</param>
            <param name="threshold">Threshold Value</param>
        </member>
        <member name="M:MBF.SimpleConsensusResolver.#ctor(MBF.IAlphabet)">
            <summary>
            Initializes a new instance of the SimpleConsensusResolver class.
            Sets default value for threshold.
            </summary>
            <param name="seqAlphabet">Sequence Alphabet</param>
        </member>
        <member name="M:MBF.SimpleConsensusResolver.GetConsensus(System.Collections.Generic.List{MBF.ISequenceItem})">
            <summary>
            Gets consensus symbols for the input list, 
            using frequency fraction method.
            Refer class summary for more details.
            </summary>
            <param name="items">List of input symbols</param>
            <returns>Consensus Symbol</returns>
        </member>
        <member name="P:MBF.SimpleConsensusResolver.SequenceAlphabet">
            <summary>
            Gets or sets sequence alphabet
            </summary>
        </member>
        <member name="P:MBF.SimpleConsensusResolver.Threshold">
            <summary>
            Gets or sets threshold value - used when generating consensus symbol
            The confidence level for a position must equal or exceed Threshold for
            a non-gap symbol to appear in the consensus at that position.
            </summary>
        </member>
        <member name="T:MBF.Phylogenetics.Edge">
            <summary>
            Edge: a tree edge and its descendant subtree.
            Edge --> Distance/Length
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Edge.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Edge.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Edge as object</returns>
        </member>
        <member name="P:MBF.Phylogenetics.Edge.Distance">
            <summary>
            Length of a tree edge.
            </summary>
        </member>
        <member name="T:MBF.IO.Gff.GffParser">
            <summary>
            A GffParser reads from a source of text that is formatted according to the GFF flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            
            Documentation for the latest GFF file format can be found at following location under 
            Creative Commons Licence that is,
            Online content created and hosted by the Wellcome Trust Sanger Institute is,
            unless otherwise stated, licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 2.5 License.
            http://www.sanger.ac.uk/Software/formats/GFF/GFF_Spec.shtml
            </summary>
        </member>
        <member name="M:MBF.IO.Gff.GffParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.Gff.GffParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.Gff.GffParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of GFF sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method is overridden to process file-scope metadata that applies to all
            of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a GFF text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Gff.GffParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single GFF text from a reader into a sequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.Gff.GffParser.CopyMetadata(System.Boolean)">
            <summary>
            Copy file-scope metadata to all the sequences in the list.
            </summary>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
        </member>
        <member name="P:MBF.IO.Gff.GffParser.Name">
            <summary>
            Gets the type of Parser i.e GFF.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:MBF.IO.Gff.GffParser.Description">
            <summary>
            Gets the description of GFF parser.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GffParser class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.Gff.GffParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GFF file.
            </summary>
        </member>
        <member name="T:MBF.IO.Gff.GffFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GFF file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.Gff.GffFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.Gff.GffFormatter.Format(System.Collections.Generic.ICollection{MBF.ISequence},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequences to a file.
            </summary>
            <remarks>
            This method is overridden to format file-scope metadata that applies to all
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="sequences">The sequences to write</param>
            <param name="writer">the TextWriter</param>
        </member>
        <member name="M:MBF.IO.Gff.GffFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="P:MBF.IO.Gff.GffFormatter.ShouldWriteSequenceData">
            <summary>
            Whether or not sequence data will be written as part of the GFF header information;
            This property is required as GFF files normally do not contain sequence data.
            Defaults value is true.
            </summary>
        </member>
        <member name="P:MBF.IO.Gff.GffFormatter.Name">
            <summary>
            Gets the type of Formatter i.e GFF.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:MBF.IO.Gff.GffFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GFF file.
            </summary>
        </member>
        <member name="P:MBF.IO.Gff.GffFormatter.Description">
            <summary>
            Gets the description of GFF formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GffFormatter class acheives.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.TransferMessengerRNA">
            <summary>
            Transfer messenger RNA; tmRNA acts as a tRNA first, and then as an mRNA that encodes a peptide tag; 
            the ribosome translates this mRNA region of tmRNA and attaches the encoded peptide tag to the 
            C-terminus of the unfinished protein; this attached tag targets the protein for destruction or proteolysis.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.TransferMessengerRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferMessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferMessengerRNA.#ctor(System.String)">
            <summary>
            Creates new TransferMessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferMessengerRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferMessengerRNA.#ctor(MBF.IO.GenBank.TransferMessengerRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferMessengerRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferMessengerRNA.Clone">
            <summary>
            Creates a new TransferMessengerRNA that is a copy of the current TransferMessengerRNA.
            </summary>
            <returns>A new TransferMessengerRNA that is a copy of this TransferMessengerRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.TransferMessengerRNA.TagPeptide">
            <summary>
            Base location encoding the polypeptide for proteolysis tag of tmRNA and its termination codon.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.StandardFeatureMap">
            <summary>
            Class to map each standard feature key to the class which can hold that feature.
            Note that the classes which can hold feature has to be derived from FeatureItem class.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.StandardFeatureMap.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.StandardFeatureMap.GetStandardFeatureItem(MBF.IO.GenBank.FeatureItem)">
            <summary>
            Returns standard feature class instance, if the key in the specified feature item is found 
            in the map; otherwise returns the specified feature item itself.
            For example:
            If the specified feature item has the key "Gene" then this method returns instance of the Gene class
            with data copied from the specified item.
            </summary>
            <param name="item">Feature item instance to which the standard feature item instance is needed.</param>
            <returns>If found returns appropriate class instance for the specified feature item, otherwise returns 
            the specified item itself.</returns>
        </member>
        <member name="T:MBF.IO.GenBank.OperonRegion">
            <summary>
            Operon is a region containing polycistronic transcript containing genes that encode enzymes 
            that are in the same metabolic pathway and regulatory sequences.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.OperonRegion.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Operon feature item from the specified location.
            </summary>
            <param name="location">Location of the Operon.</param>
        </member>
        <member name="M:MBF.IO.GenBank.OperonRegion.#ctor(System.String)">
            <summary>
            Creates new OperonRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the OperonRegion.</param>
        </member>
        <member name="M:MBF.IO.GenBank.OperonRegion.#ctor(MBF.IO.GenBank.OperonRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Operon instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.OperonRegion.Clone">
            <summary>
            Creates a new OperonRegion that is a copy of the current OperonRegion.
            </summary>
            <returns>A new OperonRegion that is a copy of this OperonRegion.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OperonRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.Fasta.FastaParser">
            <summary>
            A FastaParser reads from a source of text that is formatted according to the FASTA flat
            file specification and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GenBank file format can be found at
            http://www.ncbi.nlm.nih.gov/blast/fasta.shtml
            
            FastaParser supports data virtualization by implementing the IVirtualSequenceParser interface.
            </summary>
        </member>
        <member name="T:MBF.IO.IVirtualSequenceParser">
            <summary>
            Interface provides Data Virtualization on the parser. If the parser wants to support
            Data Virtualization, it needs to come from this interface.
            </summary>
        </member>
        <member name="M:MBF.IO.IVirtualSequenceParser.ParseRange(System.Int32,System.Int32,MBF.IO.SequencePointer)">
            <summary>
            Parses the sequence range based on the sequence
            </summary>
            <param name="startIndex">sequence start index</param>
            <param name="count">sequence length</param>
            <param name="seqPointer">sequence pointer to a sequence</param>
            <returns>ISequence</returns>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceParser.IsDataVirtualizationEnabled">
            <summary>
            Data virtualization is enabled or not with the parser
            </summary>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceParser.EnforceDataVirtualization">
            <summary>
            Enforces data virtualization on the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.IVirtualSequenceParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size (in KBs) to enforce data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._blockSize">
            <summary>
            The block size.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._maxNumberOfBlocks">
            <summary>
            The maximum number of blocks per sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._fileName">
            <summary>
            The name of the file being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._isDataVirtualizationEnforced">
            <summary>
            Indicates whether data virtualization has been explictly enabled.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._enforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._commonSequenceParser">
            <summary>
            Behavior common to all sequence parsers.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._mbfStreamReader">
            <summary>
            A stream reader to use data virtualization on biological sequence files.
            </summary>
        </member>
        <member name="F:MBF.IO.Fasta.FastaParser._sidecarFileProvider">
            <summary>
            Holds a pointer to the sidecar file for the parsed sequence
            when data virtualization is enabled.
            </summary>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            A constructor to set the encoding used.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence texts from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence text from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseRange(System.Int32,System.Int32,MBF.IO.SequencePointer)">
            <summary>
            Parses a range of symbols starting from the specified index in the sequence.
            </summary>
            <param name="startIndex">The zero-based index at which to begin parsing.</param>
            <param name="count">The number of symbols to parse.</param>
            <param name="seqPointer">The sequence pointer of that sequence.</param>
            <returns>The parsed symbols as ASCII values.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.GetSequenceID(MBF.IO.SequencePointer)">
            <summary>
            Gets the sequence ID corresponding to the specified sequence pointer.
            </summary>
            <param name="pointer">
            A sequence pointer representing the sequence whose ID is to be retrieved.
            </param>
            <returns>The sequence ID of the specified sequence.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process the file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">MBF text reader</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single FASTA sequence from a file using MBFTextReader.
            This method is used in non-data virtualization scenarios.
            </summary>
            <param name="mbfReader">The MBFTextReader of the file to be parsed.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in read-only mode.
            If this flag is set to true then the resulting sequence's IsReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed sequence.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOneWithSpecificFormat(MBF.IO.MBFStreamReader,System.Boolean)">
            <summary>
            Parses a single FASTA sequence from a file using MBFStreamReader.
            This method is only used in data virtualization scenarios.
            </summary>
            <param name="mbfReader">The MBFStreamReader of the file to be parsed.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in read-only mode.
            If this flag is set to true then the resulting sequence's IsReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed sequence.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single sequence using a MBFTextReader.
            </summary>
            <param name="mbfReader">The MBFTextReader of the file to be parsed.</param>
            <param name="isReadOnly">Indicates whether the parsed sequence is read-only.</param>
            <returns>The parsed sequence.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.ParseOne(MBF.IO.MBFStreamReader,System.Boolean)">
            <summary>
            Parses a single sequence using a MBFStreamReader.
            This method is only used in data virtualization scenarios.
            </summary>
            <param name="mbfReader">The MBFStreamReader of the file to be parsed.</param>
            <param name="isReadOnly">Indicates whether the parsed sequence is read-only.</param>
            <returns>The parsed sequence.</returns>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Dispose">
            <summary>
            If the TextReader was opened by this object, dispose it.
            </summary>
        </member>
        <member name="M:MBF.IO.Fasta.FastaParser.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources held by this object.
            </summary>
            <param name="disposing">If disposing equals true, dispose all resources</param>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.EnforceDataVirtualization">
            <summary>
            Enforces data virtualization on the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.IsDataVirtualizationEnabled">
            <summary>
            Indicates whether data virtualization is enabled or not.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size to enable data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.  If this is not set, the alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects.  If this is not set, the default
            for the given alphabet will be used.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.Name">
            <summary>
            Gets the type of Parser i.e FASTA.
            This is intended to give developers some information 
            about parser class.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.Description">
            <summary>
            Gets the description of Fasta parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            FastaParser class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTA file.
            </summary>
        </member>
        <member name="T:MBF.DerivedSequence">
            <summary>
            DerivedSequence maintains source sequence along with changes.
            Source property provides the source sequence.
            
            This class internally maintains separate indices to keep track of the changes, this is called internal indices. 
            Count of internal indices will increase with insert of sequence items and it will decrease only when previously 
            inserted sequence items are removed.
            Note that it will not decrease if the removed item had not been inserted previously.
            
            For example:
            Consider a source sequence "AGCT". 
            
                              A G C T
            original indices  0 1 2 3 
            current indices   0 1 2 3 
            internal indices  0 1 2 3
            
            Insert sequence item "A" at position 2. This will increase the count of internal indices.
                              A G A C T
            original indices  0 1   2 3 
            current indices   0 1 2 3 4
            internal indices  0 1 2 3 4
            
            Remove item at position 1. This will not decrease the count of internal indices.
                              A G A C T
            original indices  0 1   2 3 
            current indices   0   1 2 3
            internal indices  0 1 2 3 4
            
            Remove item at position 1 which was previously inserted. This will reduce the count of interal indices.
            
                              A G C T
            original indices  0 1 2 3                  
            current indices   0   1 2 
            internal indices  0 1 2 3 
            </summary>
        </member>
        <member name="F:MBF.DerivedSequence._source">
            <summary>
            Holds original sequence.
            </summary>
        </member>
        <member name="F:MBF.DerivedSequence._updatedItems">
            <summary>
            Holds changes made to this DerivedSequence.
            </summary>
        </member>
        <member name="F:MBF.DerivedSequence._mapToAlphabet">
            <summary>
            Holds Mapping from Encoding to Alphabet.
            </summary>
        </member>
        <member name="M:MBF.DerivedSequence.#ctor(MBF.DerivedSequence)">
            <summary>
            Constructor for clone method.
            </summary>
            <param name="otherDerivedSequence">otherDerivedSequence to clone.</param>
        </member>
        <member name="M:MBF.DerivedSequence.#ctor(MBF.ISequence)">
            <summary>
            Creates DerivedSequence from the specified source sequence.
            </summary>
            <param name="source">source sequence.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new DerivedSequence that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetUpdatedItems">
            <summary>
            Returns the changes made to the derived sequence as a list of IndexedItem&lt;UpdatedSequenceItem&gt;.
            Note that this method returns internal indices and not the current indices. 
            In case of insert and replace operations UpdatedSequenceItem will contain sequence item which 
            was inserted or replaced. For remove operation it will contain removed sequence item.
            </summary>
            <returns>List of IndexedItem&lt;UpdatedSequenceItem&gt;.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetAllRemovedItemsCount">
            <summary>
            Returns count of removed items.
            </summary>
            <returns>Total number of removed items.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetAllInsertedItemsCount">
            <summary>
            Returns total number of inserted items.
            </summary>
            <returns>Total number of inserted items.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetRemovedItemsCount(System.Int32)">
            <summary>
            Returns removed items from zero to specified index (including specified index).
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns count of removed items.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetInsertedItemsCount(System.Int32)">
            <summary>
            Returns inserted items from zero to specified index (excluding specified index).
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns count of inserted items.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.UpdatePositions(System.Int32,System.Int32)">
            <summary>
            Updates indices of items which is greater than or equal to the specified index
            with the specified value.
            </summary>
            <param name="index">Index from which update has to be done.</param>
            <param name="value">Value with which positions have to be updated.</param>
        </member>
        <member name="M:MBF.DerivedSequence.GetInternalIndex(System.Int32)">
            <summary>
            Gets the internal index for the specified index.
            </summary>
            <param name="index">Index for which the internal index is required.</param>
            <returns>Returns internal index for specified index.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetItem(System.Int32)">
            <summary>
            Gets the item present at specified index.
            </summary>
            <param name="index">index at which the sequence item is required.</param>
            <returns>Sequence item present at specified index.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetItemFromSource(System.Int32)">
            <summary>
            Gets the sequence item present at specified internal index.
            </summary>
            <param name="internalIndex">Internal index.</param>
            <returns>Returns sequence item.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Converts the specified character to a sequence item and insert at the specified index.
            </summary>
            <param name="index">Index at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:MBF.DerivedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Converts each character in the specified sequence string to sequence items
            and inserts them to the specified index. 
            </summary>
            <param name="index">Index at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.DerivedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified index.
            </summary>
            <param name="index">Index from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified index in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="index">Index at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified index in this sequence with the specified sequence item. 
            </summary>
            <param name="index">Index at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:MBF.DerivedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence items present in the specified index with the specified sequence item.
            </summary>
            <param name="index">Index from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.DerivedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new DerivedSequence that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.DerivedSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns the index of first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item of which the index is required.</param>
            <returns>If found returns zero based index of first occurance of the specified sequence item else returns -1.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified index in this sequence.
            </summary>
            <param name="index">Index at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:MBF.DerivedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence item present in the specified index.
            </summary>
            <param name="index">Index at which the sequence item has to be removed.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Clear">
            <summary>
            Clears the changes made to this sequence.
            Note that this method will not clear the source sequence.
            </summary>
        </member>
        <member name="M:MBF.DerivedSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.DerivedSequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new DerivedSequence that is a copy of the current DerivedSequence.
            </summary>
            <returns>A new object that is a copy of this DerivedSequence.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.DerivedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the DerivedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.DerivedSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.DerivedSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="M:MBF.DerivedSequence.GetSymbolSafeISequenceItem(MBF.ISequenceItem)">
            <summary>
            Get the sequence item converted from Encoding to Alphabet
            </summary>
            <param name="item">Sequence item to veify.</param>
        </member>
        <member name="P:MBF.DerivedSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Encoding">
            <summary>
            The encoding being used to store sequence items in the source sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.MapToAlphabet">
            <summary>
            Gets the mappring from Encoding to Alphabet.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Source">
            <summary>
            Gets source sequence specified while creating this instance.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Alphabet">
            <summary>
            Gets the alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.MoleculeType">
            <summary>
            Gets the molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Metadata">
            <summary>
            Gets the metadata of the source sequence.
            Note that changing the metadata will change the metadata of source sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Documentation">
            <summary>
            Gets or sets the documentation of source sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Returns sequence item present at specified index.</returns>
        </member>
        <member name="P:MBF.DerivedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            </summary>
        </member>
        <member name="P:MBF.DerivedSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.CompoundNucleotide">
            <summary>
            CompoundNucleotide supports, storing more than one nucletides with their weight in one base entry.
            For example,
             Consider the below sequence where {G|A} could have statistical values of 30% and 65% and
             {C|G|T} could have 30% each (they dont necessarily have to sum upto 100)
                GATTAGAGCTA
                     A  G
                        T
            Above sequence items {G|A} and {C|G|T} can be represented in compound sequence items like, 
            GATTARAGBTA
             Where “R” and “B” are CompoundNucleotides.
            CompoundNucleotide R will contain nucleotides G and A with their weights.
            CompoundNucleotide B will contain nucleotides C, G and T with their weights.
            
            This class can be used in SparseSequence.
            </summary>
        </member>
        <member name="T:MBF.ICompoundSequenceItem">
            <summary>
            ICompoundSequenceItem used to represent posibility of various sequence item in a base entry.
            Classes which implements this interface can store more than one sequence items with their 
            weights in one base entry.
            
            For examples of implementations of this interface see the CompoundNucleotide 
            and CompoundAminoAcid classes.
            </summary>
        </member>
        <member name="M:MBF.ICompoundSequenceItem.GetWeight(MBF.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:MBF.ICompoundSequenceItem.SetWeight(MBF.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">Weight of the item.</param>
        </member>
        <member name="M:MBF.ICompoundSequenceItem.Add(MBF.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:MBF.ICompoundSequenceItem.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:MBF.ICompoundSequenceItem.Clone">
            <summary>
            Creates a new ICompoundSequenceItem that is a copy of the current ICompoundSequenceItem.
            </summary>
            <returns>A new ICompoundSequenceItem that is a copy of this ICompoundSequenceItem.</returns>     
        </member>
        <member name="P:MBF.ICompoundSequenceItem.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundNucleotide.
            </summary>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Char,System.String)">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Char,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundNucleotide</param>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundNucleotide representation based on its data. CompoundNucleotide
            not defined for encoding will not have a byte Value field set, so
            this constructor automatically sets that field to zero.
            </summary>
            <param name="symbol">A symbol representing the CompoundNucleotide</param>
            <param name="name">A readable name for the CompoundNucleotide</param>
            <param name="isGap">Indicates if this is a gap CompoundNucleotide</param>
            <param name="isAmbiguous">Indicates if this is an ambigous CompoundNucleotide</param>
            <param name="nucleotides">List of nucleoties.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.GetWeight(MBF.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:MBF.CompoundNucleotide.SetWeight(MBF.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">New weight for the item.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.Add(MBF.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:MBF.CompoundNucleotide.MBF#ICompoundSequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:MBF.CompoundNucleotide.MBF#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:MBF.CompoundNucleotide.Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="M:MBF.CompoundNucleotide.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Method for serializing the SparseSequence.
             </summary>
             <param name="info">Serialization Info.</param>
             <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.CompoundNucleotide.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="P:MBF.CompoundNucleotide.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundNucleotide.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Translation.ProteinTranslation">
            <summary>
            Provides the means of translating an RNA sequence into an Protein
            sequence of amino acids.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.ProteinTranslation.Translate(MBF.ISequence)">
            <summary>
            Translates the RNA sequence passed in as source into a Protein
            sequence of amino acids. Works on the entire source sequence
            starting from the first triplet of nucleotides.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.ProteinTranslation.Translate(MBF.ISequence,System.Int32)">
            <summary>
            Translates the RNA sequence passed in as a source into a Protein
            sequence of amino acids. Allows the setting of a particular index
            into the source sequence for the start of translation.
            
            For instance if you wanted to translate all the phases of an RNA
            sequence you could perform the following:
            
            Sequence rnaSeq = new Sequence(Alphabets.RNA), "AUGCGCCCG");
            Sequence phase1 = ProteinTranslation.Translate(rnaSeq, 0);
            Sequence phase2 = ProteinTranslation.Translate(rnaSeq, 1);
            Sequence phase3 = ProteinTranslation.Translate(rnaSeq, 2);
            </summary>
            <param name="source">The source RNA sequence to translate from</param>
            <param name="nucleotideOffset">
            An offset into the source sequence from which to begin translation.
            Note that this offset begins counting from 0. Set this parameter to
            0 to translate the entire source sequence. Set it to 1 to ignore the
            first nucleotide in the source sequence, etc.
            </param>
            <returns></returns>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.SequenceSuffixTree">
            <summary>
            Implementation of ISuffixTree
                Represents a Suffix Tree object
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.ISuffixTree">
            <summary>
            This interface defines the contract that has to be implemented by and class implementing suffix tree.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.ISuffixTree.Sequence">
            <summary>
            Gets sequence of Suffix Tree.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SequenceSuffixTree._edges">
            <summary>
            List of Edges in Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SequenceSuffixTree._sequence">
            <summary>
            Sequence of Suffix Tree
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SequenceSuffixTree.#ctor(MBF.ISequence)">
            <summary>
            Initializes a new instance of the SuffixTree class
            </summary>
            <param name="sequence">Input sequence</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SequenceSuffixTree.#ctor(MBF.ISequence,System.Int32)">
            <summary>
            Initializes a new instance of the SuffixTree class
            </summary>
            <param name="sequence">Input sequence</param>
            <param name="capacity">Required capacity.</param>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.SequenceSuffixTree.Edges">
            <summary>
            Gets list of Edges in Suffix Tree
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.SequenceSuffixTree.Sequence">
            <summary>
            Gets sequence of Suffix Tree
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.NUCmer">
            <summary>
            NUCmer is a system for rapidly aligning entire genomes or very large DNA
            sequences. It allows alignment of multiple reference sequences to multiple query sequences.
            This is commonly used to identify the position and orientation of set of sequence
            contigs in relation to finished sequence.
            NUCmer is the base abstract class which defines the contract for classes 
            implementing NUCmer algorithm. Using Template Method Pattern, NUCmer defines 
            the skeleton of the NUCmer algorithm and deferring some steps to derived class. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer.DefaultLengthOfMUM">
            <summary>
            Default minimum length of Matches to be searched in streaming process
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer.DefaultGapOpenCost">
            <summary>
            Default gap open penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer.DefaultGapExtensionCost">
            <summary>
            Default gap extension penalty for use in alignment algorithms
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer.ReferenceSequence">
            <summary>
            Represents reference sequences
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer.QuerySequence">
            <summary>
            Represents query sequences
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer._referenceSequence">
            <summary>
            Holds the reference sequence.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer._suffixTree">
            <summary>
            Holds a reference Suffix tree.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer._mumList">
            <summary>
            List of maximal unique matches.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer._clusterList">
            <summary>
            List of clusters
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.#ctor">
            <summary>
            Initializes a new instance of the NUCmer class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.MBF#Algorithms#Alignment#ISequenceAligner#AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the list of input sequences using linear gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment object</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.AlignSimple(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the list of input sequences using linear gap model.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment object</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.AlignSimple(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the reference sequence and query sequences using linear gap model.
            </summary>
            <param name="referenceSequenceList">List of reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignment object</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.MBF#Algorithms#Alignment#ISequenceAligner#Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.Align(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Align the set of input sequences using the affine gap model 
            (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="inputSequences">The sequences to align.</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.Align(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
             Align the reference sequence with query sequences using the affine gap model 
             (gap open and gap extension penalties)
            and returns the best alignment found.
            </summary>
            <param name="referenceSequenceList">Reference sequence</param>
            <param name="querySequenceList">List of query sequence</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.ConcatSequence(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Concatenate all the sequences into one sequence with special character.
            </summary>
            <param name="sequences">list of reference sequence</param>
            <returns>concatenated sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">Reference sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.Streaming(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,MBF.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of matches
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="referenceSequence">Reference seqeunce</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of matches</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.GetClusters(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Get the list of clusters from list of MUMs
            </summary>
            <param name="mumList">List of maximum unique matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.ProcessCluster(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.Algorithms.Alignment.Cluster})">
            <summary>
            Process clusters and get delta (compact representation of alignment)
            </summary>
            <param name="referenceSequenceList">List of reference sequences</param>
            <param name="clusters">List of clusters</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.ConvertDeltaToAlignment(System.Collections.Generic.IList{MBF.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Convert list of Delta alignments to Sequence alignment
            </summary>
            <param name="alignments">List of delta alignment</param>
            <returns>A list of sequence alignment.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.CalculateScore(MBF.ISequence,MBF.ISequence)">
            <summary>
            Calculate the score of alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Score of the alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.MakeConsensus(MBF.ISequence,MBF.ISequence)">
            <summary>
            Analyze the given seqquences and store a consensus into its Consensus property.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Consensus of sequences</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.DetermineSequence(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Determine the reference sequence and query sequences from list of input sequences.
            </summary>
            <param name="inputSequences">Sequences needs to be aligned</param>
            <returns>A list of sequence alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.Alignment(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            This method is considered as main execute method which defines the
            step by step algorithm. Drived class flows the defined flow by this
            method.
            </summary>
            <param name="referenceSequenceList">reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>A list of sequence alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.Validate(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Validate the inputs
            </summary>
            <param name="referenceSequenceList">list of reference sequence</param>
            <param name="querySequenceList">list of input sequences</param>
            <returns>Are inputs valid</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer.ValidateSequenceList(System.Collections.Generic.IList{MBF.ISequence},MBF.IAlphabet,System.String)">
            <summary>
            Validate the list of sequences
            </summary>
            <param name="sequenceList">List of sequence</param>
            <param name="alphabetSet">Alphabet set</param>
            <param name="sequenceType">Type of sequence</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.Name">
            <summary>
            Gets the name of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact name of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.Description">
            <summary>
            Gets the description of the Aligner. Intended to be filled in 
            by classes deriving from DynamicProgrammingPairwiseAligner class
            with the exact details of the Alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.LengthOfMUM">
            <summary>
            Gets or sets minimum length of Match that can be considered as MUM.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.ReferenceSequenceNumber">
            <summary>
            Gets or sets the id of reference sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a linear gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a linear gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.BreakLength">
            <summary>
            Gets or sets number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.FixedSeparation">
            <summary>
            Gets or sets maximum fixed diagonal difference
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.MaximumSeparation">
            <summary>
            Gets or sets maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.MinimumScore">
            <summary>
            Gets or sets minimum output score
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.SeparationFactor">
            <summary>
            Gets or sets separation factor. Fraction equal to 
            (diagonal difference / match separation) where higher values
            increase the insertion or deletion (indel) tolerance
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer.IsAlign">
            <summary>
            Gets or sets a value indicating whether to run Align or AlignSimple
            </summary>
        </member>
        <member name="M:MBF.SimilarityMatrices.BasicSmEncoding.#ctor(System.String,System.String,MBF.MoleculeType)">
            <summary>
            Sets up a basic encoding for use with similarity matrices.
            Because this encoding is only used to correlate the ordering of the similarity matrix
            with the sequence encoding, the HasGaps, HasAmbiguity and HasTerminations properties
            will not be used, and don't have to be specified.
            </summary>
            <param name="symbols">
            Symbols in the encoding, in order.  These will map to values using zero based indexing.
            The symbols string must contain only the symbols, no whitespace or other delimiters.
            The symbols string should be upper case -- if not, the symbols will be converted to
            upper case before creating the encoding.
            </param>
            <param name="name">Name of the encoding.</param>
            <param name="moleculeType">Type of molecule, must be DNA, RNA, NA or Protein</param>
        </member>
        <member name="M:MBF.SimilarityMatrices.BasicSmEncoding.GetComplement(System.Byte)">
            <summary>
            This method is not supported
            </summary>        
        </member>
        <member name="M:MBF.SimilarityMatrices.BasicSmEncoding.Encode(System.String)">
            <summary>
            This method is not supported
            </summary>
        </member>
        <member name="M:MBF.SimilarityMatrices.BasicSmEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Return true if item.symbol is in the encoding, otherwise false.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <remarks>
            Note that the Value or Name property, or other properties (even including object type)
            may be different.  This method is primarily useful to see if a symbol in a sequence
            is in the encoding in some form or other.
            </remarks>
        </member>
        <member name="T:MBF.Matrix.SparseMatrix`3">
            <summary>
            A matrix that internally represents only non-missing values. If most possible values are missing
            this saves memory. The trade off is that access is O(log(RowKeyCount)*log(ColKeyCount)) instead of being constant
            like the fastest dense methods.
            </summary>
            <typeparam name="TRowKey"></typeparam>
            <typeparam name="TColKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:MBF.Matrix.SparseMatrix`3.CreateEmptyInstance(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Create SparseMatrix with all missing values.
            </summary>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special value that represents missing</param>
            <returns>The empty SparseMatrix created.</returns>
        </member>
        <member name="M:MBF.Matrix.SparseMatrix`3.TryParseSparseFile(System.String,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@)">
            <summary>
            Tries to parse a file in sparse format and creates a SpareMatrix
            </summary>
            <param name="filename">The sparse file</param>
            <param name="missingValue">The special value that represents missing in the SparseMatrix</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The resulting matrix</param>
            <returns>true, if the file can be parsed; false, otherwise.</returns>
        </member>
        <member name="M:MBF.Matrix.SparseMatrix`3.TryParseSparseFile(System.IO.TextReader,`2,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{`0,`1,`2}@)">
            <summary>
            Tries to parse a sparse textReader and creates a SpareMatrix
            </summary>
            <param name="textReader">The textReader stream in the sparse format</param>
            <param name="missingValue">The special value that represents missing in the SparseMatrix</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="matrix">The resulting matrix</param>
            <returns>true, if the textReader can be parsed; false, otherwise.</returns>
        </member>
        <member name="T:MBF.Matrix.SparseMatrixExtensions">
            <summary>
            Extension methods on Matrix related to DenseAnsi.
            </summary>
        </member>
        <member name="M:MBF.Matrix.SparseMatrixExtensions.AsSparseMatrix``3(MBF.Matrix.Matrix{``0,``1,``2})">
            <summary>
            Converts matrix to a SparseMatrix. If matrix is already a SparseMatrix, then returns the given matrix without copying. 
            </summary>
            <param name="inputMatrix">The matrix to convert from</param>
            <returns>A SparseMatrix version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.SparseMatrixExtensions.ToSparseMatrix``3(MBF.Matrix.Matrix{``0,``1,``2})">
            <summary>
            Converts matrix to a SparseMatrix. Even if the matrix is already an SparseMatrix, a new one is created.. 
            </summary>
            <param name="matrix">The matrix to convert from</param>
            <returns>A SparseMatrix version of the matrix</returns>
        </member>
        <member name="T:MBF.IO.SAM.SAMAlignedSequence">
            <summary>
            Class to hold Reads or aligned sequence or query sequence in SAM Alignment.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequence._seqHeader">
            <summary>
            SAM aligned sequence header.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequence._metadata">
            <summary>
            Holds metadata of this aligned sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequence._sequences">
            <summary>
            Holds aligned sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequence.#ctor">
            <summary>
            Creates new instance of SAMAlignedSequence.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequence.#ctor(MBF.IO.SAM.SAMAlignedSequenceHeader)">
            <summary>
            Creates new instance of SAMAlignedSequence with specified SAMAlignedSequenceHeader.
            </summary>
            <param name="seqHeader"></param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequence.GetQualityValues">
            <summary>
            Gets quality values.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SAMAlignedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.QuerySequence">
            <summary>
            Gets or sets read/query/aligned sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.QName">
            <summary>
            Query pair name if paired; or Query name if unpaired.
            </summary>  
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.Flag">
            <summary>
            SAM flags.
            <see cref="T:MBF.IO.SAM.SAMFlags"/>
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.RName">
            <summary>
            Reference sequence name.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.Pos">
            <summary>
            One-based leftmost position/coordinate of the clipped sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.Bin">
            <summary>
            Gets bin depending on POS and CIGAR values.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.QueryLength">
            <summary>
            Gets Query length depending on CIGAR value.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.MapQ">
            <summary>
            Mapping quality (phred-scaled posterior probability that the 
            mapping position of this read is incorrect).
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.CIGAR">
            <summary>
            Extended CIGAR string.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.MRNM">
            <summary>
            Mate reference sequence name. 
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.MPos">
            <summary>
            One-based leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.ISize">
            <summary>
            Inferred insert size.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.DotSymbolIndexes">
            <summary>
            Contains the list of indices of "." symbols present in the aligned sequence.
            As "." is not supported by DNA, RNA and Protien alphabets, while creating aligned 
            sequence "." symbols are replaced by "N" which has the same meaning of ".".
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.EqualSymbolIndexes">
            <summary>
            Contains the list of "=" symbol indices present in the aligned sequence.
            The "=" symbol in aligned sequence indicates that the symbol at this index 
            is equal to the symbol present in the reference sequence. As "=" is not 
            supported by DNA, RNA and Protien alphabets, while creating aligned 
            sequence "=" symbols are replaced by the symbol present in the reference 
            sequence at the same index.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.OptionalFields">
            <summary>
            Optional fields.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.Metadata">
            <summary>
            Metadata of this aligned sequence.
            SAMAlignedSequenceHeader is stored with the key "SAMAlignedSequenceHeader".
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequence.Sequences">
            <summary>
            Always returns QuerySequence in a list.
            </summary>
        </member>
        <member name="T:MBF.IO.CommonSequenceParser">
            <summary>
            This is a class that provides some basic operations common to sequence
            parsers. It is meant to be used as private member inside the parser implementations
            if the implementer wants to make use of some common behavior across parsers.
            </summary>
        </member>
        <member name="F:MBF.IO.CommonSequenceParser._distinctSymbols">
            <summary>
            Holds distinct symbols while parsing the sequence, used to 
            identify alphabet for the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.IdentifyAlphabet(MBF.IAlphabet,System.String)">
            <summary>
            Identifies Alphabet for the sepecified sequence.
            </summary>
            <param name="currentAlphabet">Currently known alphabet of the sequence, null if alphabet is unknown.</param>
            <param name="sequence">Sequence data.</param>
            <returns>Returns appropriate alphabet for the specified sequence and considering the specified current alphabet. 
            Returns null if any character in the sequence is unrecognized by DNA, RNA and Protien Alphabets.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.GetMoleculeType(System.String)">
            <summary>
            Maps the string to a particular Molecule type and returns
            the instance of mapped molecule type.
            </summary>
            <param name="type">The molecule type.</param>
            <returns>Returns the appropriate molecule type for the specified string.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.GetMoleculeType(MBF.IAlphabet)">
            <summary>
            Returns Molecule type depending on the specified alphabet.
            </summary>
            <param name="alphabet">Alphabet.</param>
            <returns>Returns molecule type.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.GetAlphabet(MBF.MoleculeType)">
            <summary>
            Returns the alphabet depending on the specified molecule type.
            </summary>
            <param name="moleculeType">Molecule type.</param>
            <returns>IAlphabet instance.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.StartCheckFromDna">
            <summary>
            Returns Dna alphabet if all the symbols in distinctSymbols are 
            known by Dna alphabet else it continue to verify with Rna alpabet by 
            calling StartCheckFromRna method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.StartCheckFromRna">
            <summary>
            Returns Rna alphabet if all the symbols in distinctSymbols are 
            known by Rna alphabet else it continue to verify with Protein alpabet by 
            calling StartCheckFromProtein method.
            </summary>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.StartCheckFromProtein">
            <summary>
            Returns Protein alphabet if all the symbols in distinctSymbols are 
            known by protein alphabet else returns null.
            </summary>
            <returns>If all symbols in distinctSymbols are known by protein alphabet 
            then returns protein Alphabet else returns null.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.IsDnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Dna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.IsRnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Rna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.IO.CommonSequenceParser.IsProteinAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Protein.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="T:MBF.CacheBox`1">
            <summary>
            Cache manager for Data Virtualization. 
            Single block of data of type "T" is wrapped in CacheBox and 
            the blocks are maintained with last access time
            </summary>
            <typeparam name="T">Type of object to be cached.</typeparam>
        </member>
        <member name="F:MBF.CacheBox`1._blockSize">
            <summary>
            Size of a single block.
            </summary>
        </member>
        <member name="M:MBF.CacheBox`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the CacheBox class 
            </summary>
        </member>
        <member name="M:MBF.CacheBox`1.Touch">
            <summary>
            Update last access time
            </summary>
        </member>
        <member name="P:MBF.CacheBox`1.StartRange">
            <summary>
            Gets or sets block starting range
            </summary>
        </member>
        <member name="P:MBF.CacheBox`1.EndRange">
            <summary>
            Gets or sets block ending range
            </summary>
        </member>
        <member name="P:MBF.CacheBox`1.BlockSize">
            <summary>
            Gets block size.
            </summary>
        </member>
        <member name="P:MBF.CacheBox`1.LastAccessTime">
            <summary>
            Gets or sets last access time
            </summary>
        </member>
        <member name="P:MBF.CacheBox`1.Data">
            <summary>
            Gets or sets block of data
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap">
            <summary>
            Class stores multiple mapping between reads and a contig.
                -------------------         Read Sequence
            ------------------------------  Contig Sequence [Full Overlap]
                          ----------------  Contig Sequence [Partial Overlap]
            The Class stores 
            Key: Sequence Id of Read 
            Value
                Key: Sequence of Contig
                Value: List of position of Overlaps of contig with read.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap.#ctor">
            <summary>
            Initializes a new instance of the ReadContigMap class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ReadContigMap class. 
            Used for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap.#ctor(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Initializes a new instance of the ReadContigMap class with specified reads.
            </summary>
            <param name="reads">List of reads.</param>
        </member>
        <member name="T:MBF.CloneLibrary">
            <summary>
            Class created for reading data from resource file having library information.
            Singleton design pattern is used to create only one instance of class. 
            </summary>
        </member>
        <member name="F:MBF.CloneLibrary._instance">
            <summary>
            Private Instance
            </summary>
        </member>
        <member name="F:MBF.CloneLibrary.lockobj">
            <summary>
            object to use for lock.
            </summary>
        </member>
        <member name="F:MBF.CloneLibrary._libraries">
            <summary>
            List of Information about Clone libraries
            Duplicate libraries not allowed.
            </summary>
        </member>
        <member name="M:MBF.CloneLibrary.#ctor">
            <summary>
            Prevents a default instance of the CloneLibrary class from being created.
            Initializes a instance of the CloneLibrary class.
            </summary>
        </member>
        <member name="M:MBF.CloneLibrary.GetLibraryInformation(System.String)">
            <summary>
            Returns information about Library
            </summary>
            <param name="libraryName"> Name of Library</param>
            <returns>Struct containing Information about Library</returns>
        </member>
        <member name="M:MBF.CloneLibrary.AddLibrary(MBF.CloneLibraryInformation)">
            <summary>
            Add Library to existing list of libraries.
            </summary>
            <param name="library">Libarary information.</param>
        </member>
        <member name="M:MBF.CloneLibrary.AddLibrary(System.String,System.Single,System.Single)">
            <summary>
            Add Library to existing list of libraries.
            </summary>
            <param name="libraryName">Name of Library.</param>
            <param name="mean">Mean Length Of Insert.</param>
            <param name="standardDeviation">Standard Deviation Of Insert.</param>
        </member>
        <member name="M:MBF.CloneLibrary.ReadLibrary">
            <summary>
            Read Libraries from file
            </summary>
        </member>
        <member name="M:MBF.CloneLibrary.Parse(System.String)">
            <summary>
            Parse Library and convert parsed data into structure
            </summary>
            <param name="library">Name of Library</param>
        </member>
        <member name="P:MBF.CloneLibrary.GetLibraries">
            <summary>
            Gets the information about libraries.
            </summary>
        </member>
        <member name="P:MBF.CloneLibrary.Instance">
            <summary>
            Gets an instance of this class.
            Property to make sure only one Instance of this class is created
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastParameters">
            <summary>
            The parameter collection for the NCBI BLAST web service. Consists of a static set of
            allowed parameters and validation methods, and a collection of parameter/value
            pairs that have been validated and added to the instance.
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastParameters._parameters">
            <summary>
            List of request parameter
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastParameters._settings">
            <summary>
            List of configuration settings
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastParameters.#cctor">
            <summary>
            Initializes static members of the BlastParameters class.
            The static constructor defines the initial set of allowed parameters and values.
            </summary>
            <remarks>
            The following QBLAST parameters are not implemented, as they aren't applicable to
            the BLAST usage supported by this library (often because they aren't available in
            the XML BLAST results):
            ALIGNMENT_VIEW
            AUTO_FORMAT
            DESCRIPTIONS
            ENDPOINTS
            ENTREZ_LINKS_NEW_WINDOW
            FORMAT_ENTREZ_QUERY
            LAYOUT
            OTHER_ADVANCED
            PAGE
            QUERY_FILE
            RESULTS_FILE
            SHOW_OVERVIEW
            FORMAT_OBJECT
            NOHEADER
            NCBI_GI
            </remarks>
        </member>
        <member name="M:MBF.Web.Blast.BlastParameters.AddIfAbsent(System.String,System.String)">
            <summary>
            Adds parameters to the settings if they are not present.
            Note that this method does validation of paramters before adding.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterValue">The parameter value</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastParameters.Add(System.String,System.String)">
            <summary>
            Validate a parameter/value pair, and add them to Settings,
            replacing any value already present for that parameter.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterValue">The parameter value</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastParameters.Add(System.String,System.String,System.Boolean)">
            <summary>
            Validate a parameter/value pair, then add it to the Settings collection. 
            The overwrite value determines whether the new value can overwrite an
            existing value for the same parameter.
            </summary>
            <param name="paramName">The parameter to set</param>
            <param name="paramValue">The parameter value</param>
            <param name="overwrite">If true, overwrite any existing value.</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastParameters.Parameters">
            <summary>
            Gets the various parameters required for a BLAST service and the
            possible values for those parameters.
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastParameters.Settings">
            <summary>
            Gets or sets settings is the collection of parameter/value pairs that
            have been validated and added to this instance. 
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastXmlParser">
            <summary>
            Parse text containing XML BLAST results into a list
            of SequenceSearchRecord objects.
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.IBlastParser">
            <summary>
            This interface defines the contract that has to be implemented by a class
            that parse an output from blast service.
            Blast service can be in different format e.g., text / xml
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.IBlastParser.Parse(System.IO.TextReader)">
            <summary>
            Read BLAST data from the reader, and build one or more BlastRecordGroup 
            objects (each containing one or more BlastSearchRecord results).
            </summary>
            <param name="reader">Blast data source</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlParser.ParseXML(System.Text.StringBuilder)">
            <summary>
            This method expects a single XML document and returns one BlastResult.
            </summary>
            <param name="doc">A Stringbuilder containing the XML document.</param>
            <returns>The BlastResult.</returns>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlParser.Parse(System.IO.TextReader)">
            <summary>
            Read XML BLAST data from the reader, and build one or more
            BlastRecordGroup objects (each containing one or more
            BlastSearchRecord results).
            </summary>
            <param name="reader">The text source</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlParser.Parse(System.String)">
            <summary>
            Read XML BLAST data from the specified file, and build one or more
            BlastRecordGroup objects (each containing one or more
            BlastSearchRecord results).
            </summary>
            <param name="fileName">The name of the file</param>
            <returns>A list of BLAST iteration objects</returns>
        </member>
        <member name="T:MBF.Web.Blast.BlastXmlMetadata">
            <summary>
            Container for the Output segment of the XML BLAST format. This
            contains metadata for the search.
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlMetadata.#ctor">
            <summary>
            Default Constructor: Initializes an instance of class BlastXmlMetadata
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlMetadata.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastXmlMetadata.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.Program">
            <summary>
            The name of the program invoked (blastp, etc.)
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.Version">
            <summary>
            The BLAST version
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.Reference">
            <summary>
            Literature reference for BLAST (always the same)
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.Database">
            <summary>
            The database(s) searched
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.QueryId">
            <summary>
            The query identifier defined by the service
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.QueryDefinition">
            <summary>
            The query definition line (if any)
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.QueryLength">
            <summary>
            The length of the query sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.QuerySequence">
            <summary>
            The query sequence (optional, may not be returned)
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterMatrix">
            <summary>
            The name of the similarity matrix used
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterExpect">
            <summary>
            The Expect value used for the search
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterInclude">
            <summary>
            The inclusion threshold for a PSI-Blast iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterMatchScore">
            <summary>
            The match score for nucleotide-nucleotide comparisons
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterMismatchScore">
            <summary>
            The mismatch score for nucleotide-nucleotide comparisons
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterGapOpen">
            <summary>
            The gap open penalty
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterGapExtend">
            <summary>
            The Gap extension penalty.
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterFilter">
            <summary>
            The filtering options used for the search
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterPattern">
            <summary>
            The pattern used for PHI-Blast
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastXmlMetadata.ParameterEntrezQuery">
            <summary>
            The ENTREZ query used to limit the search
            </summary>
        </member>
        <member name="T:MBF.Web.WebServices">
            <summary>
            WebServices class is an abstraction class which provides instances
            and lists of all Webservices currently supported by MBF. 
            </summary>
        </member>
        <member name="F:MBF.Web.WebServices.all">
            <summary>
            List of supported Webservices by the MBF.
            </summary>
        </member>
        <member name="P:MBF.Web.WebServices.NcbiBlast">
            <summary>
            Gets an instance of NcbiQBlast class which implements the client side 
            functionality required to perform Blast Search Requests against the 
            the NCBI QBlast system using their Blast URL APIs. 
            </summary>
        </member>
        <member name="P:MBF.Web.WebServices.EbiBlast">
            <summary>
            Gets an instance of EBI WUBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the EBI WUBlast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="P:MBF.Web.WebServices.AzureBlast">
            <summary>
            Gets an instance of AzureBlast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the Azure Blast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="P:MBF.Web.WebServices.BioHPCBlast">
            <summary>
            Gets an instance of BioHPC Blast class which will implement the 
            client side functionality required to perform Blast Search Requests 
            against the Azure Blast web-service using their published interface proxy.
            </summary>
        </member>
        <member name="P:MBF.Web.WebServices.All">
            <summary>
            Gets the list of all Webservices supported by the MBF.
            </summary>
        </member>
        <member name="T:MBF.Util.Logging.TraceMessage">
            <summary>
            A TraceMessage is a simple message holding class.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.TraceMessage.context">
            <summary>
            The context where the event occurred, such as a method name, or
            a particular point in a complex operation.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.TraceMessage.message">
            <summary>
            A description of the event.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.TraceMessage.data">
            <summary>
            Data associated with the event, such as argument values.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.TraceMessage.when">
            <summary>
            When the event occurred.
            </summary>
        </member>
        <member name="M:MBF.Util.Logging.TraceMessage.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Construct a message.
            </summary>
            <param name="c">The context.</param>
            <param name="m">The message.</param>
            <param name="d">The data.</param>
            <param name="w">When the event occurred.</param>
        </member>
        <member name="M:MBF.Util.Logging.TraceMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a message, using the current date/time.
            </summary>
            <param name="c">The context.</param>
            <param name="m">The message.</param>
            <param name="d">The data.</param>
        </member>
        <member name="M:MBF.Util.Logging.TraceMessage.Format">
            <summary>
            Convert a Trace.Message into a user-friendly string.
            </summary>
            <returns>the string.</returns>
        </member>
        <member name="T:MBF.IAlphabet">
            <summary>
            An alphabet defines a set of characters common to a particular representation
            of a biological sequence. The items in these alphabets are those you would find
            as the individual sequence items in an ISequence variable.
            <para>
            The characters in an alphabet may represent a particular biological structure
            or they may represent information helpful in understanding a sequence. For instance
            gap characters, termination characters, and characters representing items whose
            definition remains ambiguous are all allowed.
            </para>
            </summary>
        </member>
        <member name="M:MBF.IAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Returns one of the items in the encoding based on the character
            symbol of that item.
            </summary>
            <param name="symbol">The character symbol to look up, such as 'G' for Guanine.</param>
            <returns>ISequenceItem corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.IAlphabet.LookupBySymbol(System.String)">
            <summary>
            Returns one of the items in the encoding based on the symbol of
            that item. If the string is only composed of one character then the
            result should be the same as calling the char overload of this method.
            For instance in an amino acid encoding "Ala" or "A" could return the
            item representing Alanine.
            </summary>
            <param name="symbol">The string symbol to look up, such as "G" or "Gua" for Guanine.</param>
            <returns>ISequenceItem corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.IAlphabet.LookupByValue(System.Byte)">
            <summary>
            Returns an ISeuqneceItem which corresponds to the given value.
            </summary>
            <param name="value">ASCII value of the symbol</param>
            <returns>ISequenceItem corresponding to the given value</returns>
        </member>
        <member name="M:MBF.IAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{MBF.ISequenceItem})">
            <summary>
            Find the consensus symbol for a set of sequence items
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus sequence item</returns>
        </member>
        <member name="M:MBF.IAlphabet.GetBasicSymbols(MBF.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:MBF.IAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored symbols filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (e.g. in DNA: G, A, T, and C)</param>
            <param name="includeGaps">Include the gap items if any (e.g. -)</param>
            <param name="includeAmbiguities">Include the ambiguity items if any (e.g. in DNA: GA, GAT, GC, etc.)</param>
            <param name="includeTerminations">Include the termination item if any (e.g. *)</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="P:MBF.IAlphabet.Name">
            <summary>
            Gets a human readable name for the alphabet. 
            For example "DNA", "RNA", or "Amino Acid".
            </summary>
        </member>
        <member name="P:MBF.IAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent a gap.
            </summary>
        </member>
        <member name="P:MBF.IAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent an ambigous item (i.e. and item for which it is not 
            precisely known what it represents)
            </summary>
        </member>
        <member name="P:MBF.IAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether the encoding has one or more characters 
            that represent terminal items.
            </summary>
        </member>
        <member name="P:MBF.IAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide / amino acid corresponding to default gap character in alphabet
            </summary>
        </member>
        <member name="T:MBF.RnaAlphabet">
            <summary>
            The basic alphabet that describes symbols used in RNA sequences.
            This alphabet allows not only for the four base nucleotide symbols,
            but also for various ambiguities, termination, and gap symbols.
            <para>
            The character representations come from the NCBI4na standard and
            are used in many sequence file formats. The NCBI4na standard is the
            same as the IUPACna standard with only the addition of the gap
            character.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Name
            A - Adenine
            C - Cytosine
            M - A or C
            G - Guanine
            R - G or A
            S - G or C
            V - G or V or A
            U - Uracil
            W - A or U
            Y - U or C
            H - A or C or U
            K - G or U
            D - G or A or U
            B - G or U or C
            - - Gap
            N - A or G or U or C
            </para>
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.A">
            <summary>
            Nucleotide Adenine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.C">
            <summary>
            Nucleotide Cytosine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.G">
            <summary>
            Nucleotide Guanine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.U">
            <summary>
            Nucleotide Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.AC">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GA">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GC">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.AU">
            <summary>
            Adenine or Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.UC">
            <summary>
            Uracil or Cytosine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GU">
            <summary>
            Gaunine or Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GCA">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.ACU">
            <summary>
            Adenine, Cytosine, or Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GAU">
            <summary>
            Gaunine, Adenine, or Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.GUC">
            <summary>
            Gaunine, Uracil, or Cytosine
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.Any">
            <summary>
            Adenine, Guanine, Cytosine, or Uracil
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.instance">
            <summary>
            Static instance of this class.
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.values">
            <summary>
            Stores the list of Nucleotides for RNA
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in RNA
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:MBF.RnaAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:MBF.RnaAlphabet.#cctor">
            <summary>
            Initializes static members of the RnaAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:MBF.RnaAlphabet.#ctor">
            <summary>
            Prevents a default instance of the RnaAlphabet class from being created.
            Populates nucleotide values, and ambiguous maps.
            </summary>
        </member>
        <member name="M:MBF.RnaAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value.
            See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="value">Byte value of the symbol</param>
            <returns>ISequenceItem for nucleotide corresponding to input value</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{MBF.ISequenceItem})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus nucleotide</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.GetBasicSymbols(MBF.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (G, A, U, and C)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (GA, GAU, GC, etc.)</param>
            <param name="includeTerminations">Has no effect in this alphabet</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.RnaAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.RnaAlphabet.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same nucleotide.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:MBF.RnaAlphabet.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:MBF.RnaAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.Instance">
            <summary>
            Gets an instance of the RNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'RNA'
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide that denotes default gap character in RNA
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 16.
            </summary>
        </member>
        <member name="P:MBF.RnaAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IO.SequenceParsers">
            <summary>
            SequenceParsers class is an abstraction class which provides instances
            and lists of all Parsers currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceParsers.genBank">
            <summary>
            A singleton instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceParsers.fasta">
            <summary>
            A singleton instance of FastaParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceParsers.fastq">
            <summary>
            A singleton instance of FastQParser class which is capable of
            parsing FastQ format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceParsers.gff">
            <summary>
            A singleton instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceParsers.all">
            <summary>
            List of all supported sequence parsers.
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceParsers.FindParserByFile(System.String)">
            <summary>
            Returns parser which supports the specified file.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <returns>If found returns the parser as ISequenceParser else returns null.</returns>
        </member>
        <member name="M:MBF.IO.SequenceParsers.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceParsers.GetSequenceParsers(System.Boolean)">
            <summary>
            Gets all registered parsers in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered parsers</returns>
        </member>
        <member name="P:MBF.IO.SequenceParsers.GenBank">
            <summary>
            Gets an instance of GenBankParser class which is capable of
            parsing GenBank format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceParsers.Fasta">
            <summary>
            Gets an instance of FastaParser class which is capable of
            parsing FASTA format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceParsers.FastQ">
            <summary>
            Gets an instance of FastQParser class which is capable of
            parsing FASTQ format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceParsers.Gff">
            <summary>
            Gets an instance of GffParser class which is capable of
            parsing GFF format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceParsers.All">
            <summary>
            Gets the list of all parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.UnsureSequenceRegion">
            <summary>
            UnsureSequenceRegion (Unsure) is a region in which author is unsure of exact sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.UnsureSequenceRegion.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new UnsureSequenceRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:MBF.IO.GenBank.UnsureSequenceRegion.#ctor(System.String)">
            <summary>
            Creates new UnsureSequenceRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the UnsureSequenceRegion.</param>
        </member>
        <member name="M:MBF.IO.GenBank.UnsureSequenceRegion.#ctor(MBF.IO.GenBank.UnsureSequenceRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other UnsureSequenceRegion instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.UnsureSequenceRegion.Clone">
            <summary>
            Creates a new UnsureSequenceRegion that is a copy of the current UnsureSequenceRegion.
            </summary>
            <returns>A new UnsureSequenceRegion that is a copy of this UnsureSequenceRegion.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.UnsureSequenceRegion.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceSource">
            <summary>
            Source provides the common name of the organism or the name most frequently used
            in the literature along with the taxonomic classification levels 
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSource.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSource.#ctor(MBF.IO.GenBank.SequenceSource)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceSource instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSource.Clone">
            <summary>
            Creates a new SequenceSource that is a copy of the current SequenceSource.
            </summary>
            <returns>A new SequenceSource that is a copy of this SequenceSource.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSource.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceSource that is a copy of the current SequenceSource.
            </summary>
            <returns>A new object that is a copy of this SequenceSource.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceSource.CommonName">
            <summary>
            Common name of the organism.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceSource.Organism">
            <summary>
            Provides Genus, Species and taxonomic classification levels 
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ProjectIdentifier">
            <summary>
            The identifier of a project (such as a Genome Sequencing Project) 
            to which a GenBank sequence record belongs.
            
            This is obsolete and was removed from the GenBank flatfile format 
            after Release 171.0 in April 2009.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ProjectIdentifier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ProjectIdentifier.#ctor(MBF.IO.GenBank.ProjectIdentifier)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">ProjectIdentifier instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ProjectIdentifier.Clone">
            <summary>
            Creates a new ProjectIdentifier that is a copy of the current ProjectIdentifier.
            </summary>
            <returns>A new ProjectIdentifier that is a copy of this ProjectIdentifier.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.ProjectIdentifier.System#ICloneable#Clone">
            <summary>
            Creates a new ProjectIdentifier that is a copy of the current ProjectIdentifier.
            </summary>
            <returns>A new object that is a copy of this ProjectIdentifier.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ProjectIdentifier.Name">
            <summary>
            Name of the project.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ProjectIdentifier.Numbers">
            <summary>
            Project numbers.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.FivePrimeUtr">
            <summary>
            Region at the 5' end of a mature transcript (preceding the initiation codon) that is not translated into a protein.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.FivePrimeUtr.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new FivePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FivePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new FivePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the FivePrimeUTR.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FivePrimeUtr.#ctor(MBF.IO.GenBank.FivePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other FivePrimeUTR instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.FivePrimeUtr.Clone">
            <summary>
            Creates a new FivePrimeUTR that is a copy of the current FivePrimeUTR.
            </summary>
            <returns>A new FivePrimeUTR that is a copy of this FivePrimeUTR.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.FivePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.CompoundAminoAcid">
            <summary>
            CompoundAminoAcid supports, storing more than one amino acids with their weight in one base entry.
            For example,
             Consider the below sequence where {D|N} could have statistical values of 30% and 65% and
             {C|G|T} could have 30% each (they dont necessarily have to sum upto 100)
                GATTADAGCTA
                     N  G
                        T
            Above sequence items {D|N} and {C|G|T} can be represented in compound sequence items like, 
            GATTARAGBTA
             Where “B” and “X” are CompoundAminoAcids.
            CompoundAminoAcid B will contain amino acids D and N with their weights.
            CompoundAminoAcid X will contain nucleotides C, G and T with their weights.
            
            This class can be used in SparseSequence.
            </summary>
        </member>
        <member name="T:MBF.AminoAcid">
            <summary>
            The amino acid implementations of ISequenceItem allows for the
            definition of the amino acid peptide sequences.
            <para>
            AminoAcid adds the ExtendedValue field to those found in ISequenceItem.
            This supports a second abbreviation beyond that of the one character
            representation.
            </para>
            <para>
            For example IUPAC and NCBI standards define Amino Acids with both one
            character and three character symbols. Thus for example Serine would have:
            </para>
            Value: 17
            Symbol: S
            ExtendedSymbol: Ser
            Name: Serine
            </summary>
        </member>
        <member name="F:MBF.AminoAcid.val">
            <summary>
            Stores encoding value
            </summary>
        </member>
        <member name="F:MBF.AminoAcid.symbol">
            <summary>
            A character symbol representing the item. For instance,
            symbols could include A for Alanine and G for Glycine.
            Also possible are symbols representing gaps, termination
            characters, or ambiguities.
            </summary>
        </member>
        <member name="F:MBF.AminoAcid.extSymbol">
            <summary>
            A symbol representing the item. For instance,
            symbols could include Ala for Alanine and Gly for Glycine.
            Also possible are symbols representing gaps, termination
            characters, or ambiguities.
            </summary>
        </member>
        <member name="F:MBF.AminoAcid.name">
            <summary>
            A human readable and display appropriate name for the item.
            For example, 'Alanine' or 'Glycine'.
            </summary>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.String)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Creates an amino acid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the acid</param>
            <param name="symbol">A symbol representing the acid</param>
            <param name="extSymbol">A multi-character symbol representing the acid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="isTermination">Indicates if this is a termination character.</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AminoAcid class.
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.AminoAcid.#ctor">
            <summary>
            Prevents a default instance of the AminoAcid class from being created.
            </summary>
        </member>
        <member name="M:MBF.AminoAcid.Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:MBF.AminoAcid.MBF#ISequenceItem#Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:MBF.AminoAcid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.AminoAcid.System#ICloneable#Clone">
            <summary>
             Returns a new copy of the AminoAcid object.
            </summary>
            <returns>Clone of this amino acid</returns>
        </member>
        <member name="M:MBF.AminoAcid.Equals(System.Object)">
            <summary>
            Overrides Object Equals.
            Two amino acids are judged equal, if they have the same symbol
            </summary>
            <param name="obj">Object to be compared with</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MBF.AminoAcid.GetHashCode">
            <summary>
            Get hash code for amino acid
            Uses symbol for calculation
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="P:MBF.AminoAcid.Value">
            <summary>
            Gets encoding value, unique for the particular item within its
            alphabet.
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.Symbol">
            <summary>
            Gets character symbol for amino acid
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.ExtendedSymbol">
            <summary>
            Gets extended symbol for amino acid
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.Name">
            <summary>
            Gets the display name for the amino acid.
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.IsGap">
            <summary>
            Gets a value indicating whether this amino acid is a Gap character
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.IsAmbiguous">
            <summary>
            Gets a value indicating whether this amino acid is an Ambiguous character
            </summary>
        </member>
        <member name="P:MBF.AminoAcid.IsTermination">
            <summary>
            Gets a value indicating whether this amino acid is a Termination character
            </summary>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param> 
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>  
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the acid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>   
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>    
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Byte,System.Char,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{MBF.ISequenceItem},System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a CompoundAminoAcid representation based on its data.
            </summary>
            <param name="value">A byte encoding for the CompoundAminoAcid</param>
            <param name="symbol">A symbol representing the CompoundAminoAcid</param>
            <param name="extSymbol">A multi-character symbol representing the CompoundAminoAcid</param>
            <param name="name">A readable name for the CompoundAminoAcid</param>
            <param name="isGap">Indicates if this is a gap character.</param>
            <param name="isAmbiguous">Indicates if this is ambiguous.</param>
            <param name="aminoacids">List of aminoacids.</param>
            <param name="weights">List of weights.</param>     
        </member>
        <member name="M:MBF.CompoundAminoAcid.GetWeight(MBF.ISequenceItem)">
            <summary>
            Gets the weight for the specified sequence item.
            </summary>
            <param name="item">Sequence Item.</param>
            <returns>If found returns the weight of the specified item, otherwise returns double.NaN.</returns>
        </member>
        <member name="M:MBF.CompoundAminoAcid.SetWeight(MBF.ISequenceItem,System.Double)">
            <summary>
            Sets the weight for the specified item.
            </summary>
            <param name="item">Sequence Item for which the weight has to be set.</param>
            <param name="weight">New weight for the item.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.Add(MBF.ISequenceItem,System.Double)">
            <summary>
            Adds specified Sequenceitem and weight.
            </summary>
            <param name="item">Sequence Item.</param>
            <param name="weight">Weight of specified item.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the specified sequence item.
            </summary>
            <param name="item">Sequence item.</param>
            <returns>Returns true if the specified item removed, otherwise false.</returns>
        </member>
        <member name="M:MBF.CompoundAminoAcid.MBF#ICompoundSequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:MBF.CompoundAminoAcid.MBF#ISequenceItem#Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:MBF.CompoundAminoAcid.Clone">
            <summary>
            Returns a new copy of the CompoundAminoAcid object.
            </summary>
        </member>
        <member name="M:MBF.CompoundAminoAcid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.CompoundAminoAcid.System#ICloneable#Clone">
            <summary>
            Returns a new copy of the CompoundNucleotide object.
            </summary>
        </member>
        <member name="P:MBF.CompoundAminoAcid.SequenceItems">
            <summary>
            Returns the read only collection of sequece items present in this CompoundAminoAcid.
            </summary>
        </member>
        <member name="T:MBF.IVirtualData`1">
            <summary>
            Contract to be implemented by Virtual data holder for any type (T).
            Encapsulate data from the user and load it on demand.
            </summary>
            <typeparam name="T">Object type</typeparam>
        </member>
        <member name="M:MBF.IVirtualData`1.GetData(System.Int32)">
            <summary>
            Get the specified block of data from cache
            </summary>
            <param name="blockIndex">block index</param>
            <returns>block of data</returns>
        </member>
        <member name="M:MBF.IVirtualData`1.AddData(`0,System.Int64,System.Int64)">
            <summary>
            Add block of data into cache
            </summary>
            <param name="blockType">Block Type</param>
            <param name="startRange">Block starting index</param>
            <param name="endRange">Block ending index</param>
        </member>
        <member name="M:MBF.IVirtualData`1.GetAllData">
            <summary>
            Get all the blocks of data
            </summary>
            <returns>List of blocks of data</returns>
        </member>
        <member name="M:MBF.IVirtualData`1.ClearStaleData">
            <summary>
            Clear unused data
            </summary>
        </member>
        <member name="P:MBF.IVirtualData`1.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.IVirtualData`1.BlockSize">
            <summary>
            Gets or sets single block length or size
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualAlignedSequenceList`1">
            <summary>
            A VirtualAlignedSequenceList is used in data virtualization scenarios to maintain a
            large list of aligned sequences. When all the available sequences cannot be accommodated
            at once in memory, this list fetches blocks of sequence alignments from the cache or
            from the file on request.
            For example, if a SAM file has more than one sequence and data virtualization returns this class, then
            each sequence is loaded from the SAM file when it is first accessed.
            </summary>
        </member>
        <member name="T:MBF.IVirtualAlignedSequenceList`1">
            <summary>
            Interface to a virtual aligned sequence list. This interface is used for 
            data virtualization on large datasets. 
            For example, if a SAM file has more than one sequence and data virtualization 
            is enabled, this interface will be returned. Then each sequence is loaded on 
            demand from the SAM file when it is first accessed.
            Classes which implement this interface should hold a virtual list of sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1.KBytes">
            <summary>
            1 KB
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1.MaximumDictionaryLength">
            <summary>
            The maximum allowable number of items in the dictionary before the weak
            references are forcibly removed to facilitate optimal use of available memory.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1._count">
            <summary>
            Number of items in the actual file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1._sidecarProvider">
            <summary>
            SequencePointer provider from sidecar file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1._sequenceParser">
            <summary>
            Parser used to parse sequence data on request
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1._sequenceDictionary">
            <summary>
            Contains the index of the sequence in the actual file, and a weak reference to that sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.#ctor(MBF.IO.SidecarFileProvider,MBF.IO.IVirtualSequenceAlignmentParser,System.Int32)">
            <summary>
            Initializes a new instance of the VirtualAlignedSequenceList class with a specified provider,
            a specified parser, and a specifed sequence count.
            </summary>
            <param name="provider">SequencePointer provider from sidecar file.</param>
            <param name="parser">Parser used to parse sequence data on request.</param>
            <param name="count">Number of items in the actual file.</param>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.IndexOf(`0)">
            <summary>
             Returns the zero-based index of the first occurrence of the specific item in the VirtualAlignedSequenceList.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of the item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.Insert(System.Int32,`0)">
            <summary>
            This method is not supported since VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.RemoveAt(System.Int32)">
            <summary>
            This method is not supported since VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.Add(`0)">
            <summary>
            This method is not supported since VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.Clear">
            <summary>
            This method is not supported since VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.Contains(`0)">
            <summary>
            Determines whether a specific aligned sequence is in the virtual sequence list.
            </summary>
            <param name="item">The aligned sequence to locate in the list.</param>
            <returns>true if the aligned sequence is found in the list; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire virtual aligned sequence list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current list. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.Remove(`0)">
            <summary>
            This method is not supported since VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.GetEnumerator">
            <summary>
            Get the enumerator to the aligned sequences in the list.
            </summary>
            <returns>The enumerator to the aligned sequences in the list.</returns>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator to the aligned sequences in the list.
            </summary>
            <returns>The enumerator to the aligned sequences in the list.</returns>
        </member>
        <member name="P:MBF.IO.VirtualAlignedSequenceList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            Throws a NotSupportedException when attempting to set the position
            since VirtualAlignedSequenceList is read-only.
            </summary>
            <param name="index">The zero-based index of the sequence in the list.</param>
            <returns>The aligned sequence at the specified index.</returns>
        </member>
        <member name="P:MBF.IO.VirtualAlignedSequenceList`1.Count">
            <summary>
            Gets the number of elements contained in the VirtualAlignedSequenceList.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualAlignedSequenceList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the VirtualAlignedSequenceList is read-only.
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1">
            <summary>
            Implementation of the enumerator for the VirtualAlignedSequenceList.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1._alignedSequences">
            <summary>
            A list of sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1._index">
            <summary>
            The zero-based index of the sequence in the list.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1._disposed">
            <summary>
            Track whether disposed has been called.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            Initializes an enumerator for the VirtualAlignedSequenceEnumerator.
            </summary>
            <param name="virtualAlignedSequenceList"></param>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.Dispose">
            <summary>
            Disposes of any allocated memory.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes of any allocated memory.
            </summary>
            <param name="disposing">Indicates whether to dispose of all resources or only unmanaged ones.</param>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualAlignedSequenceList`1.VirtualAlignedSequenceEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.SequenceAlignmentMap">
            <summary>
            Class to hold sequence alignment map (SAM) structure.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SequenceAlignmentMap._header">
            <summary>
            Holds SAM header.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SequenceAlignmentMap._metadata">
            <summary>
            holds the metadta.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SequenceAlignmentMap._querySequences">
            <summary>
            Holds list of query sequences present in this SAM object.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SequenceAlignmentMap._isDVEnabled">
            <summary>
            Flag to indicate whether DV is enabled or not.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.#ctor">
            <summary>
            Default constructor.
            Creates SequenceAlignmentMap instance.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.#ctor(MBF.IO.SAM.SAMAlignmentHeader,MBF.IVirtualAlignedSequenceList{MBF.IO.SAM.SAMAlignedSequence})">
            <summary>
            Creates SequenceAlignmentMap instance.
            </summary>
            <param name="header">SAM header.</param>
            <param name="querySequences">A list of virtual sequences.</param>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.#ctor(MBF.IO.SAM.SAMAlignmentHeader)">
            <summary>
            Creates SequenceAlignmentMap instance.
            </summary>
            <param name="header">SAM header.</param>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetRefSequences">
            <summary>
            Returns list of reference sequences present in this header. 
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetReferenceSequenceRanges">
            <summary>
            Returns list of SequenceRanges objects which represents reference sequences present in the header. 
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetPairedReads">
            <summary>
            Gets the paired reads.
            </summary>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetPairedReads(System.String)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="libraryName">Name of the library present in CloneLibrary.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetPairedReads(MBF.CloneLibraryInformation)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="libraryInfo">Library information.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetPairedReads(System.Single,System.Single)">
            <summary>
            Gets the paired reads.
            </summary>
            <param name="meanLengthOfInsert">Mean of the insert length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insert length.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SAM object.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.UpdateType(System.Collections.Generic.IList{MBF.IO.SAM.PairedRead},System.Double,System.Int32)">
            <summary>
            This Method calculates mean and standard deviation from the available reads
            and then using this information updates the type of reads.
            </summary>
            <param name="allreads">All reads.</param>
            <param name="sum">Pre calculated sum of insert length of reads 
            (invavled in calculation mean and std deviation) if available, else pass 0.</param>
            <param name="count">Pre calculated count of reads (invavled in calculation mean and std deviation)
            if available, else pass 0.</param>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetInMemoryPairedReads(System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the paired reads when SAMAligned sequences are in memory.
            </summary>
            <param name="meanLengthOfInsert">Mean of the insert length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insert length.</param>
            <param name="calculate">If this flag is set then mean and standard deviation will
            be calculated from the paired reads instead of specified.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SequenceAlignmentMap.GetDVAwarePairedReads(System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the paired reads when DV is enabled.
            </summary>
            <param name="meanLengthOfInsert">Mean of the insert length.</param>
            <param name="standardDeviationOfInsert">Standard deviation of insert length.</param>
            <param name="calculate">If this flag is set then mean and standard deviation will
            be calculated from the paired reads instead of specified.</param>
            <returns>List of paired read.</returns>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.Header">
            <summary>
            Gets the SAM header.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.QuerySequences">
            <summary>
            Gets the query sequences present in this alignment.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.AlignedSequences">
            <summary>
            Gets list of aligned sequences present in this alignment.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.Sequences">
            <summary>
            Gets list of source sequences present in this alignment.
            Note that this method always returns an empty readonly list.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.Metadata">
            <summary>
            Gets the metadata of this alignment.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SequenceAlignmentMap.Documentation">
            <summary>
            Gets documentation object.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.DVEnabledPairedRead">
            <summary>
            DV aware paired read
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.DVEnabledPairedRead._list">
            <summary>
            Reference to the list.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.DVEnabledPairedRead._mappedAlignedSequences">
            <summary>
            Read only list, holds reads list which are paired.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.DVEnabledPairedRead._readIndexes">
            <summary>
            Holds list of read indexes.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.DVEnabledPairedRead.#ctor(System.Collections.Generic.IList{MBF.IO.SAM.SAMAlignedSequence})">
            <summary>
            Constructor - Creates an instance of DVEnabledPairedRead class.
            </summary>
            <param name="list">List containing alinged sequences.</param>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.ReadIndexes">
            <summary>
            List of read indexes.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.Index1">
            <summary>
            Index of first read in this paired read instance.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.Index2">
            <summary>
            Index of second read in this paired read instance.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.Read1">
            <summary>
            First aligned sequence or read.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.Read2">
            <summary>
            Second aligned sequence or read.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.DVEnabledPairedRead.Reads">
            <summary>
            Gets the list of paired reads.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.VirtualList`1">
            <summary>
            Virtual list to navigate through the specified positions
            in the source list.
            Note that the edit scenarios are not supported.
            </summary>
            <typeparam name="T">Type of source list item.</typeparam>
        </member>
        <member name="F:MBF.IO.SAM.VirtualList`1._source">
            <summary>
            Source list.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.VirtualList`1._sourceIndexes">
            <summary>
            Source list indexes.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates an instance of Virtual list.
            </summary>
            <param name="source">Source list.</param>
            <param name="indexes">Source indexes to navigate.</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.IndexOf(`0)">
            <summary>
            Determines the index of specified item.
            </summary>
            <param name="item">The instance to locate.</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.Insert(System.Int32,`0)">
            <summary>
            Not supported.
            </summary>
            <param name="index">index.</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.Add(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.Contains(`0)">
            <summary>
            Determines whether this instance contains specified item or not.
            </summary>
            <param name="item">Item to be verified.</param>
            <returns>Returns true if found, else false.</returns>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in this instance to specified array.
            </summary>
            <param name="array">Array to copy.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="item">Item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.GetEnumerator">
            <summary>
            Gets an enumerator for this instance.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.VirtualList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for this instance.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.VirtualList`1.Item(System.Int32)">
            <summary>
            Gets the element at specified index.
            </summary>
            <param name="index">Index at whi</param>
            <returns></returns>
        </member>
        <member name="P:MBF.IO.SAM.VirtualList`1.Count">
            <summary>
            Gets the count of elements presents in this instance.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.VirtualList`1.IsReadOnly">
            <summary>
            Specifies whether this list is readonly or not.
            </summary>
        </member>
        <member name="T:MBF.IO.CommonVirtualSequenceParser">
            <summary>
            This is a class that provides some basic operations common to virtual sequence
            parsers. It is meant to be used as private member inside the parser implementations
            if the implementer wants to make use of some common behavior across parsers.
            </summary>
        </member>
        <member name="M:MBF.IO.CommonVirtualSequenceParser.#ctor">
            <summary>
            Initializes a new instance of the CommonVirtualSequenceParser class.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.Bin">
            <summary>
            Class to hold Bin information.
            An instance of this class can contain Bin number and list of chunks related to the bin number.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.Bin.#ctor">
            <summary>
            Creates an instance of Bin class.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.Bin.BinNumber">
            <summary>
            Gets or sets bin number.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.Bin.Chunks">
            <summary>
            Gets list of chunks.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree">
            <summary>
            Implements the ISuffixTree interface. A multi-way suffix tree is a data structure used to store suffixes of a bigger string in a tree format. This data structure allows better scalability on high end machines. Each node can have a maximum of N children where N is the number of distinct elements in the sequence.
            This class persists the tree on a storable device instead of in-memory data structure.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.MultiWaySuffixTree">
            <summary>
            Implements IMultiWaySuffixTree interface. Represents an in-memory suffix tree and exposes all the properties and methods required by Add/update tree.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree">
            <summary>
            Extends ISuffix Tree interface.
            This interface defines the contract that has to be implemented by and class implementing multi way suffix tree.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Merge(MBF.Algorithms.SuffixTree.IMultiWaySuffixTree)">
            <summary>
            Merge the given branch at the root of Suffix Tree.
            Asummption:
             The root node of the given branch contains only one edge, which is the branch to be merged.
            </summary>
            <param name="branch">Branch to be merged.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Insert(MBF.Algorithms.SuffixTree.IEdge,System.Int32,System.Int32)">
            <summary>
            Insert a edge at given parent.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="startIndex">Start index of edge</param>
            <param name="endIndex">End index of edge</param>
            <returns>New edge created</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Remove(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Remove the edge from tree, this requires bubbling all the child edges one level up.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="edge">Edge to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Split(MBF.Algorithms.SuffixTree.IEdge,System.Int32)">
            <summary>
            Split the edge at given index.
            </summary>
            <param name="edge">Edge to be split</param>
            <param name="splitAt">Index at which the edge has to be split</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Update(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Update the old node with new node, requires merging the child edges.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="oldEdge">Old edge</param>
            <param name="newEdge">new edge</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Find(MBF.Algorithms.SuffixTree.IEdge,System.Byte)">
            <summary>
            Find the child edge, whose first character starts with given character.
            </summary>
            <param name="edge">Parent edge</param>
            <param name="character">First character of required edge</param>
            <returns>Edge found</returns>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Root">
            <summary>
            Gets or sets the root node (edge) in suffix tree
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IMultiWaySuffixTree.Count">
            <summary>
            Gets total number of edges in suffix tree.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.TERMINATING_SYMBOL">
            <summary>
            Character used as terminating symbol for Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.CONCATENATING_SYMBOL">
            <summary>
            Character used as Concatenating symbol for Suffix Tree
            Note: This is specific to NUCmer implementation
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree._maximumChildrenCount">
            <summary>
            Maximum number of child edges allowed in tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree._sequence">
            <summary>
            Sequence of Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree._referenceSymbols">
            <summary>
            Reference sequence's encoded values are in the byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.MultiWaySuffixTree._referenceSymbolsList">
            <summary>
            If reference sequence is segmented sequence then store sequence's encoded values in 
            segemented sequence in list of byte array.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.#ctor(MBF.ISequence,System.Int32)">
            <summary>
            Default constructor: Initializes the maximum number of child edges allowed in tree
            Creates child node of type “IMultiWaySuffixEdge”, that implies that the references to child node will be in-memory.
            </summary>
            <param name="sequence">Sequence of the tree</param>
            <param name="maximumChildrenCount">Number of allowed child edges</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Merge(MBF.Algorithms.SuffixTree.IMultiWaySuffixTree)">
            <summary>
            Merge the given branch at the root of Suffix Tree.
            Asummption:
             The root node of the given branch contains only one edge, which is the branch to be merged.
            </summary>
            <param name="branch">Branch to be merged.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Insert(MBF.Algorithms.SuffixTree.IEdge,System.Int32,System.Int32)">
            <summary>
            Insert a edge at given parent.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="startIndex">Start index of edge</param>
            <param name="endIndex">End index of edge</param>
            <returns>New edge created</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Remove(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Remove the edge from tree, the edge and all its children will be removed.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="edge">Edge to be removed.</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Update(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Update the old node with new node, requires merging the child edges.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="oldEdge">Old edge</param>
            <param name="newEdge">new edge</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Split(MBF.Algorithms.SuffixTree.IEdge,System.Int32)">
            <summary>
            Split the edge at given index.
            </summary>
            <param name="edge">Edge to be split</param>
            <param name="splitAt">Index at which the edge has to be split</param>
            <returns>New edge</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Find(MBF.Algorithms.SuffixTree.IEdge,System.Byte)">
            <summary>
            Find the child edge, whose first character starts with given character.
            </summary>
            <param name="edge">Parent edge</param>
            <param name="character">First character of required edge</param>
            <returns>Edge found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.InitializeReferenceSequence(MBF.ISequence)">
            <summary>
            Initialize reference sequence.
            If the sequence is DV-enabled pre-fetch the sequence in local byte array
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.GetReferenceSymbol(System.Int32)">
            <summary>
            Get the symbol from refrence sequence at given index
            </summary>
            <param name="index">Index of symbol</param>
            <returns>Symbol at index</returns>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Count">
            <summary>
            Gets total number of edges in suffix tree.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Root">
            <summary>
            Gets or sets the root node (edge) in suffix tree
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.Sequence">
            <summary>
            Gets sequence of Suffix Tree.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixTree.MaximumChildrenCount">
            <summary>
            Gets maximum number of child edges allowed in tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree._edgeStore">
            <summary>
            Storage object for persistent edges
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree._persisntThreshold">
            <summary>
            Threshold at which the edges are pushed to storable device.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.#ctor(MBF.ISequence,System.Int32,System.Int32)">
            <summary>
            Default constructor: Initializes the maximum number of child edges allowed in tree
            </summary>
            <param name="sequence">Sequence of the tree</param>
            <param name="maximumChildrenCount">Number of allowed child edges</param>
            <param name="persisntThreshold">Threshold at which the edges are pushed to storable device.</param>
            _edgeStore.Dispose() is being called in Dispose(true) method.
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.#ctor(MBF.ISequence,System.Int32,System.Int32,MBF.Algorithms.SuffixTree.ISuffixEdgeStorage)">
            <summary>
            Default constructor: Initializes the maximum number of child edges allowed in tree
            </summary>
            <param name="sequence">Sequence of the tree</param>
            <param name="maximumChildrenCount">Number of allowed child edges</param>
            <param name="persisntThreshold">Threshold at which the edges are pushed to storable device.</param>
            <param name="edgeStorage">Persistent edge storage</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Insert(MBF.Algorithms.SuffixTree.IEdge,System.Int32,System.Int32)">
            <summary>
            Insert a edge at given parent.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="startIndex">Start index of edge</param>
            <param name="endIndex">End index of edge</param>
            <returns>New edge created</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Remove(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Remove the edge from tree, this requires bubbling all the child edges one level up.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="edge">Edge to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Update(MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge,MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Update the old node with new node, requires merging the child edges.
            </summary>
            <param name="parentEdge">Parent edge.</param>
            <param name="oldEdge">Old edge</param>
            <param name="newEdge">new edge</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Split(MBF.Algorithms.SuffixTree.IEdge,System.Int32)">
            <summary>
            Split the edge at given index.
            </summary>
            <param name="edge">Edge to be split</param>
            <param name="splitAt">Index at which the edge has to be split</param>
            <returns>New edge</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Find(MBF.Algorithms.SuffixTree.IEdge,System.Byte)">
            <summary>
            Find the child edge, whose first character starts with given character.
            </summary>
            <param name="edge">Parent edge</param>
            <param name="character">First character of required edge</param>
            <returns>Edge found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Dispose">
            <summary>
            Dispose the resources
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.EdgeStore">
            <summary>
            Gets or sets storage object for persistent edges
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixTree.PersisntThreshold">
            <summary>
            Gets or sets threshold at which the edges are pushed to storable device.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigReadOverlapType">
            <summary>
            Overlap between Read and Contig 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigReadOverlapType.FullOverlap">
            <summary>
            FullOverlap 
            ------------- Contig
               ------     Read
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigReadOverlapType.PartialOverlap">
            <summary>
            PartialOverlap
            -------------       Contig
                       ------   Read
            </summary>
        </member>
        <member name="T:MBF.Util.Logging.Trace">
            <summary>
            The Trace class implements a mechanism for logging messages, both to a Log object,
            and to a simple message queue that can be used for GUI display or other purposes.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.Trace.SeqWarnings">
            <summary>
            Flag to report non-fatal sequence parsing/formatting errors.
            </summary>
        </member>
        <member name="F:MBF.Util.Logging.Trace.AssemblyDetails">
            <summary>
            Flag to report details of sequence assembly into the log.
            </summary>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Want(System.UInt64)">
            <summary>
            Test to see if a flag is in the set of flags currently turned on.
            </summary>
            <param name="flag">a flag, encoded as a single bit in a ulong.</param>
            <returns>true if the flag is set.</returns>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Report(MBF.Util.Logging.TraceMessage)">
            <summary>
            Report a TraceMessage, by adding it to the front of the message
            queue, as well as logging it.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Report(System.String,System.String,System.String)">
            <summary>
            Overload that constructs the TraceMessage from its parts.
            </summary>
            <param name="context">Where the incident occurred.</param>
            <param name="message">The details of what happened.</param>
            <param name="data">Pertinent data such as argument values.</param>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Report(System.String)">
            <summary>
            Overload to report from a plain string.
            </summary>
            <param name="message">the message.</param>
        </member>
        <member name="M:MBF.Util.Logging.Trace.LatestMessage">
            <summary>
            Return the newest message in the queue (or null, if none).
            </summary>
            <returns>a TraceMessage.</returns>
        </member>
        <member name="M:MBF.Util.Logging.Trace.GetMessage(System.Int32)">
            <summary>
            return the ith message in the queue (0 = newest).
            </summary>
            <param name="i">index.</param>
            <returns>the TraceMessage.</returns>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Set(System.UInt64)">
            <summary>
            Turn on a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="flag">The bit to set.</param>
        </member>
        <member name="M:MBF.Util.Logging.Trace.Clear(System.UInt64)">
            <summary>
            Clear a flag, expressed as a set bit in a ulong.
            </summary>
            <param name="flag">The bit to clear.</param>
        </member>
        <member name="T:MBF.SegmentedSequence">
             <summary>
             SegmentedSequence contains a list that can hold sequences; a large sequence can be 
             fragmented into list of sequences and stored in an instance of this class.
             For example:
             Consider a DNA sequence "ATGCATGCTTGTGCATGCCCGA" which is fragmented in to following 
             three sequences "ATGCATGC", "TTGTGCATGC" and "CCGA". Following code shows how to 
             create a segmented sequence from these sequences.
             
             List&lt;ISequence&gt; sequenceList= new List&lt;ISequence&gt;();
             sequenceList.Add(new Sequence(Alphabets.DNA, "ATGCATGC");
             sequenceList.Add(new Sequence(Alphabets.DNA, "TTGTGCATGC");
             sequenceList.Add(new Sequence(Alphabets.DNA, "CCGA");
             
             SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequenceList);
             The sequence data can be accessed in following ways.
             1. Using ToString() method
             string  nucleotides = mySegmentedSequence.ToString() ;
             Provides the string representation of the entire sequence, thus nucleotides will contain "ATGCATGCTTGTGCATGCCCGA".
              
             2. Using enumerator
             foreach (Nucleotide nucleotide in mySegmentedSequence) { ... }
             This is by treating the SegmentedSequence as a list of SequenceItems.
             
             3. Using indexer
             Nucleotide nucleotide = mySegmentedSequence[9];
             Indexer is a zero based array representation of ISequenceItems, thus nucleotide will contain “T”.
             
             4. Using Sequences property
                Sequences property can be used to access the list of ISequences in the SegmentedSequence.
                
                foreach(ISequence seq in mySegmentedSequence.Sequences){...}
                In this case seqList will contain three Sequences. 
                seqList[0] will be ISequence instance containg "ATGCATGC".
                seqList[1] will be ISequence instance containg "TTGTGCATGC"
                seqList[2] will be ISequence instance containg "CCGA".
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="F:MBF.SegmentedSequence._sequences">
            <summary>
            Holds underlying sequences.
            Observable collection is used to handle the scenarios like, a new sequence 
            is inserted or replaced with the existing one and Alphabet of the new sequence 
            does not match with Alphabet of this segmented sequence.
            
            Observable collection notifies any changes to the collection through the 
            CollectionChanged event. A new sequence which is a result of an insert or 
            a replace action can be validated by listening to this event.
            </summary>
        </member>
        <member name="F:MBF.SegmentedSequence._seqInfo">
            <summary>
            Holds metadata of the sequence.
            </summary>
        </member>
        <member name="F:MBF.SegmentedSequence._mapToAlphabet">
            <summary>
            Holds Mapping from Encoding to Alphabet.
            </summary>
        </member>
        <member name="M:MBF.SegmentedSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:MBF.SegmentedSequence.#ctor(MBF.ISequence)">
            <summary>
            Creates a SegmentedSequence based on the sequence passed in via a ISequence
            parameter.
            
            Alphabet property of the created segmented sequence will be same as that of 
            the specified ISequence.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            ISequence sequence = new Sequence(Alphabets.DNA, "GATTCAAGGGCT");
            SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequence);
            
            The Corollary for RNA:
            
            ISequence sequence = new Sequence(Alphabets.RNA, "GAUUCAAGGGCU");
            SegmentedSequence mySegmentedSequence = new SegmentedSequence(sequence);
            </summary>
            <param name="sequence">
            An instance of ISequence. 
            </param>
        </member>
        <member name="M:MBF.SegmentedSequence.#ctor(System.Collections.Generic.ICollection{MBF.ISequence})">
            <summary>
            Creates a SegmentedSequence based on list of sequence passed in via a sequences
            parameter. The sequences in the list of ISequence must be of the same Alphabet 
            else an ArgumentException will occur. If sequences parameter contain any null 
            references then a ArgumentNullException will occur. 
            
            A typical use of this constructor for a DNA sequence would look like:
            
            List&lt;ISequence&gt; sequences = new List&lt;ISequence&gt;();
            sequences.Add(new Sequence(Alphabets.DNA,"GATTCAAGGGCT");
            sequences.Add(new Sequence(Alphabets.DNA,"TACATTAGGGTTCT");
            
            SegmentedSequence mySequence = new SegmentedSequence(sequences);
            
            The Corollary for RNA:
            
             List&lt;ISequence&gt; sequences = new List&lt;ISequence&gt;();
            sequences.Add(new Sequence(Alphabets.RNA,"GAUUCAAGGGCU");
            sequences.Add(new Sequence(Alphabets.RNA,"AUGUCAAGUUGCU");
            
            SegmentedSequence mySequence = new SegmentedSequence(sequences);
            </summary>
            <param name="sequences">
            A list containing ISequence instances.
            </param>
        </member>
        <member name="M:MBF.SegmentedSequence.Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new SegmentedSequence that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.GetSequenceLocalPosition(System.Int32)">
            <summary>
            Returns the local index of the sequence in this SegmentedSequence for the specified position.
            Position and local index are zero based.
            
            For example:
            
            If the SegmentedSequence contains two DNA sequences "ACGCAA" and "GGCC".
            The first sequence length is 6 and second sequence length is 4 and total lenght 
            of the SegmentedSequence is 10. 
            
            Sequences                   "ACGCAA"  "GGCC"
            Segmented Sequence Index     012345    6789
            Local Index                  012345    0123
                                        
            If we pass 8 as parameter to this method, this method will returns 2 as local index.
            This is becase the position 8 corresponds to the index 2 in the second sequence.
            
            If we pass 10 as parameter to this method, this method will returns -1 as there is 
            no corresponding local index found in the sequence.
            </summary>
            <param name="position">Position for which the local index is required.</param>
            <returns>If found returns local index of the sequence in the sequence list for the 
            specified position else -1 will be returned.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.GetSequenceListIndexByPosition(System.Int32)">
            <summary>
            Returns the index of the sequence in the underlying sequences list which contains 
            the ISequenceItem at the specified position.
            </summary>
            <param name="position">Position of the ISequenceItem in this segmented sequence.</param>
            <returns>List index of the sequence which contains the ISequenceItem at the specified position.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.GetSequenceByPosition(System.Int32)">
            <summary>
            Returns the sequence in the underlying sequences list which corresponds to the specified position.
            </summary>
            <param name="position">Position of which the sequence is needed.</param>
            <returns>If found returns the Sequence else returns null.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.CreateSequence(System.String)">
            <summary>
            Creates a new sequence from the specified sequence data.
            
            IsReadOnly property of the sequence created by this method will set to false.
            
            This method uses the Alphabet of this segmented sequence for creating a new sequence and thus
            Alphabet of this segmented sequence has to be set before calling this method.
            </summary>
            <param name="sequence">Sequence data.</param>
            <returns>ISequence instance containing the specified sequence data.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.SequenceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This event will be fired when there is change in the sequence list.
            
            This method will take care of verifying the Alphabet of added, 
            inserted or replaced Sequence with the Alphabet of this instance.
            If Alphabets doesnot match then an ArgumentException will occur.
            </summary>
            <param name="sender">ObservableCollection of Sequences.</param>
            <param name="e">Event argument.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Encodes sequence parameter and places the values obtained at the
            indicated position within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The sequence to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the sequence data from the specified position for a specified 
            number of characters.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="length">The number of characters to remove.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Encodes the specified sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The symbol of the item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Encodes the sequence and places it at the indicated position
            within the current sequence data, replacing the items currently
            located within that range. The number of items replaced will
            match the length of the sequence passed in.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for all underlying 
            sequences in this seqmented sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            
            If any underlying sequence does not supports tostring method then an exception will ocuur.
            </summary>
        </member>
        <member name="M:MBF.SegmentedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a readonly sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new ISequence that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.SegmentedSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:MBF.SegmentedSequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.Clear">
            <summary>
            Removes all underlying sequences from the sequences list of SegmentedSequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:MBF.SegmentedSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
        </member>
        <member name="M:MBF.SegmentedSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first occurrence of the specified sequence item.
            </summary>
            <param name="item">The sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new SegmentedSequence that is a copy of the current SegmentedSequence.
            </summary>
            <returns>A new object that is a copy of this SegmentedSequence.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SegmentedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="M:MBF.SegmentedSequence.GetSymbolSafeISequenceItem(MBF.Encoding.IEncoding,MBF.ISequenceItem)">
            <summary>
            Get the sequence item converted from Encoding to Alphabet
            </summary>
            <param name="encoding">Encoding used</param>
            <param name="item">Sequence item to veify.</param>
        </member>
        <member name="M:MBF.SegmentedSequence.GetMapToAlphabet(MBF.Encoding.IEncoding)">
            <summary>
            Gets a encoding to alphabet mapping for the given encoding
            </summary>
            <param name="encoding">Encoding from which the mapping is required</param>
            <returns>Encoding to Alphabet map</returns>
        </member>
        <member name="P:MBF.SegmentedSequence.Sequences">
            <summary>
            Sequences providers the list of sequences in this SegmentedSequence.
            
            Sequences property can be used to add, insert, replace, remove and access the sequences in this
            SegmentedSequence even though the IsReadOnly property is true. However if the IsReadOnly property 
            of this segmented sequence is false then the new sequence that has to be added, inserted or 
            replaced with existing sequence must be an editable sequence.
            
            Sequence that has to be added, inserted or replaced must have matching Alphabet of this
            SegmentedSequence else an ArgumentException will occur.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory.
            
            Note: If all underlying sequences uses same encoding then this property returns
            true, else returns false (Even though their UseEncoding property is set to true).
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Encoding">
            <summary>
            The encoding being used to store sequence items in Source sequences.
            Returns null if all underlying sequences are not using same encoding.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.  These are
            recalculated every time the getter as called, as the segments of the sequence may have
            been externally modified.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            Returns true if IsReadOnly property of any one of the underlying sequence is true.
            Returns false if IsReadOnly property of all underlying sequences are false.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Reverse">
            <summary>
            Return a readonly sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Complement">
            <summary>
            Return a readonly sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.ReverseComplement">
            <summary>
            Return a readonly sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.SegmentedSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.IO.GenBank.MiscSignal">
            <summary>
            Any region containing a signal controlling or altering gene function or expression that cannot be described 
            by other signal keys (promoter, CAAT_signal, TATA_signal, -35_signal, -10_signal, GC_signal, RBS, polyA_signal, 
            enhancer, attenuator, terminator, and rep_origin).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscSignal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscSignal.#ctor(System.String)">
            <summary>
            Creates new MiscSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscSignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscSignal.#ctor(MBF.IO.GenBank.MiscSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscSignal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscSignal.Clone">
            <summary>
            Creates a new MiscSignal that is a copy of the current MiscSignal.
            </summary>
            <returns>A new MiscSignal that is a copy of this MiscSignal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscSignal.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscRNA">
            <summary>
            Any transcript or RNA product that cannot be defined by other RNA keys (prim_transcript, precursor_RNA, 
            mRNA, 5'UTR, 3'UTR, exon, CDS, sig_peptide, transit_peptide, mat_peptide, intron, polyA_site, ncRNA, rRNA and tRNA).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRNA.#ctor(System.String)">
            <summary>
            Creates new MiscRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRNA.#ctor(MBF.IO.GenBank.MiscRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRNA.Clone">
            <summary>
            Creates a new MiscRNA that is a copy of the current MiscRNA.
            </summary>
            <returns>A new MiscRNA that is a copy of this MiscRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.FastQ.FastQFormatter">
            <summary>
            Writes an IQualitativeSequence to a particular location, usually a file. The output is formatted
            according to the FastQ file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an IQualitativeSequence to a FASTQ file in the location specified by the writer.
            </summary>
            <param name="sequence">The QualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.Format(MBF.IQualitativeSequence,System.String)">
            <summary>
            Writes an IQualitativeSequence to the specified file.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param>
            <param name="fileName">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.Format(System.Collections.Generic.ICollection{MBF.IQualitativeSequence},System.String)">
            <summary>
            Writes a list of IQualitativeSequence to the specified file.
            </summary>
            <param name="qualSequences">List of IQualitativeSequence to format.</param>
            <param name="fileName">The name of the file to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.Format(System.Collections.Generic.ICollection{MBF.IQualitativeSequence},System.IO.TextWriter)">
            <summary>
            Writes a list of IQualitativeSequence to the specified text writer.
            </summary>
            <param name="qualSequences">List of IQualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.Format(MBF.IQualitativeSequence,System.IO.TextWriter)">
            <summary>
            Writes an IQualitativeSequence to the specified text writer.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQFormatter.FormatString(MBF.IQualitativeSequence)">
            <summary>
            Converts an IQualitativeSequence to a formatted text.
            </summary>
            <param name="qualSequence">The QualitativeSequence to format.</param> 
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:MBF.IO.FastQ.FastQFormatter.Name">
            <summary>
            Gets the name of Formatter i.e FastQ.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQFormatter.Description">
            <summary>
            Gets the description of FastQ formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            FastQFormatter class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTQ file.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.OverlapDeNovoAssembly">
            <summary>
            OverlapDeNovoAssembly is a implementation of IOverlapDeNovoAssembly that stores the 
            assembly result.
            
            This class contains list of contigs and list of unmerged sequences.
            To maintain the information like history or context, use Documentation property of this class.
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IOverlapDeNovoAssembly">
            <summary>
            An IOverlapDeNovoAssembly is the result of running 
            Overlap based De Novo Assembly on a set of two or more sequences. 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembly.Contigs">
            <summary>
            Gets list of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IOverlapDeNovoAssembly.UnmergedSequences">
            <summary>
            Gets list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembly._contigs">
            <summary>
            Holds list of contigs created after Assembly.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.OverlapDeNovoAssembly._unmergedSequences">
            <summary>
            Holds list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.#ctor">
            <summary>
            Initializes a new instance of the OverlapDeNovoAssembly class.
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the OverlapDeNovoAssembly class.
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the OverlapDeNovoAssembly.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.Contigs">
            <summary>
            Gets list of contigs created after Assembly.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.UnmergedSequences">
            <summary>
            Gets list of sequences that could not be merged into any contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.AssembledSequences">
            <summary>
            Gets the list of assembled sequences
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.OverlapDeNovoAssembly.Documentation">
            <summary>
            Gets or sets the Documentation object is intended for tracking the history, provenance,
            and experimental context of a OverlapDeNovoAssembly. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes">
            <summary>
            This class implements IAlignmentAttributes interface and defines all the 
            parameters required to run any pairwise algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.SimilarityMatrix">
            <summary>
            Describes matrix that determines the score for any possible pair
            of symbols
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.GapOpenCost">
            <summary>
            Describes cost of inserting a gap character into a sequence.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.GapExtensionCost">
            <summary>
            Describes cost of extending an already existing gap.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.attributes">
            <summary>
            List of Parameters required to run NUCmer
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.#ctor">
            <summary>
            Initializes a new instance of the PairwiseAlignmentAttributes class.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseAlignmentAttributes.Attributes">
            <summary>
            Gets list of attributes
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.Cluster">
            <summary>
            An ordered list of matches between two a pair of sequences
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Cluster.ReverseDirection">
            <summary>
            Represents reverse query sequence direction
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Cluster.ForwardDirection">
            <summary>
            Represents forward query sequence direction
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.Cluster._matches">
            <summary>
            List of maximum unique matches inside the cluster
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.Cluster.#ctor(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatchExtension})">
            <summary>
            Initializes a new instance of the Cluster class
            </summary>
            <param name="matches">List of matches</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Cluster.Matches">
            <summary>
            Gets list of maximum unique matches inside the cluster
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Cluster.QueryDirection">
            <summary>
            Gets or sets the query sequence direction
                FORWARD or REVERSE
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.Cluster.IsFused">
            <summary>
            Gets or sets a value indicating whether the cluster is already fused
            </summary>
        </member>
        <member name="T:MBF.Matrix.RowKeysPairAnsi">
            <summary>
            Be sure to use this is a "Using" to that it gets disposed correctly.
            </summary>
        </member>
        <member name="M:MBF.Matrix.RowKeysPairAnsi.GetInstanceFromPairAnsi(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysPairAnsi from a file in DensePairAnsi format.
            The RowKeysPairAnsi is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="pairAnsiFileName">The pairAnsi file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>A RowKeysPairAnsi object </returns>
        </member>
        <member name="M:MBF.Matrix.RowKeysPairAnsi.GetInstanceFromRowKeysAnsi(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysPairAnsi from a file in RowKeysPairAnsi format.
            The RowKeysPairAnsi is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="rowKeysAnsiFileName">The RowKeysPairAnsi file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>A RowKeysPairAnsi object</returns>
        </member>
        <member name="T:MBF.IO.SAM.SAMRecordFieldTag">
            <summary>
            This class holds tag persent in the header lines.
            For example, consider the following header line.
            @HD	VN:1.0
            In this example VN:1.0 is the SAMRecordFieldTag.
            Where VN is stored in Tag property and 1.0 is stored 
            in the value property of this class.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMRecordFieldTag.#ctor(System.String,System.String)">
            <summary>
            Creates new SAMRecordFieldTag instance.
            </summary>
            <param name="tag">Record field tag.</param>
            <param name="value">Record field value.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMRecordFieldTag.Tag">
            <summary>
            Record field tag.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMRecordFieldTag.Value">
            <summary>
            Record field tag.
            </summary>
        </member>
        <member name="T:MBF.IO.SidecarFileProvider">
            <summary>
            Factory class which provides indexing of large sequence files. An option to index large 
            files which contain sequences for faster access. This class is used by Data Virtualization, 
            to create a sidecar (.isc) and write pointer info into the file for further access of same file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider.SidecarFileExtension">
            <summary>
            Extension of sidecar files which will be appended to the source filename to create a new sidecar file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider.BlockIndexExtension">
            <summary>
            Extension of a temporary block index file created when parsing multi-line sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider.FileVersion">
            <summary>
            Hard coded version of the file. Used for checking compatibility when loading sidecar files.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider.PayloadBlockSize">
            <summary>
            The total size of data written when writing one sequence pointer to
            the sidecar file. It is used to seek to an item at a given index.
            payload = StartingLine + (StartingIndex + EndingIndex) + Alphabet name character array (3 elements)
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider.BLOCKSIZE">
            <summary>
            The block size for the sequence file being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._streamReader">
            <summary>
            Holds an open file stream to the sidecar file using which we can read sequences on demand
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._streamWriter">
            <summary>
            Holds an open file stream to the sidecar file to write sequence information to it.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._blockIndexStreamWriter">
            <summary>
            Holds an open file stream to a temporary file to which block indices are
            written when a multi-line sequence is being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._offsetReader">
            <summary>
            This binary reader is used to read the offset of a particular item in the payload
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._offsetWriter">
            <summary>
            Writes sequence index information to the sidecar file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._blockIndexOffsetWriter">
            <summary>
            Writes block index information to a temporary file when a multi-line
            sequence is being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._header">
            <summary>
            Header information of the sidecar file
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._contentsOffset">
            <summary>
            Offset from the beginning of the outputStream to the starting of the sequence indexes.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._disposed">
            <summary>
            Tracks whether Dispose has been called.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._sidecarLastWriteTime">
            <summary>
            Last written time of the sidecar file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._sidecarLength">
            <summary>
            Size of sidecar file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._sourceFileName">
            <summary>
            The full path to the source file for which a sidecar is being created.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._sequenceCount">
            <summary>
            The number of sequences in the source file.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._prevSequenceCount">
            <summary>
            The index of the previous sequence parsed.
            Used when multi-line sequences are being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.SidecarFileProvider._currentBlockStartingIndex">
            <summary>
            The starting index of the current block.
            Used when multi-line sequences are being parsed.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of SidecarFileProvider class, either by
            creating a stream reader to a sidecar file that is valid for the 
            specified source sequence file, or by creating a stream writer to
            a newly created blank sidecar file.
            </summary>
            <param name="sourceFileName">Full path to the source sequence file. 
            This method will search for the sidecar file by itself</param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of SidecarFileProvider, forcing
            a new sidecar file to be created.
            </summary>
            <param name="sourceFileName">Full path to the source sequence file.</param>
            <param name="forceCreation">
            A value indicating whether creation of a new sidecar file should be forced.
            </param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.CreateSidecarFile(System.String,System.Collections.Generic.IList{MBF.IO.SequencePointer})">
            <summary>
            Method to create a sidecar file if one does not exist.
            </summary>
            <param name="sourceFileName">The name of the source file.</param>
            <param name="sequencePointers">
            A list of sequence pointers representing each sequence in the source.</param>
            <returns>A sidecar file object.</returns>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.SeekToSequenceIndexesStart">
            <summary>
            Seeks to the end of the header region in the sidecar file,
            which is the starting of the sequence indices.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.Dispose">
            <summary>
            Implementation of IDispose to close the file streams as soon as possible
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.ReadHeader(System.IO.BinaryReader)">
            <summary>
            Reads the header information from an sidecar file
            and reconstructs a header object.
            </summary>
            <param name="reader">A binary reader to the sidecar file.</param>
            <returns>The reconstructed header object.</returns>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WriteBlockIndexesToSidecar">
            <summary>
            Reads the complete set of block indices for each sequence from
            a temporary block index file and writes it to the sidecar file,
            then deletes the temporary file. This method is used when parsing
            files containing sequences that span multiple lines.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WriteBlockIndex(System.Int32)">
            <summary>
            Writes a single block index to a temporary block index file.
            Used when parsing multi-line sequences.
            </summary>
            <param name="index">
            The block index to be written to the temporary file.
            </param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WriteLastBlockSize">
            <summary>
            Writes the block size for the last sequence block.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WritePointer(System.IO.Stream,MBF.IO.SequencePointer)">
            <summary>
            Writes the sequence pointer to a binary stream.
            </summary>
            <param name="streamWriter">The outputStream to serialize to.</param>
            <param name="sequencePointer">Sequence pointer obejct to serialize</param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WritePointer(MBF.IO.SequencePointer)">
            <summary>
            Writes a specified sequence pointer to the current position in the 
            file stream of the sidecar file associated with this object. 
            </summary>
            <param name="sequencePointer">
            The sequence pointer object to be written.
            </param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.Close">
            <summary>
            Closes all streams open for the sidecar file that
            this object represents.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.Cleanup">
            <summary>
            Closes any streams open for the sidecar file associated with this 
            object and deletes the sidecar file.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.GetBlockToLoad(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the file position of the block of sequence items to load for
            the specified sequence and the specified sequence item index.
            </summary>
            <param name="sequenceIndex">
            The starting file position of the specified sequence.
            </param>
            <param name="sequenceItemIndex">
            The zero-based index of the specified sequence item in the sequence.
            </param>
            <param name="firstSymbolIndex">
            The zero-based index of the first sequence item within the block to be loaded.
            </param>
            <param name="symbolCount">
            The number of sequence items in the block to be loaded.
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.ReadPointer(System.IO.FileStream)">
            <summary>
            Reads a sequence pointer from a binary stream.
            </summary>
            <param name="stream">The stream to deserialize from.</param>
            <returns>The SequencePointer object.</returns>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.OpenSidecar(System.String)">
            <summary>
            Opens an existing sidecar file and checks its validity.
            </summary>
            <param name="sidecarFileName">The path to the sidecar file.</param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.CloseInputStream">
            <summary>
            Closes all input streams open for the sidecar file that
            this object represents.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.CloseOutputStream">
            <summary>
            Closes all output streams open for the sidecar file that
            this object represents.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.CloseBlockIndexOutputStream">
            <summary>
            Closes the output stream created to store block
            information for multi-line sequences.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.CreateBlankSidecarFile(System.String)">
            <summary>
            Create a blank sidecar file.
            </summary>
            <param name="sidecarFileName">The path to the sidecar file.</param>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.WriteHeaderData(System.Int32)">
            <summary>
            Writes the header to the sidecar file, and also writes information
            about the sidecar file itself.
            </summary>
            <param name="sequenceCount">The number of sequences in the source file.</param>
            <returns>true if the header was successfully created; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.Dispose(System.Boolean)">
            <summary>
            Implementation of IDispose to close the file streams as soon as possible
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.IsSidecarValid">
            <summary>
            Indicates whether the given sidecar file contains
            valid indexes for the specified source file.
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.SidecarFileExists">
            <summary>
            Indicates whether a sidecar file exists on disk.
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.HasBlockInfo">
            <summary>
            Indicates whether the given sidecar file stores
            x-axis block information for each sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.Count">
            <summary>
            Return number of seqences in the original file
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.Item(System.Int32)">
            <summary>
            Indexer with which one can access the sequences in the indexed file.
            </summary>
            <param name="index">The zero-based index of the SequencePointer to fetch.</param>
            <returns>SequencePointer object at the specified index.</returns>
        </member>
        <member name="T:MBF.IO.SidecarFileProvider.SidecarFileHeader">
            <summary>
            Private nested class which has the implementation of the header structure
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.SidecarFileHeader.#ctor">
            <summary>
            Creates a new instance of an empty sidecar file header.
            </summary>
        </member>
        <member name="M:MBF.IO.SidecarFileProvider.SidecarFileHeader.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the sidecar file header.
            </summary>
            <param name="sourceFilename">Name of the source file.</param>
            <param name="sequenceCount">Number of sequences in the parsed file.</param>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.SidecarFileHeader.SourceFileLastWriteTime">
            <summary>
            File last written time.
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.SidecarFileHeader.SequenceCount">
            <summary>
            Number of sequences in file.
            </summary>
        </member>
        <member name="P:MBF.IO.SidecarFileProvider.SidecarFileHeader.FileVersion">
            <summary>
            Framework version info.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection">
            <summary>
            Provides the base class for a read-only aligned sequence collection.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.#ctor(System.Collections.Generic.IList{MBF.IO.SAM.SAMAlignedSequence})">
            <summary>
            Initializes a new instance of the ReadOnlyAlignedSequenceCollection
            class that is a read-only wrapper around the specified list.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Contains(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
             Determines whether an element is in the ReadOnlyAlignedSequenceCollection.
            </summary>
            <param name="item">
            The object to locate in the ReadOnlyAlignedSequenceCollection.
            </param>
            <returns>
            true if value is found in the ReadOnlyAlignedSequenceCollection;
            otherwise, false.
            </returns>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.CopyTo(MBF.Algorithms.Alignment.IAlignedSequence[],System.Int32)">
            <summary>
            Copies the entire ReadOnlyAlignedSequenceCollection to
            a compatible one-dimensional array, starting at the specified index
            of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from ReadOnlyAlignedSequenceCollection. The array
            must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ReadOnlyAlignedSequenceCollection.
            </summary>
            <returns>An enumerator for the ReadOnlyAlignedSequenceCollection.</returns>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ReadOnlyAlignedSequenceCollection.
            </summary>
            <returns>An enumerator for the ReadOnlyAlignedSequenceCollection.</returns>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.IndexOf(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire ReadOnlyAlignedSequenceCollection.
            </summary>
            <param name="item">
            The object to locate in the ReadOnlyAlignedSequenceCollection. The value
            can be null for reference types.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the entire ReadOnlyAlignedSequenceCollection,
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Insert(System.Int32,MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            This method is not supported since ReadOnlyAlignedSequenceCollection is read-only.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the ReadOnlyAlignedSequenceCollection.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.RemoveAt(System.Int32)">
            <summary>
            This method is not supported since ReadOnlyAlignedSequenceCollection is read-only.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Add(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            This method is not supported since ReadOnlyAlignedSequenceCollection is read-only.
            </summary>
            <param name="item">The object to add to the ReadOnlyAlignedSequenceCollection.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Clear">
            <summary>
            This method is not supported since ReadOnlyAlignedSequenceCollection is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Remove(MBF.Algorithms.Alignment.IAlignedSequence)">
            <summary>
            This method is not supported since ReadOnlyAlignedSequenceCollection is read-only.
            </summary>
            <param name="item">The object to remove from the ReadOnlyAlignedSequenceCollection.</param>
            <returns>true if item was successfully removed from the ReadOnlyAlignedSequenceCollection;
            otherwise, false. This method also returns false if item is not found in
            the original ReadOnlyAlignedSequenceCollection.</returns>
        </member>
        <member name="P:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the ReadOnlyAlignedSequenceCollection
            is read-only.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Count">
            <summary>
            Gets the number of elements contained in the ReadOnlyAlignedSequenceCollection
             instance.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.ReadOnlyAlignedSequenceCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            Throws a NotSupportedException when attempting to set the position
            since VirtualAlignedSequenceList is read-only.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="F:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator._alignedSequences">
            <summary>
            A list of sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator._index">
            <summary>
            The zero-based index of the sequence in the list.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator._disposed">
            <summary>
            Track whether disposed has been called.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.#ctor(System.Collections.Generic.IList{MBF.Algorithms.Alignment.IAlignedSequence})">
            <summary>
            Initializes an enumerator for the VirtualAlignedSequenceEnumerator.
            </summary>
            <param name="virtualAlignedSequenceList"></param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.Dispose">
            <summary>
            Disposes of any allocated memory.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes of any allocated memory.
            </summary>
            <param name="disposing">Indicates whether to dispose of all resources or only unmanaged ones.</param>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.ReadOnlyAlignedSequenceCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="T:MBF.IO.ClustalW.ClustalWParser">
            <summary>
            A ClustalWParser reads from a source of text that is formatted according to the ClustalW flat
            file specification, and converts the data to in-memory ISequenceAlignment objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            </summary>
        </member>
        <member name="F:MBF.IO.ClustalW.ClustalWParser._basicParser">
            <summary>
            Basic Sequence Alignment Parser that contains all the common methods required.
            </summary>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.#ctor">
            <summary>
            Initializes a new instance of the ClustalWParser class.
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Initializes a new instance of the ClustalWParser class.
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence alignment texts from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequenceAlignment objects.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence alignment text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence alignment text from a file.
            </summary>
            <param name="fileName">The name of a biological sequence alignment file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequenceAlignment object.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of sequences using a MBFTextReader.
            </summary>
            <remarks>
            This method should be overridden by any parsers that need to process file-scope
            metadata that applies to all of the sequences in the file.
            </remarks>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single ClustalW text from a reader into a sequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence Alignment instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.ClustalW.ClustalWParser.ParseOne(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single sequences using a MBFTextReader.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence alignment should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.</param>
            <returns>A new Sequence Alignment instance containing parsed data.</returns>
        </member>
        <member name="P:MBF.IO.ClustalW.ClustalWParser.Name">
            <summary>
            Gets the name of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.ClustalW.ClustalWParser.Description">
            <summary>
            Gets the description of the sequence alignment parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.ClustalW.ClustalWParser.Alphabet">
            <summary>
            Gets or sets alphabet to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.ClustalW.ClustalWParser.Encoding">
            <summary>
            Gets or sets encoding to use for sequences in parsed ISequenceAlignment objects.
            </summary>
        </member>
        <member name="P:MBF.IO.ClustalW.ClustalWParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.GenericIListEnumerator`1">
            <summary>
            Generic Enumerator implementation which works on an IList.
            </summary>
        </member>
        <member name="M:MBF.GenericIListEnumerator`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs an enumerator for specified list of items.
            </summary>
        </member>
        <member name="M:MBF.GenericIListEnumerator`1.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:MBF.GenericIListEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next item
            </summary>
            <returns>True if the enumerator can advance. False if the end index is reached.</returns>
        </member>
        <member name="M:MBF.GenericIListEnumerator`1.Reset">
            <summary>
            Resets the enumerator to the start position.
            </summary>
        </member>
        <member name="P:MBF.GenericIListEnumerator`1.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.GenericIListEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger">
            <summary>
            Framework for detecting erroneous nodes and removing them.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger.RemoveErroneousNodes(MBF.Algorithms.Assembly.Graph.DeBruijnGraph,MBF.Algorithms.Assembly.Graph.DeBruijnPathList)">
            <summary>
            Modifies de bruijn graph
            Removes all the nodes in input
            </summary>
            <param name="graph">De Bruijn Graph</param>
            <param name="nodesList">List of nodes to be removed</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger.DetectErroneousNodes(MBF.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Detects nodes that satisfy some error conditions 
            </summary>
            <param name="graph">Input graph</param>
            <returns>List of error nodes</returns>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.IGraphErrorPurger.LengthThreshold">
            <summary>
            Gets or sets the threshold length
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IMatePairMapper">
            <summary>
            Map Reads to Mate Pairs
            Interface can be implemented by classes which map reads to mate pairs
            in another input formats
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.IMatePairMapper.Map(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Map Reads to mate pairs.
            </summary>
            <param name="reads">List of reads.</param>
            <returns>List of mate pairs.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.IMatePairMapper.MapContigToMatePairs(System.Collections.Generic.IList{MBF.ISequence},MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap)">
            <summary>
            Finds contig pairs having valid mate pairs connection between them.
            </summary>
            <param name="reads">Input list of reads.</param>
            <param name="alignment">Reads con alignment.</param>
            <returns>Contig Mate pair map.</returns>
        </member>
        <member name="T:MBF.Algorithms.Alignment.IPairwiseSequenceAlignment">
            <summary>
            An IPairwiseSequenceAlignment is the result of running a Pairwise alignment algorithm on a set 
            of two sequences.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="M:MBF.Algorithms.Alignment.IPairwiseSequenceAlignment.AddSequence(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="pairwiseAlignedSequence">The PairwiseAlignedSequence to add.</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IPairwiseSequenceAlignment.PairwiseAlignedSequences">
            <summary>
            Gets list of the (output) aligned sequences with score, offset and consensus 
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IPairwiseSequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.IPairwiseSequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence
            </summary>
        </member>
        <member name="T:MBF.Web.ClustalW.ClustalWThreadContext">
            <summary>
            This class has the list of properties that needs to be passed on to
            the BackGroundWorker thread to execute the ClustalW request.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWThreadContext._parameters">
            <summary>
            ClustalW Service parameters object
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWThreadContext.#ctor(MBF.Web.ClustalW.ServiceParameters)">
            <summary>
            Initializes a new instance of the ClustalWThreadContext class. 
            </summary>
            <param name="parameters">ClustalW Service</param>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWThreadContext.Parameters">
            <summary>
            Gets the ClustalW Service parameters
            </summary>
        </member>
        <member name="T:MBF.DifferenceNode">
            <summary>
            Node that tracks difference between the two sequences
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.sequence1Start">
            <summary>
            Start position of difference in first sequence 
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.sequence1End">
            <summary>
            End position of difference in first sequence 
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.sequence2Start">
            <summary>
            Start position of difference in second sequence 
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.sequence2End">
            <summary>
            End position of difference in second sequence 
            </summary>
        </member>
        <member name="M:MBF.DifferenceNode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DifferenceNode class.
            </summary>
            <param name="startIndex1">Start index in first sequence</param>
            <param name="startIndex2">Start index in second sequence</param>
            <param name="endIndex1">End index in first sequence</param>
            <param name="endIndex2">End index in second sequence</param>
        </member>
        <member name="M:MBF.DifferenceNode.CompareDifferenceNode(MBF.WordMatch,MBF.WordMatch)">
            <summary>
            Comparison of two word match list nodes
            based on the first sequence start indices
            </summary>
            <param name="n1">First match list node</param>
            <param name="n2">Second match list node</param>
            <returns>Integer value indicating zero if equal.</returns>
        </member>
        <member name="M:MBF.DifferenceNode.BuildDiffList(System.Collections.Generic.List{MBF.WordMatch},MBF.ISequence,MBF.ISequence)">
            <summary>
            Builds difference list from match list
            </summary>
            <param name="matchList">List of matching segments</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <returns>List of difference nodes</returns>
        </member>
        <member name="M:MBF.DifferenceNode.OutputDiffList(System.Collections.Generic.List{MBF.DifferenceNode},MBF.ISequence,MBF.ISequence)">
            <summary>
            Constructs output from input difference list
            </summary>
            <param name="diffList">Difference list</param>
            <param name="sequence1">First Sequence</param>
            <param name="sequence2">Second Sequence</param>
            <returns>List of features</returns>
        </member>
        <member name="M:MBF.DifferenceNode.ComputeFeatures(System.Int32,System.Int32,System.Int32,System.Int32,MBF.ISequence,MBF.ISequence,System.Int32,System.Int32)">
            <summary>
            Computes features for current difference
            </summary>
            <param name="sequence1Start">Start index of difference in first sequence</param>
            <param name="sequence2Start">Start index of difference in second sequence</param>
            <param name="sequence1End">End index of difference in first sequence</param>
            <param name="sequence2End">End index of difference in second sequence</param>
            <param name="sequence1">First sequence</param>
            <param name="sequence2">Second sequence</param>
            <param name="sequence1Index">First sequence index</param>
            <param name="sequence2Index">Second sequence index</param>
            <returns>List of features</returns>
        </member>
        <member name="M:MBF.DifferenceNode.ToString">
            <summary>
            Constructs a user-friendly string representation.
            Used for debug purpose.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:MBF.DifferenceNode.Sequence1Start">
            <summary>
            Gets start index of difference in first sequence
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.Sequence2Start">
            <summary>
            Gets start index of difference in second sequence
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.Sequence1End">
            <summary>
            Gets end index of difference in first sequence
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.Sequence2End">
            <summary>
            Gets end index of difference in second sequence
            </summary>
        </member>
        <member name="T:MBF.DifferenceNode.CompareFeature">
            <summary>
            Structure that maintains node structure for feature list.
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.CompareFeature.start">
            <summary>
            Difference start position
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.CompareFeature.end">
            <summary>
            Difference end position
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.CompareFeature.featureType">
            <summary>
            Type of feature
            </summary>
        </member>
        <member name="F:MBF.DifferenceNode.CompareFeature.feature">
            <summary>
            Feature Description
            </summary>
        </member>
        <member name="M:MBF.DifferenceNode.CompareFeature.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the CompareFeature class.
            </summary>
            <param name="startPosition">Difference start position</param>
            <param name="endPosition">Difference end position</param>
            <param name="featureType">Type of feature</param>
            <param name="feature">Feature details</param>
        </member>
        <member name="P:MBF.DifferenceNode.CompareFeature.Start">
            <summary>
            Gets value of start index 
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.CompareFeature.End">
            <summary>
            Gets value of end index 
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.CompareFeature.FeatureType">
            <summary>
            Gets value of feature type
            </summary>
        </member>
        <member name="P:MBF.DifferenceNode.CompareFeature.Feature">
            <summary>
            Gets feature description
            </summary>
        </member>
        <member name="T:MBF.Util.FileUtils">
            <summary>
            A static class of methods related to files.
            </summary>
        </member>
        <member name="F:MBF.Util.FileUtils.CommentHeader">
            <summary>
            The string that tells the parser how comments are marked.
            </summary>
        </member>
        <member name="M:MBF.Util.FileUtils.OpenTextStripComments(System.IO.FileInfo)">
            <summary>
            Open a FileInfo as a StreamReader that skips over comments.
            </summary>
            <param name="file">The FileInfo to read</param>
            <returns>a StreamReader that skips over comments</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.OpenTextStripComments(System.String)">
            <summary>
            Open the named file as a StreamReader that skips over comments.
            </summary>
            <param name="filename">The file to read</param>
            <returns>a StreamReader that skips over comments</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.StripComments(System.IO.Stream)">
            <summary>
            Filter the comments out of a stream.
            </summary>
            <param name="stream">The steam to filter</param>
            <returns>a StreamReader that skips over comments</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadLine(System.IO.FileInfo)">
            <summary>
            Read the first line of a file after any comments.
            </summary>
            <param name="file">The FileInfo from which to read.</param>
            <returns>The first line of a file after skipping any comments.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadLine(System.String)">
            <summary>
            Read the first line of a file after any comments.
            </summary>
            <param name="filename">A name of the file from which to read</param>
            <returns>The first line of a file after skipping any comments.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachLine(System.String)">
            <summary>
            </summary>
            <param name="fileName">The name of the file from which to read.</param>
            <returns>a sequence of lines from a file</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachLine(System.IO.TextReader)">
            <summary>
            Returns a sequence of lines from a TextReader.
            </summary>
            <param name="textReader">A textReader from which to read lines.</param>
            <returns>a sequence of lines from a TextReader</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachLine(System.IO.FileInfo)">
            <summary>
            Returns a sequence of lines from a file.
            </summary>
            <param name="file">A FileInfo from which to read lines.</param>
            <returns>a sequence of lines from a file</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachIndexedLine(System.String)">
            <summary>
            Returns the lines of a file as a pair with both lines and their index number
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <returns>A sequence of KeyValuePair's. The key is the line and the value is the index number.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachIndexedLine(System.IO.TextReader)">
            <summary>
            Returns the lines of a TextReader as a pair with both lines and their index number
            </summary>
            <param name="textReader">The TextReader that is the source of lines.</param>
            <returns>A sequence of KeyValuePair's. The key is the line and the value is the index number.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.ReadEachIndexedLine(System.IO.FileInfo)">
            <summary>
            Returns the lines of a file as a pair with both lines and their index number
            </summary>
            <param name="file">A FileInfo to read from</param>
            <returns>A sequence of KeyValuePair's. The key is the line and the value is the index number.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.GetTextReaderWithExternalReadWriteAccess(System.String)">
            <summary>
            Read a file stripping out comment, but with ReadWrite sharing.
            </summary>
            <param name="filename">The file to read</param>
            <returns>A StreamReader</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.GetFiles(System.String,System.Boolean)">
            <summary>
            Get all the files that fit a pattern. The patterns can contain '*' as a wildcard. Patterns can
            include directories. Patterns can be combined into larger patterns with '+'
            </summary>
            <param name="inputPattern">A file pattern.</param>
            <param name="zeroIsOK">True if its OK that no actual files match the pattern between '+''s.</param>
            <returns>The names of actual files that match the pattern.</returns>
        </member>
        <member name="M:MBF.Util.FileUtils.CreateDirectoryForFileIfNeeded(System.String)">
            <summary>
            Create a directory for a file if the file's directory does not already exist.
            </summary>
            <param name="fileName">The file to create a directory for.</param>
        </member>
        <member name="M:MBF.Util.FileUtils.CreateDirectoryForFileIfNeeded(System.IO.FileInfo)">
            <summary>
            Creates a directory for a file if the file's directory does not already exist.
            </summary>
            <param name="fileInfo">The file for while the directory will be created.</param>
        </member>
        <member name="M:MBF.Util.FileUtils.GetEntryOrCallingAssembly">
            <summary>
            Returns the assembly in which program execution began. If no such assembly exists (for example, if this is running in Silverlight), then returns the calling assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MBF.Util.CommentedStreamReader">
            <summary>
            A stream reader that can skip over comments in the input.
            </summary>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.#ctor(System.IO.FileInfo)">
            <summary>
            Create a CommentedStreamReader from a FileInfo
            </summary>
            <param name="fileInfo">The fileinfo to read.</param>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.#ctor(System.String)">
            <summary>
            Create a CommentedStreamReader from a file
            </summary>
            <param name="filename">The file to read</param>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Create a CommentedStreamReader from a stream
            </summary>
            <param name="stream">The stream to create a CommentedStreamReader from</param>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.ReadLine">
            <summary>
            Returns the next noncomment line
            </summary>
            <returns>The next noncomment line</returns>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.ReadCommentLine">
            <summary>
            Returns the next comment line
            </summary>
            <returns>A comment line</returns>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.ReadCommentOrNonCommentLine(System.Boolean)">
            <summary>
            Read the next line
            </summary>
            <param name="returnComment">if true, returns the next comment line; otherwise, returns the next noncomment line.</param>
            <returns>the next line</returns>
        </member>
        <member name="M:MBF.Util.CommentedStreamReader.ReadAllComments">
            <summary>
            Read all the comments from the stream
            </summary>
            <returns>A sequence of comment lines.</returns>
        </member>
        <member name="P:MBF.Util.CommentedStreamReader.CommentToken">
            <summary>
            The string used to mark a line as a comment line.
            </summary>
        </member>
        <member name="T:MBF.Registration.RegisteredAddIn">
            <summary>
            Self registration is used to get the collection of object which uses the 
            specific custom attribute as part of registration process with MBF
            </summary>
        </member>
        <member name="F:MBF.Registration.RegisteredAddIn.DLLFilter">
            <summary>
            Dll filter.
            </summary>
        </member>
        <member name="M:MBF.Registration.RegisteredAddIn.GetAlphabets(System.Boolean)">
            <summary>
            Gets all registered alphabets in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered alphabets</returns>
        </member>
        <member name="M:MBF.Registration.RegisteredAddIn.GetInstancesFromAssemblyPath``1(System.String,System.String)">
            <summary>
            Gets the instances from any given assembly path with specific filter
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <param name="assemblyPath">assemblies folder location</param>
            <param name="filter">file filter</param>
            <returns>List of Ts</returns>
        </member>
        <member name="M:MBF.Registration.RegisteredAddIn.GetInstancesFromAssembly``1(System.String)">
            <summary>
            Gets the instances from any given assembly file 
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <param name="assemblyName">assembly file</param>
            <returns>List of Ts</returns>
        </member>
        <member name="M:MBF.Registration.RegisteredAddIn.GetInstancesFromExecutingAssembly``1">
            <summary>
            Gets the instances from the executing assembly
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <returns>List of Ts</returns>
        </member>
        <member name="M:MBF.Registration.RegisteredAddIn.Register``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            Registers the set of registrable objects into collection
            </summary>
            <typeparam name="T">Generic - any interface</typeparam>
            <returns>List of Ts</returns>
        </member>
        <member name="P:MBF.Registration.RegisteredAddIn.AddinFolderPath">
            <summary>
            Gets the AddIns folder from MBF installation 
            </summary>
        </member>
        <member name="P:MBF.Registration.RegisteredAddIn.CoreFolderPath">
            <summary>
            Gets the Core folder from MBF installation 
            </summary>
        </member>
        <member name="T:MBF.Encoding.SequenceEncoder">
             <summary>
             This basic implementation of the ISequenceEncoder provides a one to one
             translation from characters to byte values. It uses an IEncoding to determine
             what the mapping is from character to byte value. This encoding should be set
             in the constructor.
             
             If one of the symbols passed in via string (charcters) or via ISequenceItem
             (ISequenceItem.Symbol) has a symbol that is not recognized by the IEncoding for
             your particular instance of this class, an Exception will be thrown when trying
             to encode that item.
             
             For example, using the following code:
             
             SequenceEncoder encoder = new SequenceEncoder(Encodings.Ncbi4Na);
             byte[] encoded = encoder.Encode("GATTC");
             
             will result in a byte array with the values:
             
             { 4, 1, 8, 8, 2 }
            
             
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and from the stored files 
             instances can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="T:MBF.Encoding.ISequenceEncoder">
            <summary>
            Defines the interface for an implementation of an encoder that is able
            to convert ISequenceItems into byte values for internal storage of those
            items.
            </summary>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem},System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem},System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem})">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(MBF.ISequenceItem)">
            <summary>
            Encodes a single sequence item into its byte value
            </summary>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.String,System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.String,System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.ISequenceEncoder.Encode(System.Char)">
            <summary>
            Encodes a single sequence item symbol into its byte value
            </summary>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Creates a sequence encoder by defining the encoding to use.
            </summary>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem},System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem},System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.Collections.Generic.List{MBF.ISequenceItem})">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(MBF.ISequenceItem)">
            <summary>
            Encodes a single sequence item into its byte value
            </summary>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.String,System.Byte[],System.Int32)">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will begin at the position held in
            the offset parameter (indexed counting from 0). If the target array
            is not sufficiently large enough to handle the encoding, the encoding
            will stop once the end of the array is reached.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
            <param name="offset">
            The start index of where the encoding will take place. Counting for this
            offset starts at position zero. For instance,
            if the target array has a length of 10 and the source has a length of 5
            and the offset 7, the last 3 entries of the target array will get the
            encoded values of the first 3 items from the source.
            </param>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.String,System.Byte[])">
            <summary>
            Encodes the source sequence onto a byte array that has already been
            allocated its size. The encoding will start at the beginning of the
            target array and will end when reaching either the end of the source
            or the target array.
            </summary>
            <param name="source">The data to be encoded (eg. "GATTC")</param>
            <param name="target">The array into which the encoded values will be placed</param>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.Encode(System.Char)">
            <summary>
            Encodes a single sequence item symbol into its byte value
            </summary>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Encoding.SequenceEncoder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceEncoder.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Encoding.SequenceEncoder.Encoding">
            <summary>
            The Encoding provides the map from symbol characters to byte values.
            Without a set encoding the encoder can not work.
            </summary>
        </member>
        <member name="T:MBF.Encoding.EncodingMapDirection">
            <summary>
            Indicates which direction the encoding map provides mapping for.
            AlphabetToEncoding converts ISequenceItems from an IAlphabet and
            turns the into ISequenceItems from an IEncoding. EncodingToAlphabet
            does the reverse.
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMapDirection.AlphabetToEncoding">
            <summary>
            Converts ISequenceItems from an IAlphabet into ISequenceItems from an Encoding.
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMapDirection.EncodingToAlphabet">
            <summary>
            Converts ISequenceItems from an Encoding into ISequenceItems from an IAlphabet.
            </summary>
        </member>
        <member name="T:MBF.Encoding.EncodingMap">
            <summary>
            An encoding map provides the translation between items in an Alphabet and
            items in an Encoding. This is important because many alphabets have several
            encodings associated with them and thus you need an explicit map from one
            to the other.
            
            EncodingMap provides static methods for looking up known maps from Alphabet
            to Encoding and from Encoding to Alphabet. It also provides the means for
            defining your own mapping.
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.Ncbi4NAToDna">
            <summary>
            Map from Encoding NCBI4na to Alphabet DNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.Ncbi2NAToDna">
            <summary>
            Map from Encoding NCBI2na to Alphabet DNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.IupacNAToDna">
            <summary>
            Map from Encoding IUPACna to Alphabet DNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.Ncbi4NAToRna">
            <summary>
            Map from Encoding NCBI4na to Alphabet RNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.Ncbi2NAToRna">
            <summary>
            Map from Encoding NCBI2na to Alphabet RNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.IupacNAToRna">
            <summary>
            Map from Encoding IUPACna to Alphabet RNA
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.DnaToNcbi4NA">
            <summary>
            Map from Alphabet DNA to Encoding NCBI4na
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.DnaToNcbi2NA">
            <summary>
            Map from Alphabet DNA to Encoding NCBI2na
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.DnaToIupacNA">
            <summary>
            Map from Alphabet DNA to Encoding IUPACna
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.RnaToNcbi4NA">
            <summary>
            Map from Alphabet RNA to Encoding NCBI4na
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.RnaToNcbi2NA">
            <summary>
            Map from Alphabet RNA to Encoding NCBI2na
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.RnaToIupacNA">
            <summary>
            Map from Alphabet RNA to Encoding IUPACna
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.ProteinToNcbiStdAA">
            <summary>
            Map from Alphabet Protein to Encoding NCBIstdaa
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.ProteinToNcbiEAA">
            <summary>
            Map from Alphabet Protein to Encoding NCBIeaa
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.NcbiStdAAToProtein">
            <summary>
            Map from Encoding NCBIstdaa to Alphabet Protein
            </summary>
        </member>
        <member name="F:MBF.Encoding.EncodingMap.NcbiEAAToProtein">
            <summary>
            Map from Encoding NCBIstdaa to Alphabet Protein
            </summary>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.GetDefaultMap(MBF.IAlphabet)">
            <summary>
            Looks up the default encoding map for known alphabets to the default
            encoding for that alphabet. Several encodings may exist for any one
            particular alphabet. If you want to select a particular encoding,
            consider using the GetMapToEncoding() method.
            </summary>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.GetDefaultMap(MBF.Encoding.IEncoding)">
            <summary>
            Looks up the default encoding map for a known encoding to the
            default alphabet for that encoding. Several alphabets may exist
            for any one particular encoding. If you want to select a particular
            alphabet, consider using the GetMapToAlphabet() method.
            </summary>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.GetMapToEncoding(MBF.IAlphabet,MBF.Encoding.IEncoding)">
            <summary>
            Looks amongst all the known encoding maps for one that provides a mapping
            from the alphabet passed in as a parameter to the encoding passed in as a
            parameter.
            </summary>
            <returns>The known encoding map, or null if one is not available</returns>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.GetMapToAlphabet(MBF.Encoding.IEncoding,MBF.IAlphabet)">
            <summary>
            Looks amongst all the known encoding maps for one that provides a mapping
            from the encoding passed in as a parameter to the alphabet passed in as a
            parameter.
            </summary>
            <returns>The known encoding map, or null if one is not available</returns>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.Convert(MBF.ISequenceItem)">
            <summary>
            Converts the ISequenceItem passed in as a parameter from one collection
            of such items to another. This is useful in going from encoded items to
            alphabet items for instance.
            </summary>
        </member>
        <member name="M:MBF.Encoding.EncodingMap.GetMap(System.Collections.Generic.IEnumerable{MBF.ISequenceItem},System.Func{MBF.ISequenceItem,MBF.ISequenceItem})">
            <summary>
            Instead of using a Dictionary to map a known set of character IDs create an
            array the length of sequence items for that map.  This is immensely faster for a large
            number of access operations than using a hash function.  Since the Convert method will
            be used every time a sequence item is accessed from a sequence this needs to be as 
            performant as possible.
            
            Originaly to serialize 100 sequences of 11,000 items a piece time was 13.2 seconds.  After
            switching to this method it is 5.0 seconds. (Times are with JetBrain's dotTrace profiler attached)
            </summary>
            <returns></returns>
        </member>
        <member name="P:MBF.Encoding.EncodingMap.Alphabet">
            <summary>
            The alphabet source for the encoding map
            </summary>
        </member>
        <member name="P:MBF.Encoding.EncodingMap.Encoding">
            <summary>
            The encoding source for the encoding map
            </summary>
        </member>
        <member name="T:MBF.IO.ISnpReader">
            <summary>
            Interface for exposing a collection of SnpItems as an enumerator with 
            ability to skip to specific chromosome number and position.
            </summary>
        </member>
        <member name="M:MBF.IO.ISnpReader.SkipToChromosome(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
             or beyond the end of the enumerator if none exist. 
             This is useful when traversing sorted SNP sequences and we need to 
             jump to a specific chromosome number.
             The enumerator should be positioned at or after the first item and at or before the last item.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             
             <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
             False if no subsequent SnpItems exist with given chromosome number.
             If returning true, the Current item will have given chromosome number.
             </returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:MBF.IO.ISnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number and position 
             (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome number+position.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if a SnpItem with given chromosome number and position is found.
             If end of file is reached before this they are found, it returns false. 
             If returning true, the Current item will have given chromosome number and position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:MBF.IO.ISnpReader.SkipToChromosomePosition(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the current chromosome number
             and position equal to the given position
             (i.e. Current.Position == position and Current.Chromosome does not change), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome position within current chromosome position.
             </summary>
             
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if this position is found. 
             False if the next chromosome number is encountered, or end of file is 
             reached before the position is found. If returning true, the Current item 
             will contain the starting chromosome number and given position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:MBF.IO.IPhylogeneticTreeFormatter">
            <summary>
            Implementations of this interface write a PhylogeneticTree to a particular location, 
            usually a file. The output is formatted according to the particular file format. 
            A method is also provided for quickly accessing the content in string form for 
            applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeFormatter.Format(MBF.Phylogenetics.Tree,System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to the location specified by the writer.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic Tree text.</param>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeFormatter.Format(MBF.Phylogenetics.Tree,System.String)">
            <summary>
            Writes a PhylogeneticTree to the specified file.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="fileName">The name of the file to write the formatted Phylogenetic Tree text.</param>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeFormatter.FormatString(MBF.Phylogenetics.Tree)">
            <summary>
            Converts a PhylogeneticTree to a formatted string.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeFormatter.Name">
            <summary>
            Gets the name of the Phylogenetic tree being
            implemented. This is intended to give the
            developer some information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeFormatter.Description">
            <summary>
            Gets the description of the Phylogenetic tree formatter being
            implemented. This is intended to give the
            developer some information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.StandardQualifierNames">
            <summary>
            Static class to hold standard qualifier names.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Allele">
            <summary>
            Qualifier name for Allele.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.AntiCodon">
            <summary>
            Qualifier name for AntiCodon.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.BioMaterial">
            <summary>
            Qualifier name for Bio_Material.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.BoundMoiety">
            <summary>
            Qualifier name for Bound_Moiety.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CellLine">
            <summary>
            Qualifier name for Cell_Line.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CellType">
            <summary>
            Qualifier name for Cell_Type.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Chromosome">
            <summary>
            Qualifier name for Chromosome.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Citation">
            <summary>
            Qualifier name for Citation.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.ClonedFrom">
            <summary>
            Qualifier name for Clone.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CloneLibrary">
            <summary>
            Qualifier name for Clone_Lib.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Codon">
            <summary>
            Qualifier name for Codon.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CodonStart">
            <summary>
            Qualifier name for Codon_Start.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CollectedBy">
            <summary>
            Qualifier name for Collected_By.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CollectionDate">
            <summary>
            Qualifier name for Collection_Date.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Compare">
            <summary>
            Qualifier name for Compare.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Country">
            <summary>
            Qualifier name for Country.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CultivatedVariety">
            <summary>
            Qualifier name for Cultivar.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.CultureCollection">
            <summary>
            Qualifier name for Culture_Collection.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.DatabaseCrossReference">
            <summary>
            Qualifier name for DatabaseCrossReference (Db_Xref).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.DevelopmentalStage">
            <summary>
            Qualifier name for Dev_Stage.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Direction">
            <summary>
            Qualifier name for Direction.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.EnzymeCommissionNumber">
            <summary>
            Qualifier name for EC_Number.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Ecotype">
            <summary>
            Qualifier name for Ecotype.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.EnvironmentalSample">
            <summary>
            Qualifier name for Environmental_Sample.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.EstimatedLength">
            <summary>
            Qualifier name for Estimated_Length.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Exception">
            <summary>
            Qualifier name for Exception.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Experiment">
            <summary>
            Qualifier name for Experiment.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Focus">
            <summary>
            Qualifier name for Focus.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Frequency">
            <summary>
            Qualifier name for Frequency.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Function">
            <summary>
            Qualifier name for Function.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.GeneSymbol">
            <summary>
            Qualifier name for GeneSymbol.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.GeneSynonym">
            <summary>
            Qualifier name for Gene_Synonym.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Germline">
            <summary>
            Qualifier name for Germline.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Haplotype">
            <summary>
            Qualifier name for Haplotype.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Host">
            <summary>
            Qualifier name for Host.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.IdentifiedBy">
            <summary>
            Qualifier name for Identified_By.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Inference">
            <summary>
            Qualifier name for Inference.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Isolate">
            <summary>
            Qualifier name for Isolate.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.IsolationSource">
            <summary>
            Qualifier name for Isolation_Source.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.LabHost">
            <summary>
            Qualifier name for Lab_Host.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Label">
            <summary>
            Qualifier name for Label.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.LatitudeLongitude">
            <summary>
            Qualifier name for Lat_Lon.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.LocusTag">
            <summary>
            Qualifier name for Locus_Tag.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Macronuclear">
            <summary>
            Qualifier name for Macronuclear.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.GenomicMapPosition">
            <summary>
            Qualifier name for Map.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.MatingType">
            <summary>
            Qualifier name for Mating_Type.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.MobileElement">
            <summary>
            Qualifier name for Mobile_Element.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.ModifiedNucleotideBase">
            <summary>
            Qualifier name for Mod_Base.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.MoleculeType">
            <summary>
            Qualifier name for Mol_Type.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.NonCodingRNAClass">
            <summary>
            Qualifier name for ncRNA_Class.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Note">
            <summary>
            Qualifier name for Note.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Number">
            <summary>
            Qualifier name for Number.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.OldLocusTag">
            <summary>
            Qualifier name for Old_Locus_Tag.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Operon">
            <summary>
            Qualifier name for Operon.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Organelle">
            <summary>
            Qualifier name for Organelle.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Organism">
            <summary>
            Qualifier name for Organism.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.PCRConditions">
            <summary>
            Qualifier name for PCR_Conditions.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.PCRPrimers">
            <summary>
            Qualifier name for PCR_Primers.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Phenotype">
            <summary>
            Qualifier name for Phenotype.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Plasmid">
            <summary>
            Qualifier name for Plasmid.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.PopulationVariant">
            <summary>
            Qualifier name for Pop_Variant.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Product">
            <summary>
            Qualifier name for Product.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.ProteinId">
            <summary>
            Qualifier name for Protein_Id.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Proviral">
            <summary>
            Qualifier name for Proviral.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Pseudo">
            <summary>
            Qualifier name for Pseudo.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Rearranged">
            <summary>
            Qualifier name for Rearranged.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Replace">
            <summary>
            Qualifier name for Replace.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.RibosomalSlippage">
            <summary>
            Qualifier name for Ribosomal_Slippage.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.RepeatedSequenceFamily">
            <summary>
            Qualifier name for Rpt_Family.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.RepeatedSequenceType">
            <summary>
            Qualifier name for Rpt_Type.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.RepeatedRange">
            <summary>
            Qualifier name for Rpt_Unit_Range.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.RepeatedSequence">
            <summary>
            Qualifier name for Rpt_Unit_Seq.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Satellite">
            <summary>
            Qualifier name for Satellite.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Segment">
            <summary>
            Qualifier name for Segment.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Serotype">
            <summary>
            Qualifier name for Serotype.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Serovar">
            <summary>
            Qualifier name for Serovar.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Sex">
            <summary>
            Qualifier name for Sex.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.SpecimenVoucher">
            <summary>
            Qualifier name for Specimen_Voucher.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.StandardName">
            <summary>
            Qualifier name for Standard_Name.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Strain">
            <summary>
            Qualifier name for Strain.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.SubClone">
            <summary>
            Qualifier name for Sub_Clone.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.SubSpecies">
            <summary>
            Qualifier name for Sub_Species.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.SubStrain">
            <summary>
            Qualifier name for Sub_Strain.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TagPeptide">
            <summary>
            Qualifier name for Tag_Peptide.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TissueLibrary">
            <summary>
            Qualifier name for Tissue_Lib.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TissueType">
            <summary>
            Qualifier name for Tissue_Type.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TransSplicing">
            <summary>
            Qualifier name for Trans_Splicing.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Transgenic">
            <summary>
            Qualifier name for Transgenic.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TranslationalExcept">
            <summary>
            Qualifier name for Transl_Except.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.TranslationTable">
            <summary>
            Qualifier name for Transl_Table.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Translation">
            <summary>
            Qualifier name for Translation.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardQualifierNames.Variety">
            <summary>
            Qualifier name for Variety.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.StandardQualifierNames.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StandardQualifierNames.All">
            <summary>
            Returns a list of standard qualifier names.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscDifference">
            <summary>
            Feature sequence is different from that presented in the entry and cannot be described by any 
            other Difference key (conflict, unsure, old_sequence, variation, or modified_base).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscDifference.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscDifference feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscDifference.#ctor(System.String)">
            <summary>
            Creates new MiscDifference feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscDifference.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscDifference.#ctor(MBF.IO.GenBank.MiscDifference)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscDifference instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscDifference.Clone">
            <summary>
            Creates a new MiscDifference that is a copy of the current MiscDifference.
            </summary>
            <returns>A new MiscDifference that is a copy of this MiscDifference.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.ClonedFrom">
            <summary>
            Clone from which the sequence was obtained.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Compare">
            <summary>
            Reference details of an existing public INSD entry to which a comparison is made.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.Replace">
            <summary>
            Indicates that the sequence identified a feature's intervals is replaced by the sequence shown in ""text"";
            if no sequence is contained within the qualifier, this indicates a deletion.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscDifference.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.Encoding.NcbiEAAEncoding">
            <summary>
            A basic encoding that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This encoding closely
            follows the ProteinAlphabet and is based on the standard NCBIeaa.
            This encoding also contains the three letter symbols defined in the
            IUPAC3aa standard.
            
            This encoding assigns values based on the ASCII value of the one
            character symbol of the amino acid. For a more sequential byte value
            encodings see the NcbiStdAAEncoding.
            
            The entries in this dictionary are:
            
            Value - Symbol - Extended Symbol - Name
            
            42 - * - Ter - Termination
            45  - - --- - Gap
            65 - A - Ala - Alanine
            66 - B - Asx - Aspartic Acid or Asparagine
            67 - C - Cys - Cysteine
            68 - D - Asp - Aspartic Acid
            69 - E - Glu - Glutamic Acid
            70 - F - Phe - Phenylalanine
            71 - G - Gly - Glycine
            72 - H - His - Histidine
            73 - I - Ile - Isoleucine
            74 - J - Xle - Leucine or Isoleucine
            75 - K - Lys - Lysine
            76 - L - Leu - Leucine
            77 - M - Met - Methionine
            78 - N - Asn - Asparagine
            79 - O - Pyl - Pyrrolysine
            80 - P - Pro - Proline
            81 - Q - Gln - Glutamine
            82 - R - Arg - Arginine
            83 - S - Ser - Serine
            84 - T - Thr - Threoine
            85 - U - Sel - Selenocysteine
            86 - V - Val - Valine
            87 - W - Trp - Tryptophan
            88 - X - Xxx - Undetermined or atypical
            89 - Y - Tyr - Tyrosine
            90 - Z - Glx - Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Ala">
            <summary>
            Alanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Cys">
            <summary>
            Cysteine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Phe">
            <summary>
            Phenylalanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Gly">
            <summary>
            Glycine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.His">
            <summary>
            Histidine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Ile">
            <summary>
            Isoleucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Lys">
            <summary>
            Lysine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Leu">
            <summary>
            Leucine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Met">
            <summary>
            Methionine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Asn">
            <summary>
            Asparagine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Pyl">
            <summary>
            Pyrrolysine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Pro">
            <summary>
            Proline
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Gln">
            <summary>
            Glutamine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Arg">
            <summary>
            Arginine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Ser">
            <summary>
            Serine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Thr">
            <summary>
            Threoine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Sel">
            <summary>
            Selenocysteine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Val">
            <summary>
            Valine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Trp">
            <summary>
            Tryptophan
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Tyr">
            <summary>
            Tyrosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.NcbiEAAEncoding.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves an encoded AminoAcid instance based on the byte value
            representation of that acid.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.GetComplement(System.Byte)">
            <summary>
            This method is not supported
            </summary>        
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:MBF.Encoding.NcbiEAAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.Instance">
            <summary>
            An instance of the NcbiStdAA encoding for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.Name">
            <summary>
            The name of this alphabet is always 'Protein'
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.Count">
            <summary>
            The number of alphabet symbols. For this alphabet the result should
            always be 28.
            </summary>
        </member>
        <member name="P:MBF.Encoding.NcbiEAAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IndexedItem`1">
            <summary>
            IndexedItem holds an item and its index.
            Index is a zero based position of item.
            This class is used in Sparse Sequence to get the known sequence items with their positions.
            
            This class implements IComparable interface and all comparisons are based on index 
            and not on item.
            </summary>
            <typeparam name="T">The type of item in IndexedItem.</typeparam>
        </member>
        <member name="M:MBF.IndexedItem`1.#ctor(System.Int32,`0)">
            <summary>
            Creates a new IndexedItem from the specified index and item.
            </summary>
            <param name="index">Index of the item specified.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:MBF.IndexedItem`1.op_LessThan(MBF.IndexedItem{`0},MBF.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is less than 
            the index of rightHandSideObject then returns true, else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.op_LessThanOrEqual(MBF.IndexedItem{`0},MBF.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is 
            less than or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is less than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.op_GreaterThan(MBF.IndexedItem{`0},MBF.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than 
            the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.op_GreaterThanOrEqual(MBF.IndexedItem{`0},MBF.IndexedItem{`0})">
            <summary>
            Compares the index of leftHandSideObject and rightHandSideObject, if index of leftHandSideObject is greater than
            or equal to the index of rightHandSideObject then returns true else returns false.
            
            Note that this method will compare only index and will not compare Item property.
            </summary>
            <param name="leftHandSideObject">An instatnce of IndexedItem as first operand.</param>
            <param name="rightHandSideObject">An instatnce of IndexedItem as second operand.</param>
            <returns>Returns true if index of leftHandSideObject is greater than or equal to the index of rightHandSideObject,
            else returns false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.CompareTo(MBF.IndexedItem{`0})">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            </summary>
            <param name="other">IndexedItem to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of other.
            Return value Description:
                  Less than zero index of this instance is less than the index of other.
                  Zero index of this instance is equal to the index of other.
                  Greater than zero index of this instance is greater than the index of other 
                    or other is null.
            </returns>
        </member>
        <member name="M:MBF.IndexedItem`1.Equals(MBF.IndexedItem{`0})">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both Index and Item. If both Index and Item of this instance and 
            other are equal then it returns true, else returns false.
            </summary>
            <param name="other">IndexedItem instance to compare.</param>
            <returns>Returns true if other has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified IndexedItem.
            
            Note that this method compares both index and item. If both Index and Item of this instance and 
            obj are equal then it returns true else returns false.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>Returns true if obj has the same index and item values as of this instance;
            otherwise, false.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:MBF.IndexedItem`1.CompareTo(System.Object)">
            <summary>
            Compares Index property of this instance with the Index property of specified IndexedItem 
            and returns an indication of their relative values.
            
            Parameter obj must be of IndexedItem, else an ArgumentException will occur.
            </summary>
            <param name="obj">IndexedItem instance to compare.</param>
            <returns>
            A signed number indicating the relative values of index property of this instance and the 
            index property of specified IndexedItem.
            Return Value Description:
                  Less than zero index of this instance is less than the index of specified IndexedItem.
                  Zero index of this instance is equal to the index of specified IndexedItem.
                  Greater than zero index of this instance is greater than the index of specified IndexedItem 
                    or specified IndexedItem is null.
            </returns>
        </member>
        <member name="P:MBF.IndexedItem`1.Index">
            <summary>
            Gets or sets the index.
            Specifies the zero based position of the item.
            </summary>
        </member>
        <member name="P:MBF.IndexedItem`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
        </member>
        <member name="T:MBF.Matrix.HashableView`3">
            <summary>
            A wrapper around a parent matrix that allows a matrix to be hashed. This, for example, allows a matrix to be
            used as the key of a dictionary. Two matricies will hash together if they are MatrixEqual.
            
            Every time it needs to confirm that two matrices really are equal, it will call MatrixEqual which
            can require a scan of every value.
            
            The wrapper doesn't allow it's values to be changed. Any changes in the values of its parent matrix will *not* be
            reflected in its hashcode and so can give unexpected results.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.HashableView`3.Remove(`0,`1)">
            <summary>
            The wrapper doesn't allow its values to be changed. This method throws an exception.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <returns>This method throws an exception.</returns>
        </member>
        <member name="M:MBF.Matrix.HashableView`3.SetValueOrMissing(System.Int32,System.Int32,`2)">
            <summary>
            The wrapper doesn't allow its values to be changed. This method throws an exception.
            </summary>
            <param name="rowIndex">The index for the row of interest</param>
            <param name="colIndex">The index for the col of interest</param>
            <param name="value">The value to set</param>
            <returns>This method throws an exception.</returns>
        </member>
        <member name="M:MBF.Matrix.HashableView`3.SetValueOrMissing(`0,`1,`2)">
            <summary>
            The wrapper doesn't allow its values to be changed. This method throws an exception.
            </summary>
            <param name="rowKey">The key for the row of interest. The key must exist in RowKeys (and, thus, IndexOfRowKey)</param>
            <param name="colKey">The key for the col of interest. The key must exist in ColKeys (and, thus, IndexOfColKey)</param>
            <param name="value">Value that will be set.</param>
            <returns>This method throws an exception.</returns>
        </member>
        <member name="M:MBF.Matrix.HashableView`3.GetHashCode">
            <summary>
            Returns the hashcode of the matrix. This values is computed only once from when the HashableView is constructed.
            Two matricies will hash together if they are MatrixEqual.
            
            Every time the class needs to confirm that two matrices really are equal, it will call Equals which calls MatrixEqual which
            can require a scan of every value.
            </summary>
            <returns>a hashcode based on rowKeys, colKeys, special missing value, and values of the matrix.</returns>
        </member>
        <member name="M:MBF.Matrix.HashableView`3.Equals(System.Object)">
            <summary>
            Two HashableView matrices are equal if they are MatrixEquals, that is, they have the same
            RowKeys and ColKeys (in the same order), the same special MissingValue, and the same values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:MBF.Matrix.HashableView`3.ParentMatrix">
            <summary>
            The matrix that this view wraps.
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualSequenceList">
            <summary>
            A VirtualSequenceList is used to store huge list of sequences where all items in the
            list might not be held in memory always. This list will get the item from cache or
            a virtual data provider when requested. Example, FastA file has more than one 
            sequence and Data Virtualization returns this class and then, on demand 
            each sequences are loaded from the FastA file using parser.
            </summary>
        </member>
        <member name="T:MBF.IVirtualSequenceList">
            <summary>
            Interface to virtual sequence list. This interface is used for 
            Large Dataset on Data Virtualization. Example, FastA file has 
            more than one sequence and Data Virtualization returns this 
            interface as a starting. Then, on demand each sequences
            are loaded from the FastA file.
            Classes which implements this interface should hold virtual list of sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList.KBytes">
            <summary>
            1 KB
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList.MaximumDictionaryLength">
            <summary>
            The maximum allowable number of items in the dictionary before the weak
            references are forcibly removed to facilitate optimal use of available memory.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList._count">
            <summary>
            Number of items in the actual file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList._sidecarProvider">
            <summary>
            SequencePointer provider from sidecar file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList._sequenceParser">
            <summary>
            Parser used to parse sequence data on request
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceList._sequenceDictionary">
            <summary>
            Contains the index of the sequence in the actual file, and a weak reference to that sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.#ctor(MBF.IO.SidecarFileProvider,MBF.IO.IVirtualSequenceParser,System.Int32)">
            <summary>
            Initializes a new instance of the VirtualSequenceList class with a specified provider,
            a specified parser, and a specifed sequence count.
            </summary>
            <param name="provider">SequencePointer provider from sidecar file.</param>
            <param name="parser">Parser used to parse sequence data on request.</param>
            <param name="count">Number of items in the actual file.</param>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.IndexOf(MBF.ISequence)">
            <summary>
            Returns the index of the first sequence matching the sequence
            passed in to the parameter. This does not do a value-based
            comparison. The match must be the exact same ISequence.
            </summary>
            <returns>the zero-based index of the sequence if found; otherwise, -1</returns>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.Insert(System.Int32,MBF.ISequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.RemoveAt(System.Int32)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.Add(MBF.ISequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.Clear">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.Contains(MBF.ISequence)">
            <summary>
            Determines whether a specific sequence is in the virtual sequence list.
            </summary>
            <param name="item">The sequence to locate in the list.</param>
            <returns>true if the sequence is found in the list; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.CopyTo(MBF.ISequence[],System.Int32)">
            <summary>
            Copies the entire virtual sequence list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current list. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.Remove(MBF.ISequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.GetEnumerator">
            <summary>
            Get the enumerator to the sequences in the list.
            </summary>
            <returns>The enumerator to the sequences in the list.</returns>
        </member>
        <member name="M:MBF.IO.VirtualSequenceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator to the sequences in the list.
            </summary>
            <returns>The enumerator to the sequences in the list.</returns>
        </member>
        <member name="P:MBF.IO.VirtualSequenceList.CreateSequenceAsReadOnly">
            <summary>
            Gets or sets a value indicating whether to set the sequence to read-only
            when reading from the sidecar file.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualSequenceList.Item(System.Int32)">
            <summary>
            Gets the index of a sequence within the list.
            Throws a NotSupportedException when attempting to set the position
            since VirtualSequenceList is read-only.
            </summary>
            <param name="index">The zero-based index of the sequence in the list.</param>
            <returns>The sequence found at the specified index.</returns>
        </member>
        <member name="P:MBF.IO.VirtualSequenceList.Count">
            <summary>
            Gets the number of sequences in the list.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualSequenceList.IsReadOnly">
            <summary>
            Gets the read-only status of the list.
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualSequenceEnumerator">
            <summary>
            Implementation of the enumerator for the VirtualSequenceList.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceEnumerator._sequences">
            <summary>
            A list of sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceEnumerator._index">
            <summary>
            The zero-based index of the sequence in the list.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualSequenceEnumerator._disposed">
            <summary>
            Track whether disposed has been called.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceEnumerator.#ctor(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Initializes an enumerator for the VirtualSequenceList.
            </summary>
            <param name="virtualSequenceList"></param>
        </member>
        <member name="M:MBF.IO.VirtualSequenceEnumerator.Dispose">
            <summary>
            Disposes of any allocated memory.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualSequenceEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes of any allocated memory.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MBF.IO.VirtualSequenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.VirtualSequenceEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualSequenceEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualSequenceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="T:MBF.IO.SequencePointer">
            <summary>
            This class holds data needed to index each sequence in a sequence file 
            when data virtualization is enabled. The data is serialized into a
            sidecar file to enable faster parsing and sequence access.
            </summary>
        </member>
        <member name="M:MBF.IO.SequencePointer.#ctor">
            <summary>
            Initializes a new instance of the SequencePointer class.
            </summary>
        </member>
        <member name="P:MBF.IO.SequencePointer.StartingLine">
            <summary>
            Zero-based starting line number of the specified sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SequencePointer.IndexOffsets">
            <summary>
            Gets the zero-based indexes of the offsets of the specified sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SequencePointer.Id">
            <summary>
            ID of the specified sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SequencePointer.AlphabetName">
            <summary>
            Alphabet type of the specified sequence.
            </summary>
        </member>
        <member name="T:MBF.IO.SequenceAlignmentParsers">
            <summary>
            SequenceAlignmentParsers class is an abstraction class which provides instances
            and lists of all Sequence Alignment Parsers currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentParsers._sam">
            <summary>
            An instance of SAMParser class which is capable of
            parsing SAM format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentParsers._bam">
            <summary>
            An instance of BAMParser class which is capable of
            parsing BAM format files.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceAlignmentParsers.all">
            <summary>
            List of all supported sequence alignment parsers.
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentParsers.FindParserByFile(System.String)">
            <summary>
            Returns parser which supports the specified file.
            </summary>
            <param name="fileName">File name for which the parser is required.</param>
            <returns>If found returns the parser as ISequenceAlignmentParser else returns null.</returns>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentParsers.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceAlignmentParsers.GetSequenceAlignmentParsers(System.Boolean)">
            <summary>
            Gets all registered sequence aplignment parsers in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered parsers</returns>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentParsers.SAM">
            <summary>
            Gets an instance of SAMParser class which is capable of
            parsing SAM format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentParsers.BAM">
            <summary>
            Gets an instance of BAMParser class which is capable of
            parsing BAM format files.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceAlignmentParsers.All">
            <summary>
            Gets the list of all sequence alignment parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmerIndexer">
            <summary>
            Structure that maintains sequence index, count information 
            and orientation for k-mer.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmerIndexer._sequenceIndex">
            <summary>
            Index to retreive source sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmerIndexer._positions">
            <summary>
            Positions of k-mer within this source sequence
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerIndexer.#ctor(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Initializes a new instance of the KmerIndexer class.
            </summary>
            <param name="sequenceIndex">Index of source sequence</param>
            <param name="positions">List of k-mer positions</param>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerIndexer.Positions">
            <summary>
            Gets the starting position within sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerIndexer.SequenceIndex">
            <summary>
            Gets sequence index
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmerData">
            <summary>
            Holds sequence index and start position for kmer
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerData.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class KmerData.
            </summary>
            <param name="sequenceIndex">Index of base sequence</param>
            <param name="kmerPosition">Start position of kmer</param>
            <param name="orientation">This boolean indicates whether 
            the kmer represented here is same as first occurance of kmer in read</param>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerData.IncrementCount(System.Boolean)">
            <summary>
            Increment count information based on the orientation
            </summary>
            <param name="isNormalOrientation">This boolean indicates whether 
            the kmer represented here is same as first occurance of kmer in read</param>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerData.SequenceIndex">
            <summary>
            Index of base sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerData.KmerPosition">
            <summary>
            Start Position of kmer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerData.Count">
            <summary>
            Number of occurrences of kmer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerData.CountRC">
            <summary>
            Number of occurrences of kmer's reverse complement
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ITracePath">
            <summary>
            Traverse through Contig overalp graphs to generate scaffold paths.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ITracePath.FindPaths(MBF.Algorithms.Assembly.Graph.DeBruijnGraph,MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs,System.Int32,System.Int32)">
            <summary>
            Performs Breadth First Search to traverse through graph to generate scaffold paths.
            </summary>
            <param name="graph">Contig Overlap Graph.</param>
            <param name="contigPairedReadMaps">InterContig Distances.</param>
            <param name="kmerLength">Length of Kmer</param>
            <param name="depth">Depth to which graph is searched.</param>
            <returns>List of paths/scaffold</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.ILowCoverageContigPurger">
            <summary>
            Interface removing contigs with low coverage.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.ILowCoverageContigPurger.RemoveLowCoverageContigs(MBF.Algorithms.Assembly.Graph.DeBruijnGraph,System.Double)">
            <summary>
            Build contigs from graph. For contigs whose coverage is less than 
            the specified threshold, remove graph nodes belonging to them.
            </summary>
            <param name="graph">DeBruijn Graph</param>
            <param name="coverageThreshold">Coverage Threshold for contigs</param>
            <returns>Number of nodes removed</returns>
        </member>
        <member name="T:MBF.Web.DoubleRangeValidator">
            <summary>
            A validator for double values that defines an inclusive (both first and last) range of 
            allowed values.
            </summary>
        </member>
        <member name="M:MBF.Web.DoubleRangeValidator.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="first">The lowest value.</param>
            <param name="last">The highest value.</param>
        </member>
        <member name="M:MBF.Web.DoubleRangeValidator.IsValid(System.Object)">
            <summary>
            Given an int value as an object, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:MBF.Web.DoubleRangeValidator.IsValid(System.String)">
            <summary>
            Given an int value as a string, return true if the value is in-range.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:MBF.Web.DoubleRangeValidator.First">
            <summary>
            The lowest allowed value.
            </summary>
        </member>
        <member name="P:MBF.Web.DoubleRangeValidator.Last">
            <summary>
            The highest value allowed.
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastStatistics">
            <summary>
            Container for the Statistics segment of the XML BLAST format.
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastStatistics.#ctor">
            <summary>
            Default Constructor: Initializes an instance of class BlastStatistics
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastStatistics.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.SequenceCount">
            <summary>
            The number of sequences in the iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.DatabaseLength">
            <summary>
            Database size, for correction
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.HspLength">
            <summary>
            Effective HSP length
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.EffectiveSearchSpace">
            <summary>
            Effective search space
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.Kappa">
            <summary>
            Karlin-Altschul parameter K
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.Lambda">
            <summary>
            Karlin-Altschul parameter Lambda
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastStatistics.Entropy">
            <summary>
            Karlin-Altschul parameter H
            </summary>
        </member>
        <member name="T:MBF.VirtualSequence">
            <summary>
            VirtualSequence class is ISequence implementation which contains metadata of a sequence 
            and it will not contain the sequence. Use this class for working with sequences 
            that never have sequence data, but are only used for metadata storage (like keeping an ID 
            or various features but no direct sequence data).
            
            This class is marked with Serializable attribute thus instances of this 
            class can be serialized and stored to files and the stored files 
            can be de-serialized to restore the instances.
            </summary>
        </member>
        <member name="F:MBF.VirtualSequence._seqInfo">
            <summary>
            Holds the metadata of the sequence.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.#ctor(MBF.IAlphabet)">
            <summary>
            Creates a VirtualSequence instance.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
        </member>
        <member name="M:MBF.VirtualSequence.Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new VirtualSequence that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.ToString">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.Range(System.Int32,System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.Insert(System.Int32,System.Char)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.VirtualSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.VirtualSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:MBF.VirtualSequence.Replace(System.Int32,System.Char)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.VirtualSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:MBF.VirtualSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.VirtualSequence.IndexOfNonGap">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.LastIndexOfNonGap">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new ISequence that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.VirtualSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns -1.
            </summary>
            <returns>Always retuns -1.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.VirtualSequence.RemoveAt(System.Int32)">
            <summary>
             Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:MBF.VirtualSequence.Add(MBF.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="item">The item to add to the end of the sequence.</param>
        </member>
        <member name="M:MBF.VirtualSequence.Clear">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns false.
            </summary>
            <returns>Always returns false.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="M:MBF.VirtualSequence.Remove(MBF.ISequenceItem)">
            <summary>
             Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.GetEnumerator">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
            <returns>Always throws NotSupportedException.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.System#ICloneable#Clone">
            <summary>
            Creates a new VirtualSequence that is a copy of the current VirtualSequence.
            </summary>
            <returns>A new object that is a copy of this VirtualSequence.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.VirtualSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the VirtualSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.VirtualSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="P:MBF.VirtualSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Alphabet">
            <summary>
            The alphabet type (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein).
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Statistics">
            <summary>
            Always returns null, since there is no sequence data.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.IsReadOnly">
            <summary>
            Virtual sequence will not contain sequence and thus this flag always returns true.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Encoding">
            <summary>
            The encoding being used to store sequence items in this instance.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Reverse">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Complement">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.ReverseComplement">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Item(System.Int32)">
            <summary>
            Virtual sequence will not contain sequence and thus this method will throw NotSupportedException.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.Count">
            <summary>
            Virtual sequence will not contain sequence and thus this method always returns 0.
            </summary>
        </member>
        <member name="P:MBF.VirtualSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.Util.HttpUtility">
            <summary>
            Provides methods for encoding URLs when processing Web requests.
            </summary>
        </member>
        <member name="F:MBF.Util.HttpUtility.notEncodedChars">
            <summary>
            Holds nonencoded characters.
            </summary>
        </member>
        <member name="F:MBF.Util.HttpUtility.hexChars">
            <summary>
            Holds hexa characters.
            </summary>
        </member>
        <member name="M:MBF.Util.HttpUtility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:MBF.Util.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes a URL string using the specified encoding object.
            </summary>
            <param name="str">The text to encode.</param>
            <param name="Enc">The System.Text.Encoding object that specifies the encoding scheme.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="T:MBF.Web.ClustalW.ServiceParameters">
            <summary>
            Contains the list of parameter obtained as result of initiating an service request
            with web service.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ServiceParameters.JobIdKey">
            <summary>
            Job Identifier Key
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ServiceParameters._parameters">
            <summary>
            Contains key value pair of
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ServiceParameters.#ctor">
            <summary>
            Initializes a new instance of the ServiceParameters class.
            Constructor: Initialize class fields
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ServiceParameters.JobId">
            <summary>
            Gets or sets the Job Identifer of Service Request
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ServiceParameters.Parameters">
            <summary>
            Gets the key value dictionary of service parameters
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the GenBank file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a GenBank file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankFormatter.WriteGenBankSection(System.String,System.String,System.String,System.IO.TextWriter)">
            Writes a header and data string as a GenBank header section, indenting the data of
            each line to the length of the given indent string.
        </member>
        <member name="P:MBF.IO.GenBank.GenBankFormatter.LocationBuilder">
            <summary>
            Location builder is used to build location string from the location object persent in the feature items.
            By default an instance of LocationBuilder class is used to get the location string.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankFormatter.Name">
            <summary>
            Gets the type of Formatter i.e GenBank.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GanBank file.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankFormatter.Description">
            <summary>
            Gets the description of GenBank formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankFormatter class acheives.
            </summary>
        </member>
        <member name="T:MBF.Encoding.Ncbi2NAEncoding">
            <summary>
            A very simple encoding that allows for great compression of DNA and RNA
            sequences. This encoding only allows for 4 nucleotides and thus has no
            room for gap, termination, or ambiguous characters. This is done so that
            the encodings can be done using only two bits of information. It is
            appropriate only where this extra information is not necessary.
            
            The encoding comes from the NCBIA2na standard and is summarized by:
            
            Value - Symbol - Name
            
            0 - A - Adenine
            1 - C - Cytosine
            2 - G - Guanine
            3 - T - Thymine / Uracil
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi2NAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi2NAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi2NAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi2NAEncoding.T">
            <summary>
            For DNA this symbol represents Thymine. For RNA it represents Uracil
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.GetComplement(System.Byte)">
            <summary>
            Gets the complement of a given byte value
            </summary>
            <param name="value">Value of which complement has to be found</param>
            <returns>Complemented byte value</returns>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi2NAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.Instance">
            <summary>
            An instance of the Ncbi2Na encoding for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.Name">
            <summary>
            The name of this encoding is always 'NCBI2na'
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.HasTerminations">
            <summary>
            This encodings does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.HasAmbiguity">
            <summary>
            This encodings does not have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.HasGaps">
            <summary>
            This encodings does not have gap characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.Count">
            <summary>
            The number of encoded values. For this encoding the result should
            always be 4.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi2NAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.ProteinAlphabet">
            <summary>
            The basic alphabet that describes symbols used in sequences of amino
            acids that come from codon encodings of RNA. This alphabet allows for
            the twenty amino acids as well as a termination and gap symbol.
            <para>
            The character representations come from the NCBIstdaa standard and
            are used in many sequence file formats. The NCBIstdaa standard has all
            the same characters as NCBIeaa and IUPACaa, but adds Selenocysteine,
            termination, and gap symbols to the latter.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Extended Symbol - Name
            A - Ala - Alanine
            B - Asx - Aspartic Acid or Asparagine
            C - Cys - Cysteine
            D - Asp - Aspartic Acid
            E - Glu - Glutamic Acid
            F - Phe - Phenylalanine
            G - Gly - Glycine
            H - His - Histidine
            I - Ile - Isoleucine
            J - Xle - Leucine or Isoleucine
            K - Lys - Lysine
            L - Leu - Leucine
            M - Met - Methionine
            N - Asn - Asparagine
            O - Pyl - Pyrrolysine
            P - Pro - Proline
            Q - Gln - Glutamine
            R - Arg - Arginine
            S - Ser - Serine
            T - Thr - Threoine
            U - Sel - Selenocysteine
            V - Val - Valine
            W - Trp - Tryptophan
            X - Xxx - Undetermined or atypical
            Y - Tyr - Tyrosine
            Z - Glx - Glutamic Acid or Glutamine
            * - Ter - Termination
            - - --- - Gap
            </para>
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Ala">
            <summary>
            Alanine Amino acid 
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Asx">
            <summary>
            Aspartic Acid or Asparagine
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Cys">
            <summary>
            Cysteine Amino acid 
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Asp">
            <summary>
            Aspartic Acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Glu">
            <summary>
            Glutamic Acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Phe">
            <summary>
            Phenylalanine Amino acid 
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Gly">
            <summary>
            Glycine Amino acid 
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.His">
            <summary>
            Histidine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Ile">
            <summary>
            Isoleucine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Xle">
            <summary>
            Leucine or Isoleucine
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Lys">
            <summary>
            Lysine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Leu">
            <summary>
            Leucine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Met">
            <summary>
            Methionine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Asn">
            <summary>
            Asparagine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Pyl">
            <summary>
            Pyrrolysine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Pro">
            <summary>
            Proline Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Gln">
            <summary>
            Glutamine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Arg">
            <summary>
            Arginine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Ser">
            <summary>
            Serine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Thr">
            <summary>
            Threoine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Sel">
            <summary>
            Selenocysteine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Val">
            <summary>
            Valine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Trp">
            <summary>
            Tryptophan Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Tyr">
            <summary>
            Tyrosine Amino acid
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Glx">
            <summary>
            Glutamic Acid or Glutamine
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Xxx">
            <summary>
            Undetermined or atypical
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Term">
            <summary>
            Termination character
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.Gap">
            <summary>
            Gap character
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.instance">
            <summary>
            Instance of this class.
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.values">
            <summary>
            Stores the list of amino acids for protein
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in Proteins
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:MBF.ProteinAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:MBF.ProteinAlphabet.#cctor">
            <summary>
            Initializes static members of the ProteinAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:MBF.ProteinAlphabet.#ctor">
            <summary>
            Prevents a default instance of the ProteinAlphabet class from being created.
            Populates amino acid values.
            </summary>
        </member>
        <member name="M:MBF.ProteinAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the amino acid associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for amino acid corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the amino acid associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for amino acid corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.LookupByValue(System.Byte)">
            <summary>
            Retrieves the amino acid associated with a particular byte value.
            See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="value">Byte value of the symbol</param>
            <returns>ISequenceItem for amino acid corresponding to input value</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{MBF.ISequenceItem})">
            <summary>
            Find the consensus symbol for a set of amino acids
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus amino acid</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.GetBasicSymbols(MBF.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (Ala, Cys, Asp, Gle, etc.)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (Asx, Xle, Xxx, and Glx)</param>
            <param name="includeTerminations">Include the termination item (*)</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.ProteinAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.ProteinAlphabet.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same amino acid.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:MBF.ProteinAlphabet.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:MBF.ProteinAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.Instance">
            <summary>
            Gets an instance of the Protein alphabet for amino acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'Protein'
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does have termination characters.
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.DefaultGap">
            <summary>
            Gets the amino acid that denotes default gap character in Protein
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 28.
            </summary>
        </member>
        <member name="P:MBF.ProteinAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IO.Newick.NewickFormatter">
            <summary>
            Formats a PhylogeneticTree object into newick text (usually a file). 
            The output is formatted according to the Newick format. A method is 
            also provided for quickly accessing the content in string form 
            for applications that do not need to first write to file.
            Documentation for the latest Newic file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.Format(MBF.Phylogenetics.Tree,System.String)">
            <summary>
            Writes a Phylogenetic tree to the specified file.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="fileName">The name of the file to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.Format(MBF.Phylogenetics.Tree,System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to the writer.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.FormatString(MBF.Phylogenetics.Tree)">
            <summary>
            Converts a PhylogeneticTree to a formatted text.
            </summary>
            <param name="tree">PhylogeneticTree to format.</param> 
            <returns>A string of the formatted Phylogenetic tree text.</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.Validate(MBF.Phylogenetics.Tree)">
            <summary>
            Basic PhylogeneticTree object validation
            </summary>
            <param name="tree">PhylogeneticTree object</param>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.Format(System.IO.TextWriter)">
            <summary>
            Writes a PhylogeneticTree to a Newick format in the writer.
            </summary>
            <param name="writer">The TextWriter used to write the formatted Phylogenetic tree text.</param>
        </member>
        <member name="M:MBF.IO.Newick.NewickFormatter.Format(MBF.Phylogenetics.Node,MBF.Phylogenetics.Edge,System.Text.StringBuilder@)">
            <summary>
            Recursive method to get each node into string
            </summary>
            <param name="node">tree node</param>
            <param name="edge">edge</param>
            <param name="stringBuilder">output newick string</param>
        </member>
        <member name="P:MBF.IO.Newick.NewickFormatter.Name">
            <summary>
            Gets the type of Formatter i.e NEWICK.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:MBF.IO.Newick.NewickFormatter.Description">
            <summary>
            Gets the description of Newick formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            NewickFormatter class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.Newick.NewickFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a newick file.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Terminator">
            <summary>
            Sequence of DNA located either at the end of the transcript that causes RNA polymerase to terminate transcription.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Terminator.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Terminator feature item from the specified location.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Terminator.#ctor(System.String)">
            <summary>
            Creates new Terminator feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Terminator.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Terminator.#ctor(MBF.IO.GenBank.Terminator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Terminator instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Terminator.Clone">
            <summary>
            Creates a new Terminator that is a copy of the current Terminator.
            </summary>
            <returns>A new Terminator that is a copy of this Terminator.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Terminator.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankVersion">
            <summary>
            A compound identifier consisting of the primary accession number and 
            a numeric version number associated with the current version of the 
            sequence data in the record. This is followed by an integer key 
            (a "GI") assigned to the sequence by NCBI.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankVersion.Clone">
            <summary>
            Creates a new GenBankVersion that is a copy of the current GenBankVersion.
            </summary>
            <returns>A new GenBankVersion that is a copy of this GenBankVersion.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankVersion.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankVersion that is a copy of the current GenBankVersion.
            </summary>
            <returns>A new object that is a copy of this GenBankVersion.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankVersion.Accession">
            <summary>
            Primary accession number.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankVersion.Version">
            <summary>
            Version number.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankVersion.CompoundAccession">
            <summary>
            Gets the CompoundAccession that is Accession.Version.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankVersion.GINumber">
            <summary>
            GI number.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.RibosomalRNA">
            <summary>
            Mature ribosomal RNA (rRNA); RNA component of the ribonucleoprotein particle (ribosome) 
            which assembles amino acids into proteins.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomalRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomalRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomalRNA.#ctor(System.String)">
            <summary>
            Creates new RibosomalRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomalRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomalRNA.#ctor(MBF.IO.GenBank.RibosomalRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomalRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomalRNA.Clone">
            <summary>
            Creates a new RibosomalRNA that is a copy of the current RibosomalRNA.
            </summary>
            <returns>A new RibosomalRNA that is a copy of this RibosomalRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomalRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Promoter">
            <summary>
            Region on a DNA molecule involved in RNA polymerase binding to initiate transcription.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Promoter.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Promoter feature item from the specified location.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Promoter.#ctor(System.String)">
            <summary>
            Creates new Promoter feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Promoter.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Promoter.#ctor(MBF.IO.GenBank.Promoter)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Promoter instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Promoter.Clone">
            <summary>
            Creates a new Promoter that is a copy of the current Promoter.
            </summary>
            <returns>A new Promoter that is a copy of this Promoter.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.BoundMoiety">
            <summary>
            Name of the molecule/complex that may bind to the given feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Promoter.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Gene">
            <summary>
            The gene feature describes the interval of DNA that corresponds to a genetic trait or phenotype. 
            It is a region of biological interest identified as a gene and for which a name has been assigned.
            This class is meant to represent a region where the gene is located.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Gene.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Gene feature item from the specified location.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Gene.#ctor(System.String)">
            <summary>
            Creates new Gene feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Gene.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Gene.#ctor(MBF.IO.GenBank.Gene)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Gene instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Gene.Clone">
            <summary>
            Creates a new Gene that is a copy of the current Gene.
            </summary>
            <returns>A new Gene that is a copy of this Gene.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Gene.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.BasicDerivedSequence">
             <summary>
             A BasicDerivedSequence is a simple type of derived sequence that 
             provides range, reverse, and complement of a source sequence,
             and facilitates creation of other specialized subclasses.
             
             This class implements ICloneable interface. To create a copy 
             of the BasicDerivedSequence call Clone() method. For example:
             
             BasicDerivedSequence basicDerivedSeq = new BasicDerivedSequence();
             BasicDerivedSequence basicDerivedSeqCopy = basicDerivedSeq.Clone();
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="F:MBF.BasicDerivedSequence.newDisplayID">
            <summary>
            Stores display ID if the user changes it after creating the derived sequence
            </summary>
        </member>
        <member name="M:MBF.BasicDerivedSequence.#ctor(MBF.ISequence,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Construct a derived sequence, specifying all properties.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="reversed">Whether to reverse the symbol order.</param>
            <param name="complemented">Whether to complement the symbols.</param>
            <param name="rangeStart">The first symbol index (in the original) wanted.</param>
            <param name="rangeLength">0 to return all symbols, or the number of symbols wanted.</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            Source property of cloned BasicDerivedSequence will contains a cloned copy of the 
            Source property of current BasicDerivedSequence.
            </summary>
            <returns>A new BasicDerivedSequence that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter. This does not do a symbol
            comparison. The match must be the exact same ISequenceItem.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Clear">
            <summary>
            Removes all sequence data from the Sequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            Note that the SequenceItem must be taken from the alphabet defined
            for this sequence in order for this method to return true.
            </summary>
            <param name="item">The SequenceItem to check for the existance of in a Sequence</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items into a preallocated array.
            </summary>
            <param name="array">An array of SequenceItems to which sequence items are copied</param>
            <param name="arrayIndex">The index of the array in which to start the copy</param> 
        </member>
        <member name="M:MBF.BasicDerivedSequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first instance found of a particular sequence item.
            This item must be from the alphabet defined for the Sequence.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.ToString">
            <summary>
            Return the string representation of the Source sequence, as
            modified by this object's properties.
            </summary>
            <returns>The string representing the sequence.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Insert(System.Int32,System.Char)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples for DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="length">The number of continuous items to remove starting at the position</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Replace(System.Int32,System.Char)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="character">The item to insert. Examples from DNA include: 'G' or 'C'</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="item">The item to place into the sequence</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Modifying a source sequence through a derived sequence is not supported and thus 
            this method will throw NotSupportedException.
            </summary>
            <param name="position">A zero-based index of the placement</param>
            <param name="sequence">The items to insert. Examples for DNA include: "G" or "GAAT"</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            </summary>
            <returns>A new ISequence that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#ICloneable#Clone">
            <summary>
            Creates a new BasicDerivedSequence that is a copy of the current BasicDerivedSequence.
            </summary>
            <returns>A new object that is a copy of this BasicDerivedSequence.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the BasicDerivedSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Reversed">
            <summary>
            True if the source symbols will be reversed.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Complemented">
            <summary>
            True if the source symbols will be complemented.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.RangeStart">
            <summary>
            If positive, an offset into the source sequence.
            Otherwise the starting source index is zero.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.RangeLength">
            <summary>
            If positive, the number of symbols the virtual sequence should present.
            Otherwise the length is not limited.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Encoding">
            <summary>
            The encoding being used to store sequence items in the source sequence.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            A BasicDerivedSequence does not support editing of the underlying
            sequence, and is always read-only.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.  This is
            recalculated each time the getter is called, in case there has been a change to the
            source sequence.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.Source">
            <summary>
            The Source sequence is the underlying sequence from which this virtual
            sequence is derived.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.BasicDerivedSequenceEnumerator">
            <summary>
            Enumerator implementation for the BasicDerivedSequence class
            </summary>
        </member>
        <member name="M:MBF.BasicDerivedSequenceEnumerator.#ctor(MBF.BasicDerivedSequence)">
            <summary>
            Constructs an enumerator for a BasicDerivedSequence object.
            </summary>
        </member>
        <member name="M:MBF.BasicDerivedSequenceEnumerator.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:MBF.BasicDerivedSequenceEnumerator.Dispose(System.Boolean)">
            <summary>
            Takes care of disposing memory
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MBF.BasicDerivedSequenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item
            </summary>
            <returns>True if the enumerator can advance. False if the end of the sequence is reached.</returns>
        </member>
        <member name="M:MBF.BasicDerivedSequenceEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the sequence
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequenceEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.BasicDerivedSequenceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.NUCmer3">
            <summary>
            Implementation of NUCmer3.
            This class uses suffix tree for DNA alignment.
            <see cref="T:MBF.Algorithms.Alignment.NUCmer"/>
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer3.FirstSequenceStart">
            <summary>
            Property refering to Second sequence start in MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmer3.nucmerAligner">
            <summary>
            Alignment engine
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.#ctor">
            <summary>
            Initializes a new instance of the NUCmer3 class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ConcatSequence(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Concat all the sequences into one sequence with special character
            </summary>
            <param name="sequences">list of reference sequence</param>
            <returns>Concatenated sequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.GetClusters(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            get the clusters
            </summary>
            <param name="mumList">List of maximum unique matches</param>
            <returns>List of clusters</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Build Suffix Tree using reference sequence
            </summary>
            <param name="referenceSequence">sequence to build SuffixTree</param>
            <returns>Suffix Tree</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.Streaming(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,MBF.ISequence,System.Int64)">
            <summary>
            Traverse the suffix tree using query sequence and return list of MUMs
            </summary>
            <param name="suffixTree">Suffix tree</param>
            <param name="referenceSequence">Reference sequence</param>
            <param name="sequence">Query sequence</param>
            <param name="lengthOfMUM">Minimum length of MUM</param>
            <returns>List of MUMs</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ProcessCluster(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.Algorithms.Alignment.Cluster})">
            <summary>
            Process the cluster
            1. Re-map the reference sequence index to original index
            2. Create synteny
            3. Process synteny
            </summary>
            <param name="referenceSequenceList">List of reference sequences</param>
            <param name="clusters">List of clusters</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.CalculateScore(MBF.ISequence,MBF.ISequence)">
            <summary>
            Calculate the score of alignment
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Score of the alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ConvertDeltaToAlignment(System.Collections.Generic.IList{MBF.Algorithms.Alignment.DeltaAlignment})">
            <summary>
            Convert to delta alignments to sequence alignments
            </summary>
            <param name="alignments">list of delta alignments</param>
            <returns>List of Sequence alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.MakeConsensus(MBF.ISequence,MBF.ISequence)">
            <summary>
            Analyze the given seqquences and store a consensus into its Consensus property.
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <returns>Consensus of sequences</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.FindExtensionLength(MBF.ISequence,System.Int32)">
            <summary>
            Find the index of extension
            </summary>
            <param name="sequence">Sequence object</param>
            <param name="index">Position at which extension starts</param>
            <returns>Last index of extension</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.SortCluster(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Cluster},System.String)">
            <summary>
            Sort the clusters by given field
            </summary>
            <param name="clusters">List of clusters to be sorted</param>
            <param name="sortBy">Field to be sorted by</param>
            <returns>List of sorted clusters</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.IsClusterShadowed(System.Collections.Generic.IList{MBF.Algorithms.Alignment.DeltaAlignment},MBF.Algorithms.Alignment.Cluster,MBF.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Check if the cluster is shadowed (contained in alignment)
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentCluster">current cluster</param>
            <param name="currentDeltaAlignment">Current delta alignment</param>
            <returns>Is cluster contained in alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ProcessSynteny(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Synteny})">
            <summary>
            Extend each cluster in every synteny
            </summary>
            <param name="syntenies">List of synteny</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ExtendClusters(MBF.Algorithms.Alignment.Synteny)">
            <summary>
            Extend the cluster in synteny
            </summary>
            <param name="synteny">Synteny in which cluster needs to be extened.</param>
            <returns>List of delta alignments</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ExtendToPreviousSequence(MBF.ISequence,MBF.ISequence,System.Collections.Generic.IList{MBF.Algorithms.Alignment.DeltaAlignment},MBF.Algorithms.Alignment.DeltaAlignment,MBF.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Extend the cluster backward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="alignments">List of alignments</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetAlignment">target alignment object</param>
            <returns>Was clusted extended backward</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.ExtendToNextSequence(MBF.ISequence,MBF.ISequence,MBF.Algorithms.Alignment.DeltaAlignment,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extend the cluster forward
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
            <param name="currentAlignment">current alignment object</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <param name="methodName">Name of the method to be implemented</param>
            <returns>Was cluster extended forward</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.GetPreviousAlignment(System.Collections.Generic.IList{MBF.Algorithms.Alignment.DeltaAlignment},MBF.Algorithms.Alignment.DeltaAlignment)">
            <summary>
            Find the previous eligible sequence for alignment/extension
            </summary>
            <param name="alignments">List of alignment</param>
            <param name="currentAlignment">Current alignment</param>
            <returns>Reverse alignment</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmer3.GetNextCluster(System.Collections.Generic.IList{MBF.Algorithms.Alignment.Cluster},MBF.Algorithms.Alignment.Cluster,System.Int32@,System.Int32@)">
            <summary>
            Find the next eligible sequence for alignment/extension
            </summary>
            <param name="clusters">List of clusters</param>
            <param name="currentCluster">Current cluster</param>
            <param name="targetReference">target position in reference sequence</param>
            <param name="targetQuery">target position in query sequence</param>
            <returns>Forward cluster in the list</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer3.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            MUMmer v3.0 algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer3.Description">
            <summary>
            Gets the Description of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            MUMmer3 class implements.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NUCmer3.ReferenceSequenceNumber">
            <summary>
            Index of reference sequence in list of sequences
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.ILongestIncreasingSubsequence">
            <summary>
            This interface defines contract for classes implementing
             Longest increasing subsequence.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.ILongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            This method will run greedy version of 
            longest increasing subsequence algorithm on the list of Mum.        
            </summary>
            <param name="sortedMums">List of Sorted Mums</param>
            <returns>Returns the longest subsequence list of Mum.</returns>
        </member>
        <member name="T:MBF.Matrix.MatrixViewExtensions">
            <summary>
            Provides a set of static methods for creating view on a Matrix. A view is a light-weight wrapper around a matrix such
            that value changes to either the matrix or its view(s) will be reflected in both.
            </summary>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsAndColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order) and
            a subset of the cols (perhaps in a different order). If the subsets happen to include all
            rows and cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowKeySequence">A sequence of rowKeys that specifies the subset of rows to include and their desired order.</param>
            <param name="colKeySequence">A sequence of colKeys that specifies the subset of cols to include and their desired order.</param>
            <returns>A matrix with the desired rows and cols in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order).
            If the subset happens to include all rows in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowKeySequence">A sequence of rowKeys that specifies the subset of rows to include and their desired order.</param>
            <returns>A matrix with the desired rows in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Create a view of a parent matrix with a subset of the cols (perhaps in a different order).
            If the subset happens to include all
            cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colKeySequence">A sequence of colKeys that specifies the subset of cols to include and their desired order.</param>
            <returns>A matrix with the desired cols in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsAndColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order) and
            a subset of the cols (perhaps in a different order). If the subsets happen to include all
            rows and cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowIndexEnumerable">A sequence of row indexes that specifies the subset of rows to include and their desired order.</param>
            <param name="colIndexSequence">A sequence of col indexes that specifies the subset of cols to include and their desired order.</param>
            <returns>A matrix with the desired rows and cols in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order).
            If the subsets happen to include all rows in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowIndexEnumerable">A sequence of row indexes that specifies the subset of rows to include and their desired order.</param>
            <returns>A matrix with the desired rows and cols in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a view of a parent matrix with a subset of the cols (perhaps in a different order).
            If the subsets happen to include all cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colIndexSequence">A sequence of col indexes that specifies the subset of cols to include and their desired order.</param>
            <returns>A matrix with the desired cols in their desired order.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},``0[])">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order).
            If the subset happens to include all rows in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowKeyParams">a rowKey(s) that specifies the subset of row(s) to include (and their desired order).</param>
            <returns>A matrix with the desired row(s in their desired order).</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Int32[])">
            <summary>
            Create a view of a parent matrix with a subset of the rows (perhaps in a different order).
            If the subset happens to include all rows in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowIndexParams">a row index(es) that specifies the subset of row(s) to include (and their desired order).</param>
            <returns>A matrix with the desired row(s in their desired order).</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectColsView``3(MBF.Matrix.Matrix{``0,``1,``2},``1[])">
            <summary>
            Create a view of a parent matrix with a subset of the cols (perhaps in a different order).
            If the subset happens to include all cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colKeyParams">a colKey(s) that specifies the subset of col(s) to include (and their desired order).</param>
            <returns>A matrix with the desired col(s in their desired order).</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.SelectColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Int32[])">
            <summary>
            Create a view of a parent matrix with a subset of the cols (perhaps in a different order).
            If the subset happens to include all cols in the same order, the parent matrix is returned.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colIndexParams">a col index(es) that specifies the subset of col(s) to include (and their desired order).</param>
            <returns>A matrix with the desired col(s in their desired order).</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.ConvertValueView``4(MBF.Matrix.Matrix{``0,``1,``2},MBF.Util.ValueConverter{``2,``3},``3)">
            <summary>
            Creates a view of a parent matrix that converts values. For example, if the parent has values '0' ... '9'
            of type character and doubles are needed, this view can convert the characters to double when reading.
            When double values are assigned, they would be converted to characters and stored in the parent matrix.
            If a conversion is impossible,an exception is raised.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <remarks>If two layers of ConvertValueView are applied to a parent matrix, such that they cancel each other out,
            the parent matrix is returned.</remarks>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValueParent">The type of the parent's value, for example, char</typeparam>
            <typeparam name="TValueView">The type of the wrapper's value, for example, double</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="converter">A conversion instance, for example, ValueConvertion{char,int}.CharToInt</param>
            <param name="missingValue">The special Missing value for the wrapping matrix.</param>
            <returns>A matrix with values of the desired type</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.TransposeView``3(MBF.Matrix.Matrix{``0,``1,``2})">
            <summary>
            Create a view of the parent matrix in which rows become cols and cols become rows.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <remarks>If two layers of TransposeView are applied to a parent matrix, the parent matrix is returned.</remarks>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <returns>A transposed matrix</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.RenameColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``1,``1}})">
            <summary>
            Create a new view of the parent matrix in which the columns are renamed
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="newKeyAndOldKeySequence">A sequence of pair mapping from new keys to the old keys, for example, a dictionary
            More than one new key can map to an old key.
            or a list of KeyValuePair's. Any parent column with a colKey that isn't mentioned will be inaccessable.
            The new cols will be in the order of given in the sequence.</param>
            <remarks>If newKeyAndOldKeySequence maps every key to itself, in the same order, the parent matrix will be returned.</remarks>
            <returns>A matrix with renamed columns.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.RenameRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``0}})">
            <summary>
            Create a new view of the parent matrix in which the rows are renamed.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="newKeyAndOldKeySequence">A sequence of pair mapping from new keys to the old keys, for example, a dictionary
            More than one new key can map to an old key.
            or a list of KeyValuePair's. Any parent row with a rowKey that isn't mentioned will be inaccessable.
            The new rows will be in the order of given in the sequence.</param>
            <remarks>If newKeyAndOldKeySequence maps every key to itself, in the same order, the parent matrix will be returned.</remarks>
            <returns>A matrix with renamed rows.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.MergeRowsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Boolean,MBF.Matrix.Matrix{``0,``1,``2}[])">
            <summary>
            Creates a new view in which the rows of the parent matrix is merged with the rows of the otherMatrices. The rows will be in the order
            of the input matrices. If two matrices contain a rows with the same rowKey, an exception is thrown. All matricies must have the same
            MissingValue.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colsMustMatch">true, to require all matrices to have the same colKeys in the same order; false, use an intersection of the
            colKeys in the order of parentMatrix.ColKeys.</param>
            <param name="otherMatrices">zero or more other matricies with which to concatinate rows.</param>
            <remarks>If no other matrices are given, returns the parent matrix.</remarks>
            <returns>A matrix containing the rows of parentMatrix and otherMatrices.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.MergeColsView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Boolean,MBF.Matrix.Matrix{``0,``1,``2}[])">
            <summary>
            Creates a new view in which the cols of the parent matrix is merged with the cols of the otherMatrices. The cols will be in the order
            of the input matrices. If two matrices contain a cols with the same colKey, an exception is thrown. All matricies must have the same
            MissingValue.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowsMustMatch">true, to require all matrices to have the same rowKeys in the same order; false, use an intersection of the
            rowKeys in the order of parentMatrix.RowKeys.</param>
            <param name="otherMatrices">zero or more other matricies with which to concatinate cols.</param>
            <remarks>If no other matrices are given, returns the parent matrix.</remarks>
            <returns>A matrix containing the cols of parentMatrix and otherMatrices.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.PermuteColValuesForEachRowView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates a new view in which the columns of the matrix (but not the column keys) are permuted.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colKeySequence">The colKeys of the columns in their new order. Every colKey must be mentioned exactly once.</param>
            <remarks>If the permutation puts every column back in the same place, the parent matrix is returned.</remarks>
            <returns>A new matrix with permuted columns.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.PermuteColValuesForEachRowView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new view in which the columns of the matrix (but not the column keys) are permuted.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="colIndexSequence">The indexes of the columns in their new order. Every col index must be mentioned exactly once.</param>
            <remarks>If the permutation puts every column back in the same place, the parent matrix is returned.</remarks>
            <returns>A new matrix with permuted columns.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.PermuteColValuesForEachRowView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Random@)">
            <summary>
            Creates a new view in which the columns of the matrix (but not the column keys) are permuted.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="random">a Random object from which a permutation is drawn</param>
            <remarks>If the permutation puts every column back in the same place, the parent matrix is returned.</remarks>
            <returns>A new matrix with permuted columns.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.PermuteRowValuesForEachColView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new view in which the rows of the matrix (but not the row keys) are permuted.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="rowIndexSequence">The indexes of the rows in their new order. Every row index must be mentioned exactly once.</param>
            <remarks>If the permutation puts every row back in the same place, the parent matrix is returned.</remarks>
            <returns>A new matrix with permuted rows.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.PermuteRowValuesForEachColView``3(MBF.Matrix.Matrix{``0,``1,``2},System.Random@)">
            <summary>
            Creates a new view in which the rows of the matrix (but not the row keys) are permuted.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="parentMatrix">The matrix to wrap.</param>
            <param name="random">a Random object from which a permutation is drawn</param>
            <remarks>If the permutation puts every row back in the same place, the parent matrix is returned.</remarks>
            <returns>A new matrix with permuted rows.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixViewExtensions.HashableView``3(MBF.Matrix.Matrix{``0,``1,``2})">
             <summary>
             Creates a view of the parent matrix which is hashable. For example, it can be used as the key of a dictionary.
             This is a 'view' in the sense that no copying an every little extra memory is used.
             
             Two HashableView matricies are equal if their RowKeys and ColKeys (in order), MissingValue, and values are equal.
             They will have the same hashcode if they are equal.
             
             The hashcode is computed only once when the the HashableView is contructed, so a HashableView does not allow
             its values to be changed. Also, changing values of the parent will give unexpected results.
             
             When used by Dictionary or HashSet, a full call of MatrixEquals (which looks at every value) is needed to confirm
             that two matrices with the same hashcode are really equal.
            </summary>
             <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
             <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
             <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
             <param name="parentMatrix">The matrix to wrap.</param>
             <returns>A hashable matrix</returns>
        </member>
        <member name="T:MBF.Algorithms.Kmer.SequenceToKmerBuilder">
            <summary>
            Constructs k-mers from given input sequence(s).
            For each input sequence, k-mers are constructed by sliding 
            a frame of size kmerLength along the input sequence, 
            and extracting sub-sequence inside the frame.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.IKmerBuilder">
            <summary>
            This interface defines contract for classes that implement construction 
            of k-mer sequences from input sequences. It provides methods that take 
            input sequence(s) and construct corresponding k-mers.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.IKmerBuilder.Build(MBF.ISequence,System.Int32)">
            <summary>
            Builds k-mers for input sequence and constructs KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequence">Input Sequence</param>
            <param name="kmerLength">k-mer length</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.IKmerBuilder.Build(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Builds k-mers for a list of input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences</param>
            <param name="kmerLength">k-mer length</param>
            <returns>List of KmersOfSequence instances</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.Build(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Builds k-mers from a list of given input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences</param>
            <param name="kmerLength">k-mer length</param>
            <returns>List of KmersOfSequence instances</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.Build(MBF.ISequence,System.Int32)">
            <summary>
            For input sequence, constructs k-mers by sliding 
            a frame of size kmerLength along the input sequence.
            Track positions of occurance for each kmer in sequence.
            Constructs KmersOfSequence for sequence and associated k-mers.
            </summary>
            <param name="sequence">Input sequence</param>
            <param name="kmerLength">k-mer length</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.BuildKmerDictionary(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Builds k-mers from a list of given input sequences.
            For each sequence in input list, constructs a KmersOfSequence 
            corresponding to the sequence and associated k-mers.
            </summary>
            <param name="sequences">List of input sequences</param>
            <param name="kmerLength">k-mer length</param>
            <returns>List of KmersOfSequence instances</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.BuildKmerDictionary(MBF.ISequence,System.Int32)">
            <summary>
            For input sequence, constructs k-mers by sliding 
            a frame of size kmerLength along the input sequence.
            Track positions of occurance for each kmer in sequence.
            Constructs KmersOfSequence for sequence and associated k-mers.
            </summary>
            <param name="sequence">Input sequence</param>
            <param name="kmerLength">k-mer length</param>
            <returns>KmersOfSequence constructed from sequence and associated k-mers</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.GetKmerStrings(MBF.ISequence,System.Int32)">
            <summary>
            Gets the set of kmer strings that occur in given sequences
            </summary>
            <param name="sequence">Source Sequence</param>
            <param name="kmerLength">Kmer Length</param>
            <returns>Set of kmer strings</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.BuildPaDeNAKmerDictionary(System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Builds k-mers from a list of given input sequences.
            </summary>
            <param name="sequences">List of input sequences</param>
            <param name="kmerLength">k-mer length</param>
            <returns>List of KmersOfSequence instances</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.BuildPaDeNAKmerDictionary(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            For input sequence, constructs k-mers by sliding 
            a frame of size kmerLength along the input sequence.
            Track positions of occurance for each kmer in sequence.
            Constructs KmersOfSequence for sequence and associated k-mers.
            </summary>
            <param name="start">Start index of sequence range.</param>
            <param name="end">End index of sequence range.</param>
            <param name="kmerLength">Kmer Length.</param>
            <param name="sequences">List of sequences.</param>
            <returns>Kmer Dictionary.</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.MergeKmerDictionaries(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,MBF.Algorithms.Kmer.KmerDataGraphNodePair}})">
            <summary>
            Merges a list of kmer dictionaries into a single one.
            Divides the list into chunks based on the number of cores available.
            Merges the results from each core in a binary fashion.
            </summary>
            <param name="kmerDicts">List of kmer dictionaries to merge</param>
            <returns>Merged Dictionary</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.SequenceToKmerBuilder.MergeKmerDictionaries(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,MBF.Algorithms.Kmer.KmerDataGraphNodePair}},System.Int32,System.Int32)">
            <summary>
            Merges a given range of dicrtionaries in list into a single one.
            </summary>
            <param name="kmerDicts">List of kmer dictionaries to merge</param>
            <param name="start">Start index of range</param>
            <param name="end">End index of range</param>
            <returns>Merged Dictionary</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Graph.DeBruijnNode">
            <summary>
            Represents a node in the De Bruijn graph
            A node is associated with a k-mer. 
            Also holds adjacency information with other nodes.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._sequenceIndex">
            <summary>
            Holds sequence index and starting position within sequence
            for kmer represented by this node.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._kmerPosition">
            <summary>
            Holds sequence index and starting position within sequence
            for kmer represented by this node.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._kmerLength">
            <summary>
            Length of k-mer associated with the node
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._countNormalOrientation">
            <summary>
            Number of times this k-mer occurs in input sequences
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._countReverseComplement">
            <summary>
            Number of times reverse-complement of k-mer occurs in input sequences.
            Default value for reverseComplementCount is -1.
            If RC is stored seperately (as in Velvet algorithm), this field should remain -1.
            Used only when kmer, RC(kmer) are stored in the same node (for eg. in algorithms like ABySS).
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._rightEndExtensionNodes">
            <summary>
            Right Extension edges. Edge contains connecting node, and orientation of edge. 
            A right-end extension edge will be added from node A to node B, if there is an 
            overlap of length (k-1) between right end of sequence A and left end of sequences B. 
            Orientation is same, if overlapping sequences in adjacent nodes 
            are normal orientation. Orientation is opposite, if one of the 
            sequences is reverse complement.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._leftEndExtensionNodes">
            <summary>
            Left Extension edges. Edge contains connecting node, and orientation of edge. 
            A left-end extension edge will be added from node A to node B, if there is an 
            overlap of length (k-1) between left end of sequence A and right end of sequences B. 
            Orientation is same, if overlapping sequences in adjacent nodes 
            are normal orientation. Orientation is opposite, if one of the 
            sequences is reverse complement.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._validLeftExtensions">
            <summary>
            Has list of valid left extension edges
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._validRightExtensions">
            <summary>
            Has list of valid right extension edges.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnNode._isMarked">
            <summary>
            Depicts that whether the node is marked or not.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DeBruijnNode class.
            Creates graph node with sequence index.
            </summary>
            <param name="length">Length of k-mer</param>
            <param name="sequenceIndex">Sequence Index for k-mer</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DeBruijnNode class.
            Allocates left and right extension data structure.
            </summary>
            <param name="length">Length of k-mer</param>
            <param name="sequenceIndex">Index of parent sequence</param>
            <param name="kmerPosition">Start position of kmer within parent sequence</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DeBruijnNode class.
            Allocates left and right extension data structure.
            </summary>
            <param name="length">Length of k-mer</param>
            <param name="sequenceIndex">Index of parent sequence</param>
            <param name="kmerPosition">Start position of kmer within parent sequence</param>
            <param name="count">Number of occurrences of kmer</param>
            <param name="countRC">Number of occurrences of kmer's reverse complement</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.AddKmerDataThreadSafe(System.Boolean)">
            <summary>
            Update count and location information for k-mer based on values in input Kmer.
            Thread-safe method
            </summary>
            <param name="isReverseComplement">Boolean indicating if kmer is reverse complement</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.AddLeftEndExtension(MBF.Algorithms.Assembly.Graph.DeBruijnNode,System.Boolean)">
            <summary>
            Add node with given orientation to left extension edges.
            Not thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node to add left-extension to</param>
            <param name="isSameOrientation">Orientation of connecting edge</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.AddRightEndExtension(MBF.Algorithms.Assembly.Graph.DeBruijnNode,System.Boolean)">
            <summary>
            Add node with given orientation to right extension edges.
            Not thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node to add right-extension to</param>
            <param name="isSameOrientation">Orientation of connecting edge</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.RemoveExtensionThreadSafe(MBF.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Removes edge corresponding to the node from appropriate data structure,
            after checking whether given node is part of left or right extensions.
            Thread-safe method
            </summary>
            <param name="node">Node for which extension is to be removed</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.MarkExtensionInvalid(MBF.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Makes extension edge corresponding to the node invalid,
            after checking whether given node is part of left or right extensions.
            Not Thread-safe. Use lock at caller if required.
            </summary>
            <param name="node">Node for which extension is to be made invalid</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.PurgeInvalidExtensions">
            <summary>
            Computes the valid extensions for the node
            and stores them in appropriate fields.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.UndoAmbiguousExtensions">
            <summary>
            Mark all extensions valid
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.RemoveMarkedExtensions">
            <summary>
            Remove extensions to marked nodes
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.ComputeValidExtensions">
            <summary>
            Compute the subset of the extensions that are marked valid
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.MarkNode">
            <summary>
            Mark nodes as visited.
            WARNING: DO NOT USE this if you need kmer count information.
            kmer count field is being re-used for this purpose.
            Old value of kmer count will be over-written.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.IsMarked">
            <summary>
            Check if node is marked as visited
            Checks if the kmer count field is set to a specific value
            </summary>
            <returns>True if marked; otherwise false</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.IncrementCount">
            <summary>
            Update normal orientation count and location 
            information for k-mer based on values in input Kmer.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.IncrementReverseComplementCount">
            <summary>
            Update reverse-complement orientation count and location 
            information for k-mer based on values in input Kmer.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnNode.ValidateNode(MBF.Algorithms.Assembly.Graph.DeBruijnNode)">
            <summary>
            Check if input node is null
            </summary>
            <param name="node">Input node</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.RightExtensionNodes">
            <summary>
            Gets the right extension edges
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.LeftExtensionNodes">
            <summary>
            Gets the left extension edges
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.KmerLength">
            <summary>
            Gets the length of associated k-mer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.SequenceIndex">
            <summary>
            Gets index of source sequence for kmer
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.KmerPosition">
            <summary>
            Gets start position of kmer in source sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.KmerCount">
            <summary>
            Gets the total count of number of occurrances for the k-mer.
            If _countReverseComplement is -1, it indicates it is an unused field.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnNode.ExtensionsCount">
            <summary>
            Gets the total number of extension edges for the node.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.FileOffset">
            <summary>
            Class to hold offset of a BAM file.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.FileOffset.CompressedBlockOffset">
            <summary>
            Gets or sets BGZF block start offset.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.FileOffset.UncompressedBlockOffset">
            <summary>
            Gets or sets an offset of uncompressed block inside a BGZF block 
            from which aligned sequences starts or ends.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IPathPurger">
            <summary>
            Removes containing paths and merge Overlapping scaffold paths.
            Containing Paths
            -------------- Contig 1
                --------   Contig 2
            Overlapping Paths
            --------        Contig 1 
                ---------   Contig 2
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IPathPurger.PurgePath(System.Collections.Generic.IList{MBF.Algorithms.Assembly.PaDeNA.Scaffold.ScaffoldPath})">
            <summary>
            Removes containing paths and merge overlapping paths
            </summary>
            <param name="scaffoldPaths">Input paths/scaffold</param>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.IContigBuilder">
            <summary>
            Framework for building contig sequence from de bruijn graph.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.IContigBuilder.Build(MBF.Algorithms.Assembly.Graph.DeBruijnGraph)">
            <summary>
            Contructs the contigs by performing graph walking
            or graph modification.
            </summary>
            <param name="graph">Input graph</param>
            <returns>List of contigs</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.MatePairMapper">
            <summary>
            Class maps reads to mate pairs using sequence ID of sequence in FASTA file.
            Supported mate pair formats
            >chrI0.X1:abc
            ATGC
            >chrI0.Y1:abc
            TACG
            >chrI0.F:abc
            ATGC
            >chrI0.R:abc
            TACG
            >chrI0.1:abc
            ATGC
            >chrI0.2:abc
            TACG
            Where X1,F,1 denotes forward reads and Y1,R,2 denotes reverse reads
            abc denotes library name 
            chrI0 is the sequence id
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.MatePairMapper._readExpression">
            <summary>
            Regular Expression matching reads in supported formats.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePairMapper.Map(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Map reads to mate pairs.
            </summary>
            <param name="reads">List of Reads</param>
            <returns>List of mate pairs.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePairMapper.MapContigToMatePairs(System.Collections.Generic.IList{MBF.ISequence},MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadContigMap)">
            <summary>
            Finds contig pairs having valid mate pairs connection between them.
            </summary>
            <param name="reads">Input list of reads.</param>
            <param name="alignment">Reads contig alignment.</param>
            <returns>Contig Mate pair map.</returns>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePairMapper.ContigMatePairMapper(System.Collections.Generic.Dictionary{MBF.ISequence,System.Collections.Generic.IList{MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap}},System.Collections.Generic.Dictionary{MBF.ISequence,System.Collections.Generic.IList{MBF.Algorithms.Assembly.PaDeNA.Scaffold.ReadMap}},MBF.Algorithms.Assembly.MatePair,MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs)">
            <summary>
            Creates Paired Read Contig Map.
            </summary>
            <param name="forwardContigs">Contigs aligning to forward read.</param>
            <param name="reverseContigs">Contigs aligning to reverse read.</param>
            <param name="pair">Mate Pair.</param>
            <param name="contigMatePairs">Contig mate pair.</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.MatePairMapper.GenerateExpression(System.Text.RegularExpressions.Match)">
            <summary>
            Generates expression for other read using expression on read.
            </summary>
            <param name="match">Pattern match on read whose partner has to be determined.</param>
            <returns>Expression for other read.</returns>
        </member>
        <member name="T:MBF.Web.RequestParameter">
            <summary>
            A RequestParameter is a description of a single parameter that might
            be used in a remote service request (HTTP, SOAP, etc.) The name is
            a string, and the value can be an int, double, or string (but may
            be represented in string form when submitted, as in HTTP). Validation
            is extensible so that any needed rules can be used to validate values.
            </summary>
        </member>
        <member name="M:MBF.Web.RequestParameter.#ctor(System.String,System.String,System.Boolean,System.String,System.String,MBF.IParameterValidator)">
            <summary>
            Construct a RequestParameter, specifying all properties.
            </summary>
            <param name="name">The name of the parameter as required by a service.</param>
            <param name="description">A friendly description of the parameter.</param>
            <param name="required">True if this is a required parameter.</param>
            <param name="defaultValue">The default value that will be used (expressed as a string).</param>
            <param name="dataType">The data type: int, double, or string.</param>
            <param name="validator">The validation object, or null if no validation is required.</param>
        </member>
        <member name="M:MBF.Web.RequestParameter.IsValid(System.String)">
            <summary>
            Given a value expressed as a string, return true if the value
            is valid according to this parameter's semantics.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the value is allowed.</returns>
        </member>
        <member name="P:MBF.Web.RequestParameter.SubmitName">
            <summary>
            The name as it should be submitted to a service.
            </summary>
        </member>
        <member name="P:MBF.Web.RequestParameter.Description">
            <summary>
            A friendly description of the parameter's meaning.
            </summary>
        </member>
        <member name="P:MBF.Web.RequestParameter.Required">
            <summary>
            True if the parameter is required by the service.
            </summary>
        </member>
        <member name="P:MBF.Web.RequestParameter.DefaultValue">
            <summary>
            The default value (as a string) that the service will assume if the
            parameter is not specified. Ignored if Required = true.
            </summary>
        </member>
        <member name="P:MBF.Web.RequestParameter.DataType">
            <summary>
            A string indicating the data type ("int", "double", or "string").
            </summary>
        </member>
        <member name="P:MBF.Web.RequestParameter.Validator">
            <summary>
            The validation object that tests values. If this is null, any
            value will be accepted.
            </summary>
        </member>
        <member name="T:MBF.Web.RequestCompletedEventArgs">
            <summary>
            Event arguments used to notify the user when the job is completed.
            </summary>
        </member>
        <member name="F:MBF.Web.RequestCompletedEventArgs._isSearchSuccessful">
            <summary>
            Is the search successful
            </summary>
        </member>
        <member name="F:MBF.Web.RequestCompletedEventArgs._errorMessage">
            <summary>
            Error message on failure
            </summary>
        </member>
        <member name="F:MBF.Web.RequestCompletedEventArgs._error">
            <summary>
            Exception occured
            </summary>
        </member>
        <member name="F:MBF.Web.RequestCompletedEventArgs._isCanceled">
            <summary>
            Is this request cancelled.
            </summary>
        </member>
        <member name="M:MBF.Web.RequestCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RequestCompletedEventArgs class
            </summary>
            <param name="isSearchSuccessful">Is search successful</param>
            <param name="error">Exception if any</param>
            <param name="errorMessage">Error message if any</param>
            <param name="isCanceled">Was request cancelled</param>
        </member>
        <member name="P:MBF.Web.RequestCompletedEventArgs.IsSearchSuccessful">
            <summary>
            Gets a value indicating whether the search  is successful
            </summary>
        </member>
        <member name="P:MBF.Web.RequestCompletedEventArgs.ErrorMessage">
            <summary>
            Gets the error message on failure
            </summary>
        </member>
        <member name="P:MBF.Web.RequestCompletedEventArgs.Error">
            <summary>
            Gets the Exception occured
            </summary>
        </member>
        <member name="P:MBF.Web.RequestCompletedEventArgs.IsCanceled">
            <summary>
            Gets a value indicating whether the search  is cancelled.
            </summary>
        </member>
        <member name="T:MBF.UpdateType">
            <summary>
            UpdateType specifies the type of update.
            </summary>
        </member>
        <member name="F:MBF.UpdateType.None">
            <summary>
            Not a valid update type.
            </summary>
        </member>
        <member name="F:MBF.UpdateType.Inserted">
            <summary>
            Sequence item inserted.
            </summary>
        </member>
        <member name="F:MBF.UpdateType.Removed">
            <summary>
            Sequence item removed.
            </summary>
        </member>
        <member name="F:MBF.UpdateType.Replaced">
            <summary>
            Sequence item replaced.
            </summary>
        </member>
        <member name="T:MBF.SparseSequence">
             <summary>
             SparseSequence can hold discontinuous sequence. Use this class for storing the sequence items 
             with their known position from a long continuous sequence.  This class uses SortedDictionary to store 
             the sequence items with their position. Position is zero based indexes at which a sequence items 
             are present in the original continues sequence.
             For example: 
             To store sequence items at position 10, 101, 200, 1501 this class can be used as shown in the below code.
             
             // Create a SparseSequence by specifying the Alphabet.
             SparseSequence mySparseSequence= new SparseSequence(Alphabets.DNA);
             
             // By default count will be set to zero. To insert a sequence item at a position greater than zero,
             // Count has to be set to a value greater than the maximum position value. 
             // If try to insert a sequence item at a position greater than the count an exception will occur.
             // You can limit the SparseSequence length by setting the count to desired value. In this example it 
             will be 1502 as the maximum index is 1501.
             mySparseSequence.Count = 1502;
             
             // After setting the count to desired value you can use insert method or indexer to set the value.
             
             // Using insert method to set the value.
             mySparseSequence.Insert(10, DnaAlphabet.A);
             mySparseSequence.Insert(200, DnaAlphabet.C);
            
             // Using Indexer to set the value.
             mySpareseSequence[101] = DnaAlphabet.A;
             mySpareseSequence[1501] = DnaAlphabet.G;
             
             // To access the value in a SparseSequence use Indexer or an Enumerator like below.
            
             // Accessing SparsesSequence using Indexer.
             ISequenceItem seqItem1 = mySparseSequence [10] ;  // this will return sequence item A.
             ISequenceItem seqItem2 = mySparseSequence [1501] ;  // this will return sequence item G.
             ISequenceItem seqItem3 = mySparseSequence [102] ;  // this will return null as there is no sequence item at this position.
             
             // Accessing SparsesSequence using Enumerator.
             foreach(ISequenceItem seqItem in mySparseSequence) {…}
             
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             </summary>
        </member>
        <member name="F:MBF.SparseSequence._sparseSeqItems">
            <summary>
            Holds sequence items with their position.
            </summary>
        </member>
        <member name="F:MBF.SparseSequence._seqInfo">
            <summary>
            Holds the metadata of the sequence.
            </summary>
        </member>
        <member name="F:MBF.SparseSequence._statistics">
            <summary>
            Holds statistical data of the sequence.
            </summary>
        </member>
        <member name="F:MBF.SparseSequence._count">
            <summary>
            Holds size of this sequence.
            </summary>
        </member>
        <member name="M:MBF.SparseSequence.#ctor">
            <summary>
            Private constructor for clone method.
            </summary>
        </member>
        <member name="M:MBF.SparseSequence.#ctor(MBF.IAlphabet)">
            <summary>
            Creates a SparseSequence with no sequence data and sets the IsReadOnly flag to false.
            
            Count property of SparseSequence instance created by using this constructor will be set to zero,
            thus before inserting a sequence item which is at a position greater than the count property of 
            the instance, set the count to desired value. However you can use Add() method to add a 
            sequence item even though the count is zero, in this case specified sequence item position will 
            be default to the value of the count property and then count prperty will be incremented by one.
            For example: 
            If the count property of a sparse sequence is zero, using Add() method will add 
            the specified sequence item to the position zero and count will become one. 
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
        </member>
        <member name="M:MBF.SparseSequence.#ctor(MBF.IAlphabet,System.Int32)">
            <summary>
            Creates a SparseSequence with no sequence data and sets the IsReadOnly flag to false.
            
            Count property of SparseSequence instance created by using this constructor will be 
            set a value specified by size parameter.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet"> 
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)
            </param>
            <param name="size">A value indicating the size of this sequence.</param>
        </member>
        <member name="M:MBF.SparseSequence.#ctor(MBF.IAlphabet,System.Int32,MBF.ISequenceItem)">
            <summary>
            Creates a sparse sequence based on the specified parameters and sets the IsReadOnly flag to true.
            To edit the sequence set IsReadOnly flag to false.
            
            The sequenceItem parameter must contain an alphabet as specified in the alphabet parameter,
            else an exception will occur.
            
            The index parameter value must be a non negative value.
            Count property of an instance created by this constructor will be set to value of index + 1.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">Position of the specified sequence item.</param>
            <param name="item">A sequence item which is known by the alphabet.</param>
        </member>
        <member name="M:MBF.SparseSequence.#ctor(MBF.IAlphabet,System.Int32,System.Collections.Generic.IList{MBF.ISequenceItem})">
            <summary>
            Creates a sparse sequence based on the specified parameters and sets the IsReadOnly flag to true.
            To edit the sequence set IsReadOnly flag to false.
            
            The sequenceItems parameter must contain sequence items known by the specified alphabet,
            else an exception will occur.
            
            The index parameter value must be a non negative. 
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA or Alphabets.Protein)</param>
            <param name="index">A non negative value which indicates the start position of the specified sequence items.</param>
            <param name="sequenceItems">
            A sequence which contain sequence items known by the alphabet.</param>
        </member>
        <member name="M:MBF.SparseSequence.GetKnownSequenceItems">
            <summary>
            Returns known sequence items with their position as ReadOnlyCollection of IndexedSequenceItem.
            </summary>
        </member>
        <member name="M:MBF.SparseSequence.IndexOfNotNull">
            <summary>
            Returns the position of the first item that does not have a null ISequenceItem
            </summary>
            <returns>Lowest position which has a sequence item that is not null. 
            -1 if no non-null items in sequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.IndexOfNotNull(System.Int32)">
            <summary>
            Returns the position of the first item beyond startPos that does not 
            have a null ISequenceItem.
            </summary>
            <param name="startPos">index value above which to search for non-null value</param>
            /// <returns>Lowest position greater than startPos which has a sequence item 
            that is not null. -1 if no non-null items in sequence at position 
            greater than startPos.</returns>
        </member>
        <member name="M:MBF.SparseSequence.LastIndexOfNotNull">
            <summary>
            Returns the position of the last item that does not have a null ISequenceItem
            </summary>
            <returns>Highest position which has a sequence item that is not null. 
            -1 if no non-null items in sequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.LastIndexOfNotNull(System.Int32)">
            <summary>
            Returns the position of the last item before endPos that does 
            not have a null ISequenceItem
            </summary>
            <param name="endPos">index value below which to search for non-null value</param>
            <returns>Highest position less than endPos which has a sequence item 
            that is not null. -1 if no non-null items in sequence at position less 
            than endPos.</returns>
        </member>
        <member name="M:MBF.SparseSequence.Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new SparseSequence that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.UpdatePositions(System.Int32,System.Int32)">
            <summary>
            Updates position of items which is greater than the specified index
            with the specified value.
            </summary>
            <param name="position">Position from which update has to be done.</param>
            <param name="value">Value with which positions have to be updated.</param>
        </member>
        <member name="M:MBF.SparseSequence.InsertRange(System.Int32,System.String)">
            <summary>
            Converts each character in the specified sequence string to sequence items
            and inserts them to the specified position. 
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.SparseSequence.Insert(System.Int32,System.Char)">
            <summary>
            Converts the specified character to a sequence item and insert at the specified position.
            </summary>
            <param name="position">Position at which the sequence to be inserted.</param>
            <param name="character">A character which indicates a sequence item.</param>
        </member>
        <member name="M:MBF.SparseSequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes specified length of sequence items present in this sequence from the specified position.
            </summary>
            <param name="position">Position from which the sequence items to be removed.</param>
            <param name="length">Number of sequence items to be removed.</param>
        </member>
        <member name="M:MBF.SparseSequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence with the specified sequence item. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="item">Sequence item to be placed at the specified position.</param>
        </member>
        <member name="M:MBF.SparseSequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Replaces the sequence items present in the specified position in this sequence with the specified sequence.
            </summary>
            <param name="position">Position from which the replace of sequence items has to be started.</param>
            <param name="sequence">A string containing the description of a sequence.</param>
        </member>
        <member name="M:MBF.SparseSequence.Replace(System.Int32,System.Char)">
            <summary>
            Replaces the sequence item present in the specified position in this sequence 
            with a sequence item which is represented by specified character. 
            </summary>
            <param name="position">Position at which the sequence item has to be replaced.</param>
            <param name="character">Character which represent a sequence item.</param>
        </member>
        <member name="M:MBF.SparseSequence.ToString">
            <summary>
            SparseSequence does not contains continuous sequence data thus 
            SparseSequence does not support this method.
            </summary>
        </member>
        <member name="M:MBF.SparseSequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The sequence which is sub sequence of this sequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SparseSequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SparseSequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SparseSequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.SparseSequence.MBF#ISequence#Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new ISequence that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.SparseSequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns the position of first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item of which the position is required.</param>
            <returns>If found returns the positon of first occurance of the specified sequence item else returns -1.</returns>
        </member>
        <member name="M:MBF.SparseSequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Inserts the specified sequence item to a specified positon in this sequence.
            </summary>
            <param name="index">Position at which the sequence item has to be inserted.</param>
            <param name="item">Sequence item to be inserted.</param>
        </member>
        <member name="M:MBF.SparseSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence item present in the specified position.
            </summary>
            <param name="index">Position at which the sequence item has to be removed.</param>
        </member>
        <member name="M:MBF.SparseSequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds the specified sequence item to the end of this sequence.
            </summary>
            <param name="item">Sequence item to be added.</param>
        </member>
        <member name="M:MBF.SparseSequence.Clear">
            <summary>
            Clears the underlying sequence data in this sequence.
            </summary>
        </member>
        <member name="M:MBF.SparseSequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            </summary>
            <param name="item">Sequence item to be verified.</param>
            <returns>If found returns true else returns false.</returns>
        </member>
        <member name="M:MBF.SparseSequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items in this instace into a preallocated array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">A preallocated array of ISequenceItem to which the 
            ISequenceItems in this instance has to be copied.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MBF.SparseSequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes first occurance of the specified sequence item in this sequence.
            </summary>
            <param name="item">Sequence item to be removed.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.SparseSequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns>IEnumerator of ISequenceItem.</returns>
        </member>
        <member name="M:MBF.SparseSequence.System#ICloneable#Clone">
            <summary>
            Creates a new SparseSequence that is a copy of the current SparseSequence.
            </summary>
            <returns>A new object that is a copy of this SparseSequence.</returns>
        </member>
        <member name="M:MBF.SparseSequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.SparseSequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SparseSequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.SparseSequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="P:MBF.SparseSequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Encoding">
            <summary>
            The encoding being used to store sequence items in this instance.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Reverse">
            <summary>
            Return a sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Complement">
            <summary>
            Return a sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.ReverseComplement">
            <summary>
            Return a sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, gets or sets
            the sequence item at the specified index. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.SparseSequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.IO.XsvContigParser">
            <summary>
            This creates a contig parser that uses an XSV sparse reader to parse
            a contig from a list of sparse sequences, where the first sequence is the
            consensus and the rest are sequences aligned to it.
            </summary>
        </member>
        <member name="T:MBF.IO.XsvSparseParser">
            <summary>
            
            Implements common methods for parsing one or more sparse sequences from 
            an XsvSparseReader. This reads sequence items from the reader and 
            returns a sparse sequence created for the items. Multiple sparse sequences
            are separated by a "comment" line that starts with the sequence prefix 
            character.
            
            This also returns the optional offset position of the sequence, if 
            present, to support aligned sequences such as in a Contig.
            
            This is an abstract class and extending classes will have to implement
            the GetSparseReader(TextReader reader) method.
            
            This class is based on the MBF.IO.BasicSequenceParser.
            
            </summary>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.#ctor(MBF.Encoding.IEncoding,MBF.IAlphabet)">
            <summary>
            Creates a Sparse parser with the given encoding and alphabet
            </summary>
            <param name="encoding">Encoding for the sequence items</param>
            <param name="alphabet">Alphabet for the sequence items</param>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.Parse(System.String)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.Parse(System.String,System.Boolean)">
            <summary>
            Creates a text reader from the file name and calls Parse(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.Parse(System.IO.TextReader)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses a list of sparse sequences from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <returns>A list of sparse sequences that were present in the reader.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses a list of sparse sequences from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the reader.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOne(System.String)">
            <summary>
            Creates a text reader from the file name and calls ParseOne(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Creates a text reader from the file name and calls ParseOne(TextReader reader).
            </summary>
            <param name="filename">name of file containing the Xsv formatted sparse sequences</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A list of sparse sequences that were present in the file.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOne(System.IO.TextReader)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses the first sparse sequence from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <returns>The first sparse sequence that was present in the reader.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a XsvSparseReader for the given text text reader by calling
            GetSparseReader() and parses the first sparse sequence from the reader.
            </summary>
            <param name="reader">The text reader that has zero or more sparse sequences
            formatted using the XsvSparseFormatter.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sparse sequence that was present in the reader.</returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOne(MBF.IO.XsvSparseReader,System.Boolean)">
            <summary>
            The common ParseOne method called for parsing sequences from Xsv files. 
            This assumes that that the first line has been read into the XsvSparseReader 
            (i.e. GoToNextLine() has been called). This adds the offset position present in 
            the sequence start line to each position value in the sequence item.
            e.g. the following returns a sparse sequence with ID 'Test sequence' of length 100 
            with A at position 32 (25+7) and G at position 57 (50+7).
            # 7, 100, Test sequence
            25,A
            50,G
            
            </summary>
            <param name="sparseReader">The Xsv sparse reader that can read the sparse sequences.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sequence present starting from the 
            current position in the reader as a SparseSequence. The sparse sequence has the ID present in the 
            sequence start line, and its length equals the count present in that line. 
            Null if EOF has been reached. Throws an exception if the current position did 
            not have the sequence start line with the sequence prefix ID character.
            </returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.ParseOneWithOffset(MBF.IO.XsvSparseReader,System.Boolean)">
            <summary>
            The ParseOne method called for parsing sequences from Xsv files,
            and returning the offset separately. This can be used by aligned/assembled 
            sparse sequences.
            This assumes that that the first line has been read into the XsvSparseReader 
            (i.e. GoToNextLine() has been called). This does NOT add the offset position 
            present in the sequence start line to each position value in the sequence item. 
            Instead, it returns the offset in the out parameter.
            e.g. the following returns a sparse sequence with ID 'Test sequence' of length 100 
            with A at position 25 and G at position 50, 
            and the out offset value as 7.
            # 7, 100, Test sequence
            25,A
            50,G
            
            </summary>
            <param name="sparseReader">The Xsv sparse reader that can read the sparse sequences.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The first sequence present starting from the 
            current position in the reader, as a SparseSequence. The sparse sequence has the ID present in the 
            sequence start line, and its length equals the count present in that line. 
            Throws an exception if EOF has been reached or the current position did 
            not have the sequence start line with the sequence prefix ID character.
            Also returns the offset value present in the sequence start line.
            </returns>
        </member>
        <member name="M:MBF.IO.XsvSparseParser.GetSparseReader(System.IO.TextReader)">
            <summary>
            Abstract method that returns a XSV sparse reader for the given text reader.
            The Parse*() methods use the returned sparse reader to parse sparse seqeunces.
            Classes extending from this base class must implement this method to match
            the XSV format of the passed text reader.
            </summary>
            <param name="reader">Text reader to create a sparse reader for</param>
            <returns>Sparse parser that can parse the text reader 
            as a sequence of items.</returns>
        </member>
        <member name="P:MBF.IO.XsvSparseParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects. 
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseParser.Description">
            <summary>
            Gets the description of the parser. 
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSparseParser.FileTypes">
            <summary>
            Gets the filetypes supported by the sparse parser.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvContigParser.separator">
            <summary>
            The separator character passed to the XsvSparseReader
            </summary>
        </member>
        <member name="F:MBF.IO.XsvContigParser.sequenceIdPrefix">
            <summary>
            The sequence ID prefix character passed to the XsvSparseReader
            </summary>
        </member>
        <member name="M:MBF.IO.XsvContigParser.#ctor(MBF.Encoding.IEncoding,MBF.IAlphabet,System.Char,System.Char)">
            <summary>
             Creates a contig parser that parses Contigs using the given encoding
             and alphabet, by creating an XsvSparseReader that uses the given separator 
             and sequenceIdPrefix characters.
            </summary>
            <param name="encoding">Encoding to use for the consensus and assembled sequences that are parsed.</param>
            <param name="alphabet">Alphabet to use for the consensus and assembled sequences that are parsed.</param>
            <param name="separator_">Character used to separate sequence item position and symbol in the Xsv file</param>
            <param name="sequenceIdPrefix_">Character used at the beginning of the sequence start line.</param>
        </member>
        <member name="M:MBF.IO.XsvContigParser.ParseContig(System.IO.TextReader,System.Boolean)">
            <summary>
            This converts a list of sparse sequences read from the Text reader into a contig.
            Assumes the first sequence is the consensus and the rest are assembled sequences.
            The positions of the assembed sequences are the offsets of the sparse sequences in
            the sequence start line. The positions of the sequence items are the same as their
            position field value in each character separated line 
            (i.e. they are not incremented by the offset)
            </summary>
            <param name="reader">Text reader with the formatted contig</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences in the contig should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed contig with consensus and assembled sequences, all represented 
            as SparseSequences. 
            Null if no lines were present in the reader. Exception if valid sparse sequences
            were not present. 
            NOTE: This does not check if the assembled sequence positions are valid with respect to the consensus.
            </returns>
        </member>
        <member name="M:MBF.IO.XsvContigParser.ParseAssembledSequence(MBF.IO.XsvSparseReader,System.Boolean)">
            <summary>
            Parses a list of assembled sparse sequences from the reader.
            </summary>
            <param name="contigReader">The reader to read the assembled sparse sequences from</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequences should be in readonly mode or not.
            If this flag is set to true then the resulting sequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.XsvContigParser.GetSparseReader(System.IO.TextReader)">
            <summary>
            Creates and returns an XsvSparseReader for the given text reader
            that uses the separator and sequenceIdPrefix characters passed
            in the constructor for the Contig Parser.
            </summary>
            <param name="reader">Text reader to create a sparse reader for</param>
            <returns>Sparse parser that can parse the text reader as a sequence of 
            items using the separator characters defined for this contig.</returns>
        </member>
        <member name="T:MBF.IO.IPhylogeneticTreeParser">
            <summary>
            Implementations of this interface are designed to parse a phylogenetic tree file 
            format to produce a PhylogeneticTree object model. 
            </summary>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a phylogenetic tree text from a reader.
            </summary>
            <param name="reader">A reader for a phylogenetic tree text.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeParser.Parse(System.Text.StringBuilder)">
            <summary>
            Parses a phylogenetic tree text from a string.
            </summary>
            <param name="treeBuilder">phylogenetic tree text.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="M:MBF.IO.IPhylogeneticTreeParser.Parse(System.String)">
            <summary>
            Parses phylogenetic tree texts from a file.
            </summary>
            <param name="fileName">The name of a phylogenetic tree file.</param>
            <returns>Phylogenetic tree object.</returns>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeParser.Name">
            <summary>
            Gets the name of the phylogenetic tree parser being
            implemented. This is intended to give the
            developer some information of the parser type.
            </summary>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeParser.Description">
            <summary>
            Gets the description of the phylogenetic tree parser being
            implemented. This is intended to give the
            developer some information of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.IPhylogeneticTreeParser.FileTypes">
            <summary>
            Gets the file extensions that the parser implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.TransitPeptide">
            <summary>
            Transit peptide coding sequence (transit_peptide); coding sequence for an N-terminal domain of a nuclear-encoded organellar protein; 
            this domain is involved in post-translational import of the protein into the organelle.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.TransitPeptide.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new TransitPeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransitPeptide.#ctor(System.String)">
            <summary>
            Creates new TransitPeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransitPeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransitPeptide.#ctor(MBF.IO.GenBank.TransitPeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransitPeptide instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransitPeptide.Clone">
            <summary>
            Creates a new TransitPeptide that is a copy of the current TransitPeptide.
            </summary>
            <returns>A new TransitPeptide that is a copy of this TransitPeptide.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransitPeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.TataSignal">
            <summary>
             TATA box; Goldberg-Hogness box; a conserved AT-rich septamer found about 25 bp before the start point 
             of each eukaryotic RNA polymerase II transcript unit which may be involved in positioning the enzyme 
             for correct initiation; consensus=TATA(A or T)A(A or T).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.TataSignal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new TATASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TataSignal.#ctor(System.String)">
            <summary>
            Creates new TATASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TATASignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TataSignal.#ctor(MBF.IO.GenBank.TataSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TATASignal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TataSignal.Clone">
            <summary>
            Creates a new TATASignal that is a copy of the current TATASignal.
            </summary>
            <returns>A new TATASignal that is a copy of this TATASignal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TataSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.RibosomeBindingSite">
            <summary>
            Ribosome binding site (RBS).
            In prokaryotes, known as the Shine-Dalgarno sequence: islocated 5 to 9 bases upstream of the initiation codon.
            Consensus GGAGGT.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomeBindingSite.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new RibosomeBindingSite feature item from the specified location.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomeBindingSite.#ctor(System.String)">
            <summary>
            Creates new RibosomeBindingSite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RibosomeBindingSite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomeBindingSite.#ctor(MBF.IO.GenBank.RibosomeBindingSite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RibosomeBindingSite instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RibosomeBindingSite.Clone">
            <summary>
            Creates a new RibosomeBindingSite that is a copy of the current RibosomeBindingSite.
            </summary>
            <returns>A new RibosomeBindingSite that is a copy of this RibosomeBindingSite.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RibosomeBindingSite.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ReplicationOrigin">
            <summary>
            Origin of replication (rep_origin); starting site for duplication of nucleic acid to give two identical copies.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ReplicationOrigin.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new ReplicationOrigin feature item from the specified location.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ReplicationOrigin.#ctor(System.String)">
            <summary>
            Creates new ReplicationOrigin feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ReplicationOrigin.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ReplicationOrigin.#ctor(MBF.IO.GenBank.ReplicationOrigin)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ReplicationOrigin instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ReplicationOrigin.Clone">
            <summary>
            Creates a new ReplicationOrigin that is a copy of the current ReplicationOrigin.
            </summary>
            <returns>A new ReplicationOrigin that is a copy of this ReplicationOrigin.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Direction">
            <summary>
            Direction of DNA replication.
            Values: left, right, or both where left indicates toward the 5' end of the entry sequence 
                    (as presented) and right indicates toward the 3' end.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ReplicationOrigin.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.RepeatRegion">
            <summary>
             Region of genome containing repeating units.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.RepeatRegion.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new RepeatRegion feature item from the specified location.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RepeatRegion.#ctor(System.String)">
            <summary>
            Creates new RepeatRegion feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the RepeatRegion.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RepeatRegion.#ctor(MBF.IO.GenBank.RepeatRegion)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other RepeatRegion instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.RepeatRegion.Clone">
            <summary>
            Creates a new RepeatRegion that is a copy of the current RepeatRegion.
            </summary>
            <returns>A new RepeatRegion that is a copy of this RepeatRegion.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.MobileElement">
            <summary>
            Type and name or identifier of the mobile element which is described by the parent feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.RepeatedRange">
            <summary>
            rpt_unit_range; Identity of a repeat range.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.RepeatedSequence">
            <summary>
            rpt_unit_seq; Identity of a repeat sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.RepeatedSequenceFamily">
            <summary>
            rpt_family; Type of repeated sequence; ""Alu"" or ""Kpn"", for example.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.RepeatedSequenceType">
            <summary>
            rpt_type; Organization of repeated sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.Satellite">
            <summary>
            Identifier for a satellite DNA marker, compose of many tandem repeats 
            (identical or related) of a short basic repeated unit.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.RepeatRegion.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.SequenceAligners">
            <summary>
            SequenceAligners class is an abstraction class which provides instances
            and lists of all Aligners currently supported by MBF. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.smithAlign">
            <summary>
            A singleton instance of SmithWatermanAligner class which implements
            the SmithWaterman algorithm for partial alignment
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.needlemanAlign">
            <summary>
            A singleton instance of NeedlemanWunschAligner class which implements
            the NeedlemanWunsch algorithm for global alignment.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.overlap">
            <summary>
            A singleton instance of PairwiseOverlapAligner class which implements
            pairwise overlap alignment algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.mummer3">
            <summary>
            A singleton instance of MUMmer class which implements
            mummer alignment algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.nucmer3">
            <summary>
            A singleton instance of NUCmer class which implements
            NUCmer alignment algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.SequenceAligners.all">
            <summary>
            List of supported sequence aligners.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAligners.#cctor">
            <summary>
            Initializes static members of the SequenceAligners class.
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.SequenceAligners.GetAligners(System.Boolean)">
            <summary>
            Gets all registered aligners in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered aligners</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.SmithWaterman">
            <summary>
            Gets an instance of SmithWatermanAligner class which implements
            the SmithWaterman algorithm for partial alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.NeedlemanWunsch">
            <summary>
            Gets an instance of NeedlemanWunschAligner class which implements
            the NeedlemanWunsch algorithm for global alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.PairwiseOverlap">
            <summary>
            Gets an instance of PairwiseOverlapAligner class which implements
            pairwise overlap alignment algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.MUMmer">
            <summary>
            Gets an instance of MUMmer3 class which implements
            the MUMmer algorithm for partial alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.NUCmer">
            <summary>
            Gets an instance of NUCmer3 class which implements
            the NUCmer algorithm for alignment
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.SequenceAligners.All">
            <summary>
            Gets the list of all aligners which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.SimilarityMatrices.DiagonalSimilarityMatrix">
            <summary>
            Diagonal similarity matrix is a special case and needs its own class.
            It does not have an actual matrix, instead using a test "if (col == row)" and
            returning the diagonal value if true, and the off diagonal value if false.
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.DiagonalSimilarityMatrix._diagonalValue">
            <summary>
            Score value at diagonals. To be used when (col == row)
            </summary>
        </member>
        <member name="F:MBF.SimilarityMatrices.DiagonalSimilarityMatrix._offDiagonalValue">
            <summary>
            Score value off diagonals. To be used when (col != row)
            </summary>
        </member>
        <member name="M:MBF.SimilarityMatrices.DiagonalSimilarityMatrix.#ctor(System.Int32,System.Int32,MBF.MoleculeType)">
            <summary>
            Initializes a new instance of the DiagonalSimilarityMatrix class.
            Creates a SimilarityMatrix with one value for match and one for mis-match.
            </summary>
            <param name="matchValue">diagonal score for (col == row)</param>
            <param name="mismatchValue">off-diagonal score for (col != row)</param>
            <param name="moleculeType">DNA, RNA or Protein</param>
        </member>
        <member name="P:MBF.SimilarityMatrices.DiagonalSimilarityMatrix.DiagonalValue">
            <summary>
            Gets or sets the diagonal value (match value) for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.DiagonalSimilarityMatrix.OffDiagonalValue">
            <summary>
            Gets or sets the off diagonal value (mis-match value for the diagonal similarity matrix.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.DiagonalSimilarityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Returns value of diagonal similarity matrix at [row,col].
            </summary>
            <param name="row">
            Row number. This is same as byte value
            corresponding to sequence symbol on the row
            </param>
            <param name="col">
            Column number. This is same as byte value
            corresponding to sequence symbol on the column
            </param>
            <returns>Score value of matrix at [row,col]</returns>
        </member>
        <member name="P:MBF.SimilarityMatrices.DiagonalSimilarityMatrix.Item(MBF.ISequenceItem,MBF.ISequenceItem)">
            <summary>
            Returns value of matrix at row, column corresponding to input ISequenceItems.
            </summary>
            <param name="rowItem">ISequenceItem on the row</param>
            <param name="colItem">ISequenceItem on the column</param>
            <returns>Score at matrix[row, col]</returns>
        </member>
        <member name="T:MBF.Matrix.PaddedDouble">
            <summary>
            A matrix object that reads double out of a file, as needed, rather than keeping them in memory.
            </summary>
        </member>
        <member name="F:MBF.Matrix.PaddedDouble.BytesPerValue">
            <summary>
            The number of ANSI characters in a file used to write out a double in text format.
            </summary>
        </member>
        <member name="F:MBF.Matrix.PaddedDouble.FormatString">
            <summary>
            The format string used to write doubles into ANSI text.
            </summary>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.StoreToSparseVal(System.Double)">
            <summary>
            A method that converts a double into a string suitable for writing to a file.
            </summary>
            <param name="store">The double</param>
            <returns>the string</returns>
        </member>
        <member name="F:MBF.Matrix.PaddedDouble.StaticMissingValue">
            <summary>
            The special value used to represent missing values. Always double.NaN.
            </summary>
        </member>
        <member name="F:MBF.Matrix.PaddedDouble.StaticStoreMissingValue">
            <summary>
            The special value used to represent missing values internally. Always double.NaN.
            </summary>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.CreateEmptyInstance(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Create an empty instance of a PaddedDouble file
            </summary>
            <param name="rowKeySequence">A sequence of row keys. The items will become the RowKeys of the Matrix.</param>
            <param name="colKeySequence">A sequence of colKeys. The items will come the ColKeys of the Matrix.</param>
            <param name="missingValue">The special value that represents missing</param>
            <returns>An empty PaddedDouble instance</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.TryGetInstanceFromSparse(System.String,MBF.Matrix.Matrix{System.String,System.String,System.Double}@)">
            <summary>
            Create an instance of PaddedDouble from a sparse input file
            </summary>
            <param name="inputSparsePattern">The sparse input file</param>
            <param name="matrix">The PaddedDouble matrix created</param>
            <returns>true if the file parses as PaddedDouble; otherwise, false</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.TryGetInstanceFromSparse(System.String,MBF.Matrix.PaddedDouble@)">
            <summary>
            Create an instance of PaddedDouble from a sparse input file
            </summary>
            <param name="inputSparsePattern">The sparse input file</param>
            <param name="paddedDouble">The PaddedDouble matrix created</param>
            <returns>true if the file parses as PaddedDouble; otherwise, false</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.GetInstanceFromSparse(System.String)">
            <summary>
            Create an instance of PaddedDouble from a sparse input file
            </summary>
            <param name="inputSparsePattern">The sparse input file</param>
            <returns>A PaddedDouble</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.GetInstanceFromSparse(System.Collections.Generic.IEnumerable{MBF.Matrix.RowKeyColKeyValue{System.String,System.String,System.Double}})">
            <summary>
            Create a PaddedDouble object from a sequence of RowKeyColKeyValue triples.
            </summary>
            <param name="tripleEnumerable">a sequence of RowKeyColKeyValue</param>
            <returns>A PaddedDouble object</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.TryGetInstance(System.String,System.Double,System.Threading.Tasks.ParallelOptions,MBF.Matrix.Matrix{System.String,System.String,System.Double}@)">
            <summary>
            This awkward method is provided for the sake of MatrixFactory. Right now it simply catches exceptions. Should switch and make it fail silently when doesn't work.
            </summary>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.GetInstance(System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Creates an instance of PaddedDouble from a file in PaddedDouble format.
            </summary>
            <param name="paddedDoubleFileName">a file in PaddedDouble format</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>The created PaddedDouble</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDouble.EachSparseLine(System.String,System.Boolean,System.String,MBF.Util.Logging.CounterWithMessages)">
            <summary>
            Returns the contents of a files in PaddedDouble format as a sequence of string arrays in sparse file format.
            Saves memory by never creating a PaddedDouble instance.
            </summary>
            <param name="filePattern">Files in PaddedDouble format</param>
            <param name="zeroIsOK">tells if it's OK if not files match parts of the file pattern.</param>
            <param name="fileMessageOrNull">A string containing '{0}' to write as each file is opened.</param>
            <param name="counterWithMessages">Send status messages to standard output</param>
            <returns>A sequence of string arrays. Each string array has three values: the var, the cid, and the val.</returns>
        </member>
        <member name="T:MBF.Matrix.PaddedDoubleExtensions">
            <summary>
            Extension methods on Matrix related to PaddedDouble.
            </summary>
        </member>
        <member name="M:MBF.Matrix.PaddedDoubleExtensions.AsPaddedDouble(MBF.Matrix.Matrix{System.String,System.String,System.Double},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a PaddedDouble. If matrix is already a dense collection, then returns the given matrix without copying. 
            </summary>
            <param name="inputMatrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A paddedDouble version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDoubleExtensions.ToPaddedDouble(MBF.Matrix.Matrix{System.String,System.String,System.Double},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Converts matrix to a PaddedDouble. Even if the matrix is already an paddedDouble, a new one is created.. 
            </summary>
            <param name="matrix">The matrix to convert from</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <returns>A paddedDouble version of the matrix</returns>
        </member>
        <member name="M:MBF.Matrix.PaddedDoubleExtensions.WritePaddedDouble(MBF.Matrix.Matrix{System.String,System.String,System.Double},System.String,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Write a matrix in PaddedDouble file format
            </summary>
            <param name="matrix">The matrix to write</param>
            <param name="filename">The file to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="M:MBF.Matrix.PaddedDoubleExtensions.WritePaddedDouble(MBF.Matrix.Matrix{System.String,System.String,System.Double},System.IO.TextWriter,System.Threading.Tasks.ParallelOptions)">
            <summary>
            Write in PaddedDouble file format to a TextWriter
            </summary>
            <param name="matrix">The matrix to write</param>
            <param name="textWriter">The TextWriter to write to</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
        </member>
        <member name="T:MBF.IO.SAM.SAMOptionalField">
            <summary>
            This class holds SAM optional field.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.TagRegexExprPattern">
            <summary>
            Holds regular expression pattern of Tag.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.VTypeRegexExprPattern">
            <summary>
            Holds regular expression pattern of Vtype.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.ValueRegexExprPattern">
            <summary>
            Holds regular expression pattern of value.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.TagRegexExpr">
            <summary>
            Holds regular expression for Tag.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.VTypeRegexExpr">
            <summary>
            Holds regular expression for Vtype.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField.ValueRegexExpr">
            <summary>
            Holds regular expression for Value.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField._tag">
            <summary>
            Holds tag value of the option field.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField._vtype">
            <summary>
            Holds type of the value present in the "Value" property.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMOptionalField._value">
            <summary>
            Holds value of the optional field.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMOptionalField.IsValidTag(System.String)">
            <summary>
            Validates Tag.
            </summary>
            <param name="tag">Tag value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMOptionalField.IsValidVType(System.String)">
            <summary>
            Validates VType.
            </summary>
            <param name="vtype">VType value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMOptionalField.IsValidValue(System.String)">
            <summary>
            Validates Value.
            </summary>
            <param name="value">Value to validate.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMOptionalField.Tag">
            <summary>
            Tag of the option field.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMOptionalField.VType">
            <summary>
            Type of the value present in the "Value" property.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMOptionalField.Value">
            <summary>
            Value of the optional field.
            </summary>
        </member>
        <member name="T:MBF.IO.FileLoadHelper">
            <summary>
            Used for data virtualization to determine the block info
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.KBytes">
            <summary>
            1 KB
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.MBytes">
            <summary>
            1 MB
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.DefaultBlockSize">
            <summary>
            Default block size
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.DefaultMaxNumberOfBlocks">
            <summary>
            Default number of blocks
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.DefaultFullLoadBlockSize">
            <summary>
            Full load default block size
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper._fileSize">
            <summary>
            file size
            </summary>
        </member>
        <member name="F:MBF.IO.FileLoadHelper.performanceCounter">
            <summary>
            Attach the performance counter on Memory
            </summary>
        </member>
        <member name="M:MBF.IO.FileLoadHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileLoadHelper class.
            </summary>
        </member>
        <member name="P:MBF.IO.FileLoadHelper.BlockSize">
            <summary>
            Gets or sets block size
            </summary>
        </member>
        <member name="P:MBF.IO.FileLoadHelper.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks in cache
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.Graph.DeBruijnPathList">
            <summary>
            Class representing the list of paths in de bruijn graph
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.Graph.DeBruijnPathList._paths">
            <summary>
            List of paths
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPathList.#ctor">
            <summary>
            Initializes a new instance of the DeBruijnPathList class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPathList.#ctor(System.Collections.Generic.IEnumerable{MBF.Algorithms.Assembly.Graph.DeBruijnPath})">
            <summary>
            Initializes a new instance of the DeBruijnPathList class.
            Adds elements in input enumerable type to list.
            </summary>
            <param name="paths">List of paths</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.Graph.DeBruijnPathList.AddPaths(System.Collections.Generic.IList{MBF.Algorithms.Assembly.Graph.DeBruijnPath})">
            <summary>
            Add the given list of paths to local variable
            </summary>
            <param name="paths">List of paths to add</param>
        </member>
        <member name="P:MBF.Algorithms.Assembly.Graph.DeBruijnPathList.Paths">
            <summary>
            Gets list of paths
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMSortedIndex">
            <summary>
            This class implements indexer for Sorted BAM Index.
            Reads
             Index for a file (contains data sorted by index) and return index
             Or
             Indices from multiple file (contains data sorted by index in each file) and returns smallest index.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortedIndex._readers">
            <summary>
            List of file readers.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortedIndex._data">
            <summary>
            Next data object to processed in each file.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortedIndex._filenames">
            <summary>
            holds filenames (sorted files) like chr1_1, chr1_2, chr2 etc.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortedIndex._sortType">
            <summary>
            Type of sort needed.
            </summary>
        </member>
        <member name="F:MBF.IO.BAM.BAMSortedIndex._current">
            <summary>
            Holds current sorted index.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.#ctor(System.Collections.Generic.IList{System.String},MBF.IO.BAM.BAMSortByFields)">
            <summary>
            Constructor to initialize an instance of BAMSortedIndex class with specified list of filenames.
            </summary>
            <param name="filenames">Sorted filenames.</param>
            <param name="sortType">Type of sort required.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.#ctor(System.String,MBF.IO.BAM.BAMSortByFields)">
            <summary>
            Constructor to initialize an instance of BAMSortedIndex class with specified filename.
            </summary>
            <param name="filename">Sorted filename.</param>
            <param name="sortType">Type of sort required.</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.Dispose">
            <summary>
            Disposes this object by discording any resources held.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.MoveNext">
            <summary>
            Fetches next sorted index.
            </summary>
            <returns>Returns true on successful fetch, else return false.</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.Reset">
            <summary>
            Resets this instance to initial state.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.GetEnumerator">
            <summary>
            Returns the enumerator object
            </summary>
            <returns>enumerator object</returns>
        </member>
        <member name="M:MBF.IO.BAM.BAMSortedIndex.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator object
            </summary>
            <returns></returns>
        </member>
        <member name="P:MBF.IO.BAM.BAMSortedIndex.GroupName">
            <summary>
            Gets or sets the Chromosome name of this Sorted BAM Indexer
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMSortedIndex.Current">
            <summary>
            Gets the current sorted index.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMSortedIndex.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current sorted index.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair">
            <summary>
            Class stores information about mate pairs and 
            their start positions with respect to contig.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair._forwardReadStartPosition">
            <summary>
            Stores information about start position of forward read in contig.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair._reverseReadStartPosition">
            <summary>
            Stores information about start position of reverse read in contig.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair._reverseReadReverseComplementStartPosition">
            <summary>
             Stores information about start position of reverse read in 
             reverse complementary sequence of contig.
             The distance estimated for both cases will be used in trace path, 
             based on edge orientation contig overlap graph.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair._distanceBetweenContigs">
            <summary>
            Stores distance between contigs using forward and 
            reverse complementary sequence of reverse contig.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair._standardDeviationBetweenContigs">
            <summary>
            Stores standard deviation between contigs using forward and 
            reverse complementary sequence of reverse contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.ForwardReadStartPosition">
            <summary>
            Gets value of start position of forward read in contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.ReverseReadStartPosition">
            <summary>
            Gets value of start position of reverse read in contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.ReverseReadReverseComplementStartPosition">
            <summary>
            Gets value of start position of reverse read in 
            reverse complementary sequence of contig.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.PairedRead">
            <summary>
            Gets or sets Paired reads
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.DistanceBetweenContigs">
            <summary>
            Gets distance between contigs, calculated using paired read information.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.StandardDeviation">
            <summary>
            Gets standard Deviation between contigs, calculated using paired read information.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ValidMatePair.Weight">
            <summary>
            Gets or sets Weight of relationship between two contigs.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IReadContigMapper">
            <summary>
            Interface is used by classes that maps mate pairs to contigs. 
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IReadContigMapper.Map(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence},System.Int32)">
            <summary>
            Map reads to contigs.
            Reads are aligned to contigs for distance calculation between
            contigs using mate pair library information, which will aid in scaffold building. 
            </summary>
            <param name="contigs">List of contig sequences</param>
            <param name="reads">List of paired reads to be mapped</param>
            <param name="kmerLength">Length of kmer</param>
            <returns>Read contig Map</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.IGraphEndsEroder">
            <summary>
            Interface for eroding graph nodes that have
            low coverage.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.IGraphEndsEroder.ErodeGraphEnds(MBF.Algorithms.Assembly.Graph.DeBruijnGraph,System.Int32)">
            <summary>
            Erode ends of graph that have low coverage.
            For optimization of another step (dangling link purger)
            in assembly process, this returns a list of integers.
            In case this optimization is not used, a single element
            list containing the number of eroded nodes can be returned.
            </summary>
            <param name="graph">Input graph</param>
            <param name="erodeThreshold">Threshold for erosion</param>
            <returns>List containing the number of nodes eroded</returns>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.IGraphEndsEroder.Name">
            <summary>
            Gets the name of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.PaDeNA.IGraphEndsEroder.Description">
            <summary>
            Gets the description of the sequence assembly algorithm being
            implemented. This is intended to give the
            developer some information of the current sequence assembly algorithm.
            </summary>
        </member>
        <member name="T:MBF.Web.ClustalW.ClustalWParameters">
            <summary>
            The parameters collection for the Clustal W web service. Consists of a static set of
            allowed parameters and validation methods, and a collection of parameter/value
            pairs that have been validated and added to the instance.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.Email">
            <summary>
            Email address for reporting job status/problems.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.Action">
            <summary>
            Type of Action to Perform.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.ActionAlign">
            <summary>
            Perform alignment action.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.RunOption">
            <summary>
            Run in Batch (or) Real-Time.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.RunBatch">
            <summary>
            Run in Batch Mode
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.CpuOption">
            <summary>
            Number of Cores available
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.ClusterOption">
            <summary>
            Cluster to be used.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.FormatAlignment">
            <summary>
            Format of Alignment output.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.FormatClustalW">
            <summary>
            ClustalW Format.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.FormatNexus">
            <summary>
            Nexus Format.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.FormatPhylip">
            <summary>
            Phylip Format.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.OrderOption">
            <summary>
            Order of output.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.OrderInput">
            <summary>
            Order by input.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.OrderAlign">
            <summary>
            Order by alignment
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.ProteinMatrixOption">
            <summary>
            Protein Matrix to be used.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.DnaMatrixOption">
            <summary>
            Dna Matrix to be used.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.GapOpeningPenalty">
            <summary>
            Gap Opening Penalty.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.GapExtensionPenalty">
            <summary>
            Gap Extension Penalty.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.GapSeparationPenalty">
            <summary>
            Gap Separation Penalty.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.GapEnd">
            <summary>
            Use Gap End.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.GapHydrophilic">
            <summary>
            Use Gap Hydrophilic.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.KimuraOption">
            <summary>
            Use Kimura Correction.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.BootstrapOption">
            <summary>
            Boot Strap Value.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.LabelTreeOption">
            <summary>
            Label Tree Option.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters.FormatTree">
            <summary>
            Format of Tree output.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters._parameters">
            <summary>
            List of request parameter
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWParameters._values">
            <summary>
            List of parameter values
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWParameters.#cctor">
            <summary>
            Initializes static members of the ClustalWParameters class.
            The static constructor defines the initial set of allowed parameters and values.
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWParameters.Add(System.String,System.String)">
            <summary>
            Validate a parameter/value pair, and add them to Values,
            replacing any value already present for that parameter.
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterValue">The parameter value</param>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWParameters.Parameters">
            <summary>
            Gets the various parameters required for a ClustalW service and the
            possible values for those parameters.
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWParameters.Values">
            <summary>
            Gets or sets values of parameters is the collection of parameter/value pairs that
            have been validated and added to this instance. 
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastRequestCompletedEventArgs">
            <summary>
            Event arguments used to notify the user when the job is completed.
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastRequestCompletedEventArgs._searchResult">
            <summary>
            Result of blast search
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastRequestCompletedEventArgs._requestIdentifier">
            <summary>
            Job identifier
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastRequestCompletedEventArgs.#ctor(System.String,System.Boolean,System.Collections.Generic.IList{MBF.Web.Blast.BlastResult},System.Exception,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RequestCompletedEventArgs class
            </summary>
            <param name="requestIdentifier">Job identifier</param>
            <param name="isSearchSuccessful">Is search successful</param>
            <param name="searchResult">Search result records</param>
            <param name="error">Exception if any</param>
            <param name="errorMessage">Error message if any</param>
            <param name="isCanceled">Was request cancelled</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastRequestCompletedEventArgs.SearchResult">
            <summary>
            Gets result of blast search
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastRequestCompletedEventArgs.RequestIdentifier">
            <summary>
            Gets job identifier
            </summary>
        </member>
        <member name="T:MBF.SequenceRangeParsers">
            <summary>
            SequenceRangeParsers class is an abstraction class which provides instances
            and lists of all Range-Parsers currently supported by MBF.
            </summary>
        </member>
        <member name="F:MBF.SequenceRangeParsers.bed">
            <summary>
            A singleton instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="F:MBF.SequenceRangeParsers.all">
            <summary>
            List of all supported Range-Parsers.
            </summary>
        </member>
        <member name="P:MBF.SequenceRangeParsers.Bed">
            <summary>
            Gets an instance of BedParser class which is capable of
            parsing BED format files.
            </summary>
        </member>
        <member name="P:MBF.SequenceRangeParsers.All">
            <summary>
            Gets the list of all Range-parsers which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.SequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="T:MBF.ISequenceRange">
            <summary>
            A SequenceRange holds the data necessary to represent a region within
            a sequence defined by its start and end index without necessarily holding
            any of the sequence item data. At a minimum and ID, start index, and end
            index are required. Additional metadata can be stored as well using a
            generic key value pair.
            </summary>
        </member>
        <member name="P:MBF.ISequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:MBF.ISequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:MBF.ISequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:MBF.ISequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="P:MBF.ISequenceRange.ParentSeqRanges">
            <summary>
            Gets the sequence ranges from which this sequence range is obtained.
            This property will be filled by the operations like Merge, Intersect etc.
            </summary>
        </member>
        <member name="M:MBF.SequenceRange.#ctor">
            <summary>
            Default constructor that does not set any fields.
            </summary>
        </member>
        <member name="M:MBF.SequenceRange.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Data constructor that sets the most commonly used fields.
            Note that if the end value is less than start value then the end values is assigned to the start value.
            </summary>
            <param name="ID">An ID for the range. This does not need to be unique, and often represents the chromosome of the range.</param>
            <param name="start">A starting index for the range. In the BED format this index starts counting from 0.</param>
            <param name="end">An ending index for the range. In the BED format this index is exclusive.</param>
        </member>
        <member name="M:MBF.SequenceRange.CompareTo(System.Object)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="obj">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="M:MBF.SequenceRange.CompareTo(MBF.ISequenceRange)">
            <summary>
            Compares two sequence ranges.
            </summary>
            <param name="other">SequenceRange instance to compare.</param>
            <returns>
            If the Start values of the two ranges are identical then the
            result of this comparison is the result from calling CompareTo() on
            the two End values. If the Start values are not equal then the result
            of this comparison is the result of calling CompareTo() on the two
            Start values.
            </returns>
        </member>
        <member name="M:MBF.SequenceRange.GetHashCode">
            <summary>
            Overrides hash function for a particular type.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:MBF.SequenceRange.Equals(System.Object)">
            <summary>
            Overrides the equal method
            </summary>
            <param name="obj">Object to be checked</param>
            <returns>Is equals</returns>
        </member>
        <member name="M:MBF.SequenceRange.op_Equality(MBF.SequenceRange,MBF.SequenceRange)">
            <summary>
            Override equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.SequenceRange.op_Inequality(MBF.SequenceRange,MBF.SequenceRange)">
            <summary>
            Override not equal operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.SequenceRange.op_LessThan(MBF.SequenceRange,MBF.SequenceRange)">
            <summary>
            Override less than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="M:MBF.SequenceRange.op_GreaterThan(MBF.SequenceRange,MBF.SequenceRange)">
            <summary>
            Override greater than operator
            </summary>
            <param name="leftHandSideObject">LHS object</param>
            <param name="rightHandSideObject">RHS object</param>
            <returns>Is LHS == RHS</returns>
        </member>
        <member name="P:MBF.SequenceRange.Start">
            <summary>
            The beginning index of the range. This index must be non-negative and
            it will be enforced to always be less than or equal to the End index.
            </summary>
        </member>
        <member name="P:MBF.SequenceRange.End">
            <summary>
            The end index of the range. This index must be non-negative and
            it will be enforced to always be greater than or equal to the Start index.
            </summary>
        </member>
        <member name="P:MBF.SequenceRange.ID">
            <summary>
            A string identifier of the sequence range.
            </summary>
        </member>
        <member name="P:MBF.SequenceRange.Length">
            <summary>
            The length of the range, which can be zero. This result is the
            difference of the End and Start index.
            </summary>
        </member>
        <member name="P:MBF.SequenceRange.Metadata">
            <summary>
            Optional additional data to store along with the ID and indices of
            the range. Metadata must be stored with a string key name.
            </summary>
        </member>
        <member name="P:MBF.SequenceRange.ParentSeqRanges">
            <summary>
            Gets the sequence ranges from which this sequence range is obtained.
            This property will be filled by the operations like Merge, Intersect etc.
            </summary>
        </member>
        <member name="T:MBF.Encoding.Ncbi4NAEncoding">
            <summary>
            A standard encoding for nucleic acids that allows for compression of DNA and RNA
            sequences. This encoding allows for the common ambiguities found when sequencing
            DNA and RNA and also allows for gap characters
            
            The encoding comes from the NCBIA4na standard and is summarized by:
            
            Value - Symbol - Name
            
            0  - - - Gap 
            1  - A - Adenine
            2  - C - Cytosine
            3  - M - A or C
            4  - G - Guanine
            5  - R - G or A
            6  - S - G or C
            7  - V - G or C or A
            8  - T - Thymine/Uracil
            9  - W - A or T
            10 - Y - T or C
            11 - H - A or C or T
            12 - K - G or T
            13 - D - G or A or T
            14 - B - G or T or C
            15 - N - A or G or C or T
            
            Notice that this encoding allows for bitwise comparison on 4 bit numbers
            to determine the makeup of the value. The leftmost bit for instance when
            set to 1 indicates that Thymine/Uracil is a possible value. The rightmost
            bit does the same for Adenine.
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.A">
            <summary>
            Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.C">
            <summary>
            Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.M">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.G">
            <summary>
            Guanine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.R">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.S">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.V">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.T">
            <summary>
            Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.W">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.Y">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.H">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.K">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.D">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.B">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:MBF.Encoding.Ncbi4NAEncoding.N">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.GetComplement(System.Byte)">
            <summary>
            Gets the complement of a given byte value
            </summary>
            <param name="value">Value of which complement has to be found</param>
            <returns>Complemented byte value</returns>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.Encode(System.String)">
            <summary>
            Encodes the source sequence onto a byte array. The array will be the
            size of the source when returned.
            </summary>
            <param name="source">The data to be encoded (eg. "TAGGC")</param>
            <returns>The array into which the encoded values will be placed</returns>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the encoding. This is
            a simple lookup and will only match exactly with items of this encoding. It
            will not compare items from other encodings that match the same nucleotide.
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this encoding into an array
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="M:MBF.Encoding.Ncbi4NAEncoding.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.Instance">
            <summary>
            An instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.Name">
            <summary>
            The name of this encoding is always 'NCBI4na'
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.HasTerminations">
            <summary>
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.HasAmbiguity">
            <summary>
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.HasGaps">
            <summary>
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.Count">
            <summary>
            The number of encoding symbols. For this encoding the result should
            always be 16.
            </summary>
        </member>
        <member name="P:MBF.Encoding.Ncbi4NAEncoding.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.TransferRNA">
            <summary>
            Mature transfer RNA (tRNA), a small RNA molecule (75-85 bases long) that mediates the translation of 
            a nucleic acid sequence into an amino acid sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.TransferRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new TransferRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferRNA.#ctor(System.String)">
            <summary>
            Creates new TransferRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the TransferRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferRNA.#ctor(MBF.IO.GenBank.TransferRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other TransferRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.TransferRNA.Clone">
            <summary>
            Creates a new TransferRNA that is a copy of the current TransferRNA.
            </summary>
            <returns>A new TransferRNA that is a copy of this TransferRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.AntiCodon">
            <summary>
            Location of the anticodon of tRNA and the amino acid for which it codes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.TransferRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.StandardFeatureKeys">
            <summary>
            Static class to hold standard feature keys.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Minus10Signal">
            <summary>
            Holds key for Minus10Signal (-10_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Minus35Signal">
            <summary>
            Holds key for Minus35Signal (-35_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.ThreePrimeUtr">
            <summary>
            Holds key for ThreePrimeUtr (3'UTR) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.FivePrimeUtr">
            <summary>
            Holds key for FivePrimeUtr (5'UTR) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Attenuator">
            <summary>
            Holds key for Attenuator feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.CaaTSignal">
            <summary>
            Holds key for CAATSignal (CAAT_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.CodingSequence">
            <summary>
            Holds key for CodingSequence (CDS) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.DisplacementLoop">
            <summary>
            Holds key for DisplacementLoop (D-loop) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Enhancer">
            <summary>
            Holds key for Enhancer feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Exon">
            <summary>
            Holds key for Exon feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.GCSingal">
            <summary>
            Holds key for GCSingal (GC_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Gene">
            <summary>
            Holds key for Gene feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.InterveningDNA">
            <summary>
            Holds key for InterveningDNA (iDNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Intron">
            <summary>
            Holds key for Intron feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.LongTerminalRepeat">
            <summary>
            Holds key for LongTerminalRepeat (LTR) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MaturePeptide">
            <summary>
            Holds key for MaturePeptide (mat_peptide) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscBinding">
            <summary>
            Holds key for MiscBinding (misc_binding) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscDifference">
            <summary>
            Holds key for MiscDifference (misc_difference) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscFeature">
            <summary>
            Holds key for MiscFeature (misc_feature) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscRecombination">
            <summary>
            Holds key for MiscRecombination (misc_recomb) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscRNA">
            <summary>
            Holds key for MiscRNA (misc_RNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscSignal">
            <summary>
            Holds key for MiscSignal (misc_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MiscStructure">
            <summary>
            Holds key for MiscStructure (misc_structure) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.ModifiedBase">
            <summary>
            Holds key for ModifiedBase (modified_base) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.MessengerRNA">
            <summary>
            Holds key for MessengerRNA (mRNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.NonCodingRNA">
            <summary>
            Holds key for NonCodingRNA (ncRNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.OperonRegion">
            <summary>
            Holds key for Operon feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.PolyASignal">
            <summary>
            Holds key for PolyASignal (polyA_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.PolyASite">
            <summary>
            Holds key for PolyASite (polyA_site) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.PrecursorRNA">
            <summary>
            Holds key for PrecursorRNA (precursor_RNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Promoter">
            <summary>
            Holds key for Promoter feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.ProteinBindingSite">
            <summary>
            Holds key for ProteinBindingSite (protein_bind) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.RibosomeBindingSite">
            <summary>
            Holds key for RibosomeBindingSite (RBS) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.ReplicationOrigin">
            <summary>
            Holds key for ReplicationOrigin (rep_origin) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.RepeatRegion">
            <summary>
            Holds key for RepeatRegion (repeat_region) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.RibosomalRNA">
            <summary>
            Holds key for RibosomalRNA (rRNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.SignalPeptide">
            <summary>
            Holds key for SignalPeptide (sig_peptide) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.StemLoop">
            <summary>
            Holds key for StemLoop (stem_loop) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.TataSignal">
            <summary>
            Holds key for TATASignal (TATA_signal) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Terminator">
            <summary>
            Holds key for Terminator feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.TransferMessengerRNA">
            <summary>
            Holds key for TransferMessengerRNA (tmRNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.TransitPeptide">
            <summary>
            Holds key for TransitPeptide (transit_peptide) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.TransferRNA">
            <summary>
            Holds key for TransferRNA (tRNA) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.UnsureSequenceRegion">
            <summary>
            Holds key for UnsureSequenceRegion (unsure) feature.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.StandardFeatureKeys.Variation">
            <summary>
            Holds key for Variation feature.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.StandardFeatureKeys.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.StandardFeatureKeys.All">
            <summary>
            Returns a list which contains standard feature keys.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.PolyASite">
            <summary>
            Site on an RNA transcript to which will be added adenine residues by post-transcriptional polyadenylation.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASite.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASite feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASite.#ctor(System.String)">
            <summary>
            Creates new PolyASite feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASite.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASite.#ctor(MBF.IO.GenBank.PolyASite)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASite instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASite.Clone">
            <summary>
            Creates a new PolyASite that is a copy of the current PolyASite.
            </summary>
            <returns>A new PolyASite that is a copy of this PolyASite.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASite.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GCSingal">
            <summary>
            GC box; a conserved GC-rich region located upstream of the start point of eukaryotic transcription 
            units which may occur in multiple copies or in either orientation.
            Consensus=GGGCGG.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GCSingal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new GCSingal feature item from the specified location.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GCSingal.#ctor(System.String)">
            <summary>
            Creates new GCSingal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the GCSingal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GCSingal.#ctor(MBF.IO.GenBank.GCSingal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other GCSingal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GCSingal.Clone">
            <summary>
            Creates a new GCSingal that is a copy of the current GCSingal.
            </summary>
            <returns>A new GCSingal that is a copy of this GCSingal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GCSingal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.CaatSignal">
            <summary>
            CAAT box; part of a conserved sequence located about 75 bp up-stream of the start point
            of eukaryotic transcription units which may be involved in RNA polymerase binding.
            Consensus=GG(C or T)CAATCT.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CaatSignal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new CAATSignal feature item from the specified location.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CaatSignal.#ctor(System.String)">
            <summary>
            Creates new CAATSignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CAATSignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CaatSignal.#ctor(MBF.IO.GenBank.CaatSignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CAATSignal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CaatSignal.Clone">
            <summary>
            Creates a new CAATSignal that is a copy of the current CAATSignal.
            </summary>
            <returns>A new CAATSignal that is a copy of this CAATSignal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CaatSignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.Alphabets">
            <summary>
            The currently supported and built-in alphabets for sequence items.
            </summary>
        </member>
        <member name="F:MBF.Alphabets.DNA">
            <summary>
            The DNA alphabet
            </summary>
        </member>
        <member name="F:MBF.Alphabets.RNA">
            <summary>
            The RNA alphabet
            </summary>
        </member>
        <member name="F:MBF.Alphabets.Protein">
            <summary>
            The protein alphabet consisting of amino acids
            </summary>
        </member>
        <member name="F:MBF.Alphabets.all">
            <summary>
            List of all supported Alphabets.
            </summary>
        </member>
        <member name="M:MBF.Alphabets.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.Alphabets.GetHighestChar(MBF.IAlphabet)">
            <summary>
            Returns the highest character value found in the alphabet.  Because alphabets are a fixed size this is useful
            in order to create very fast lookups for high frequency operations.
            </summary>
            <param name="alphabet"></param>
            <returns></returns>
        </member>
        <member name="P:MBF.Alphabets.All">
            <summary>
             Gets the list of all Alphabets which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.Matrix.RowKeysPaddedDouble">
            <summary>
            Be sure to use this is a "Using" to that it gets disposed correctly.
            </summary>
        </member>
        <member name="M:MBF.Matrix.RowKeysPaddedDouble.GetInstanceFromPaddedDouble(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysPaddedDouble from a file in PaddedDouble format.
            The RowKeysPaddedDouble is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="paddedDoubleFileName">The PaddedDouble file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>A RowKeysPaddedDouble object</returns>
        </member>
        <member name="M:MBF.Matrix.RowKeysPaddedDouble.GetInstanceFromRowKeys(System.String,System.Threading.Tasks.ParallelOptions,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Create an instance of RowKeysPaddedDouble from a file in RowKeysPaddedDouble format.
            The RowKeysPaddedDouble is IDisposable and so should be disposed of, for example, with the 'using  statement'.
            </summary>
            <param name="rowKeysFileName">The RowKeysPaddedDouble file</param>
            <param name="parallelOptions">A ParallelOptions instance that configures the multithreaded behavior of this operation.</param>
            <param name="fileAccess">A FileAccess value that specifies the operations that can be performed on the file. Defaults to 'Read'</param>
            <param name="fileShare">A FileShare value specifying the type of access other threads have to the file. Defaults to 'Read'</param>
            <returns>A RowKeysPaddedDouble object</returns>
        </member>
        <member name="T:MBF.Matrix.MatrixExtensions">
            <summary>
            Provides a set of static methods for Matrix objects.
            </summary>
        </member>
        <member name="M:MBF.Matrix.MatrixExtensions.AsDenseMatrix``3(MBF.Matrix.Matrix{``0,``1,``2})">
            <summary>
            Converts matrix to a DenseMatrix. If the inputMatrix is a DenseMatrix, then returns the given matrix without copying. The copy could, therefore,
            be either shallow or deep.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="inputMatrix">The matrix to convert.</param>
            <returns>A DenseMatrix with same rowKeys, colKeys, missing and nonmissing values, and special missing value. If the inputMatrix is a DenseMatrix, then it will be returned unchanged.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixExtensions.ToDenseMatrix``3(MBF.Matrix.Matrix{``0,``1,``2})">
            <summary>
            Converts matrix to a new DenseMatrix. Even if the inputMatrix is a DenseMatrix, a new DenseMatrix is created. The copy is, thus,
            always deep.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="inputMatrix">The matrix to convert.</param>
            <returns>A new DenseMatrix with same rowKeys, colKeys, missing and nonmissing values, and special missing value.</returns>
        </member>
        <member name="M:MBF.Matrix.MatrixExtensions.WriteDense``3(MBF.Matrix.Matrix{``0,``1,``2},System.String)">
            <summary>
            Writes the matrix to a file in dense format. A directory will be created if needed.
            The first line is "var" TAB and then the tab-delimited col keys.
            Next is one line per row key. Each line is the row key TAB and then the tab-limited values.
            Values may include the special Missing value.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="matrix">The matrix to write</param>
            <param name="filename">The filename to write to.</param>
        </member>
        <member name="M:MBF.Matrix.MatrixExtensions.WriteSparse``3(MBF.Matrix.Matrix{``0,``1,``2},System.String)">
            <summary>
            Writes the matrix to a file in sparse format. A directory will be created if needed.
            The first line is "var" TAB "cid" TAB "val"
            Next is one line per nonmissing value. Each line is: rowKey TAB colKey TAB value
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="matrix">The matrix to write</param>
            <param name="filename">The filename to write to.</param>
        </member>
        <member name="M:MBF.Matrix.MatrixExtensions.WriteSparse``3(MBF.Matrix.Matrix{``0,``1,``2},System.IO.TextWriter)">
            <summary>
            Writes the matrix to textWriter in sparse format.
            The first line is "var" TAB "cid" TAB "val"
            Next is one line per nonmissing value. Each line is: rowKey TAB colKey TAB value
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
            <param name="matrix">The matrix to write</param>
            <param name="textWriter">The textWriter to write to.</param>
        </member>
        <member name="T:MBF.Matrix.ConvertValueView`4">
            <summary>
            Creates a view on a matrix in which values converted one-to-one. For example, Suppose you have a matrix with
            char values such as '0', '1', '2' (with '?' for missing) and you need doubles (with double.NaN as missing).
            With this class you can wrap your original matrix, making it act like the matrix you need.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValueView">The type of desired values.</typeparam>
            <typeparam name="TValueParent">The type of the current values.</typeparam>
        </member>
        <member name="P:MBF.Matrix.ConvertValueView`4.ParentMatrix">
            <summary>
            Get the original matrix that this view wraps.
            </summary>
        </member>
        <member name="P:MBF.Matrix.ConvertValueView`4.ParentValueToViewValue">
            <summary>
            A function that converts a value of the wrapped matrix into a value of the wrapping matrix.
            </summary>
        </member>
        <member name="P:MBF.Matrix.ConvertValueView`4.ViewValueToParentValue">
            <summary>
            A function that converts value of the wrapped matrix into a value of the wrapped matrix.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.SAMFormatter">
            <summary>
            Writes a SequenceAlignmentMap to a particular location, usually a file. 
            The output is formatted according to the SAM file format. 
            A method is also provided for quickly accessing the content in string 
            form for applications that do not need to first write to file.
            Documentation for the latest BAM file format can be found at
            http://samtools.sourceforge.net/SAM1.pdf
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFormatter.AlignedSequenceFormat">
            <summary>
            Holds the format string needed for writing aligned sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFormatter.OptionalFieldFormat">
            <summary>
            Holds the format string needed for writing optional fields of aligned sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.WriteHeader(MBF.IO.SAM.SAMAlignmentHeader,System.IO.TextWriter)">
            <summary>
            Writes specified SAMAlignedHeader to specified text writer.
            </summary>
            <param name="header">Header to write.</param>
            <param name="writer">Text writer.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.IO.TextWriter)">
            <summary>
            Writes an ISequenceAlignment to the location specified by the writer.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(MBF.Algorithms.Alignment.ISequenceAlignment,System.String)">
            <summary>
            Writes an ISequenceAlignment to the specified file.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <param name="filename">The name of the file to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.String)">
            <summary>
            Writes an SequenceAlignmentMap to the specified file.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object to format.</param>
            <param name="filename">The name of the file to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(MBF.IO.SAM.SequenceAlignmentMap,System.IO.TextWriter)">
            <summary>
            Writes an sequenceAlignmentMap to the location specified by the writer.
            </summary>
            <param name="sequenceAlignmentMap">SequenceAlignmentMap object to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence alignment text.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.IO.TextWriter)">
            <summary>
            Write a collection of ISequenceAlignments to a writer.
            Note that SAM format supports only one ISequenceAlignment object per file.
            Thus first ISequenceAlignment in the collection will be written to the file.
            </summary>
            <param name="sequenceAlignments">The sequence alignments to write.</param>
            <param name="writer">The TextWriter used to write the formatted sequence alignments.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.Format(System.Collections.Generic.ICollection{MBF.Algorithms.Alignment.ISequenceAlignment},System.String)">
            <summary>
            Write a collection of ISequenceAlignments to a file.
            </summary>
            <param name="sequenceAlignments">The sequenceAlignments to write.</param>
            <param name="filename">The name of the file to write the formatted sequence alignments.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.FormatString(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Converts an ISequenceAlignment to a formatted string.
            </summary>
            <param name="sequenceAlignment">The sequence alignment to format.</param>
            <returns>A string of the formatted text.</returns>
        </member>
        <member name="M:MBF.IO.SAM.SAMFormatter.WriteSAMAlignedSequence(MBF.Algorithms.Alignment.IAlignedSequence,System.IO.TextWriter)">
            <summary>
            Writes SAMAlignedSequence to specified text writer.
            </summary>
            <param name="alignedSequence">SAM aligned sequence to write</param>
            <param name="writer">Text writer.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMFormatter.Name">
            <summary>
            Gets the name of the sequence alignment formatter being
            implemented. This is intended to give the developer some
            information of the formatter type.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMFormatter.Description">
            <summary>
            Gets the description of the sequence alignment formatter being
            implemented. This is intended to give the developer some 
            information of the formatter.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMFormatter.FileTypes">
            <summary>
            Gets the file extensions that the formatter implementation
            will support.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankLocusTokenParser">
            <summary>
            Not all 3rd party programs respect the GenBank locus format.  Due to this we cannot expect each item to lie in exact
            indices with respect to the locus.  In order to parse this information based off of tokens we do have to make certain
            assumptions about the locus data, however this is well documented and for all but the ID field we know what the data type
            will be and what values it may contain.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankLocusTokenParser.Parse(System.String)">
            <summary>
            Parses a locus string into a <see cref="T:MBF.IO.GenBank.GenBankLocusInfo"/>.
            </summary>
            <param name="locusText">Locus text.</param>
            <returns>
            Locus containing the info in the passed in string.
            </returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankLocusTokenParser.GetLocusTokenParsers(MBF.IO.GenBank.GenBankLocusInfo)">
            <summary>
            The LOCUS format has defined positions for each individual value in the LOCUS but through experimentation
            and some reading this format is not followed.  Instead we have to parse each token and interpret which value
            each token belongs too.  Luckily there is a standard set of values for all but the DATE and LOCUS ID, which we can 
            infer based on the string.
            </summary>
            <param name="locus"></param>
            <returns></returns>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants">
            <summary>
            List of text to enumeration mappings to better organize and contain variable information with respect to parsing
            the locus.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceDivisionCodes">
            <summary>
            Maps all sequences division code strings to their respective enumeration.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants.MoleculeTypes">
            <summary>
            Maps each known molecule type string to its enumeration definition.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants.MoleculeTopologies">
            <summary>
            Maps each known topology string to its enumeration definition.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceTypes">
            <summary>
            List of sequence types expected.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.GenBankLocusTokenParser.LocusConstants.SequenceStrandTypes">
            <summary>
            Maps each strand string to its enumeration definition.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMReferenceIndexes">
            <summary>
            Class to hold BAM file index information related to a reference sequence.
            Holds bin and linear index information for a reference sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMReferenceIndexes.#ctor">
            <summary>
            Creats new instance of BAMReferenceIndexes class.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMReferenceIndexes.Bins">
            <summary>
            Gets list of Bin index information.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMReferenceIndexes.LinearOffsets">
            <summary>
            Gets list of Linear file offsets.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.BAMIndex">
            <summary>
            Class to hold BAMIndex information.
            </summary>
        </member>
        <member name="M:MBF.IO.BAM.BAMIndex.#ctor">
            <summary>
            Creates an instance of BAMIndex class.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.BAMIndex.RefIndexes">
            <summary>
            Gets list of reference indices.
            </summary>
        </member>
        <member name="T:MBF.Web.WebAccessor">
            <summary>
            A WebAccessor manages the process of downloading information from a URL.
            </summary>
        </member>
        <member name="M:MBF.Web.WebAccessor.GetBrowserProxy">
            <summary>
            Get and store the default browser proxy in effect
            </summary>
        </member>
        <member name="M:MBF.Web.WebAccessor.GetDefaultProxy">
            <summary>
            Restore the default proxy
            </summary>
        </member>
        <member name="M:MBF.Web.WebAccessor.SubmitHttpRequest(System.Uri,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Submit a parameterized HTTP request by either GET or POST. The 
            caller can ask for the response either as a string or as a stream.
            </summary>
            <remarks>
            If getResponse = false, the responseStream can be used by the caller
            to read the response. The caller must call Close() when done with the stream.
            If getResponse = true, the stream will be null, and Close() should not be called.
            </remarks>
            <param name="url">The URL to request</param>
            <param name="doPost">POST if true, GET if false.</param>
            <param name="requestParameters">A set of parameter/value pairs, in unencoded form.</param>
            <returns>Response from Web.</returns>
        </member>
        <member name="M:MBF.Web.WebAccessor.Close">
            <summary>
            Close the internal HttpWebResponse, after reading from the stream returned by
            SubmitHttpRequest with getResponse = false.
            </summary>
        </member>
        <member name="M:MBF.Web.WebAccessor.BeginAsyncRequest(MBF.Web.AsyncWebMethodRequest)">
            <summary>
            This method instantiates and invokes asynchronous web call.
            Create the web request object and do a Async call
            1.	If post data is required register EndAsyncRequest as callback.
            2.	Otherwise register EndAsyncResponse as callback method.
            </summary>
            <param name="input">Input parameters</param>
        </member>
        <member name="M:MBF.Web.WebAccessor.EndAsyncRequest(System.IAsyncResult)">
            <summary>
            Do asynchronous web post.
            Register EndAsyncResponse and callback method.
            </summary>
            <param name="state">Async Web method state</param>
        </member>
        <member name="M:MBF.Web.WebAccessor.EndAsyncResponse(System.IAsyncResult)">
            <summary>
            Read asynchronous web response.
            Invoke the callback method to report completion.
            </summary>
            <param name="state">Async Web method state</param>
        </member>
        <member name="M:MBF.Web.WebAccessor.BuildQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Build the query string using the request parameters
            </summary>
            <param name="requestParameters">Request parameters</param>
            <returns>Query string.</returns>
        </member>
        <member name="M:MBF.Web.WebAccessor.CreatePostRequest(System.Uri,System.Net.ICredentials,System.Int32)">
            <summary>
            Create the Post request object
            </summary>
            <param name="url">Request url</param>
            <param name="credentials">Authentication credentials</param>
            <param name="postDataLength">Post data length</param>
            <returns>WebRequest object</returns>
        </member>
        <member name="M:MBF.Web.WebAccessor.CreateGetRequest(System.Uri,System.String,System.Net.ICredentials)">
            <summary>
            Create the Get request object
            </summary>
            <param name="url">Request Url</param>
            <param name="queryString">Query string</param>
            <param name="credentials">Authentication credentials</param>
            <returns>WebRequest object</returns>
        </member>
        <member name="P:MBF.Web.WebAccessor.Proxy">
            <summary>
            Gets or sets WebProxy object that will be used for HTTP requests.
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.BlastSearchRecord">
            <summary>
            A single result from a sequence search, such as any of the various flavors of BLAST.
            This is referred to as an Iteration in the BLAST XML schema; some flavors (such as
            PSI-BLAST) can combine multiple interations into one XML document.
            </summary>
        </member>
        <member name="F:MBF.Web.Blast.BlastSearchRecord._hits">
            <summary>
            Lists of hits associated with this iteration
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastSearchRecord.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.BlastSearchRecord.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.BlastSearchRecord.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.Hits">
            <summary>
            The set of hits associated with this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.IterationNumber">
            <summary>
            The index for this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.IterationQueryId">
            <summary>
            The ID of the query which generated this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.IterationQueryDefinition">
            <summary>
            The definition of the query which generated this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.IterationQueryLength">
            <summary>
            The length of the query which generated this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.IterationMessage">
            <summary>
            A human-readable message associated with this iteration
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.BlastSearchRecord.Statistics">
            <summary>
            The statistics returned for this iteration
            </summary>
        </member>
        <member name="T:MBF.Web.ClustalW.ClustalWCompletedEventArgs">
            <summary>
            Event arguments used to notify the user when the job is completed.
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._isSearchSuccessful">
            <summary>
            Is the search successful
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._searchResult">
            <summary>
            Result of blast search
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._errorMessage">
            <summary>
            Error message on failure
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._error">
            <summary>
            Exception occured
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._parameters">
            <summary>
            ClustalW Service parameters object
            </summary>
        </member>
        <member name="F:MBF.Web.ClustalW.ClustalWCompletedEventArgs._canceled">
            <summary>
            Is this request cancelled.
            </summary>
        </member>
        <member name="M:MBF.Web.ClustalW.ClustalWCompletedEventArgs.#ctor(MBF.Web.ClustalW.ServiceParameters,System.Boolean,MBF.Web.ClustalW.ClustalWResult,System.Exception,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ClustalWCompletedEventArgs class
            </summary>
            <param name="parameters">Service parameter</param>
            <param name="isSearchSuccessful">Is search successful</param>
            <param name="searchResult">Search result records</param>
            <param name="error">Exception if any</param>
            <param name="errorMessage">Error message if any</param>
            <param name="canceled">Was request cancelled</param>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.IsSearchSuccessful">
            <summary>
            Gets a value indicating whether the search  is successful
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.SearchResult">
            <summary>
            Gets result of blast search
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.ErrorMessage">
            <summary>
            Gets the error message on failure
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.Error">
            <summary>
            Gets the Exception occured
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the search  is cancelled.
            </summary>
        </member>
        <member name="P:MBF.Web.ClustalW.ClustalWCompletedEventArgs.Parameters">
            <summary>
            Gets the ClustalW Service parameters
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankParser">
            <summary>
            A GenBankParser reads from a source of text that is formatted according to the GenBank flat
            file specification, and converts the data to in-memory ISequence objects.  For advanced
            users, the ability to select an encoding for the internal memory representation is
            provided. There is also a default encoding for each alphabet that may be encountered.
            Documentation for the latest GenBank file format can be found at
            ftp.ncbi.nih.gov/genbank/gbrel.txt
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankParser.#ctor">
            <summary>
            Default constructor chooses default encoding based on alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Constructor for setting the encoding.
            </summary>
            <param name="encoding">The encoding to use for parsed ISequence objects.</param>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single GenBank text from a reader into a sequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting sequence should be in readonly mode or not.
            If this flag is set to true then the resulting sequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new Sequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankParser.ParseLocusByTokens(MBF.IO.MBFTextReader,MBF.Sequence@)">
            <summary>
            Parses the GenBank LOCUS using a token based approach which provides more flexibility for 
            GenBank documents that do not follow the standard 100%.
            </summary>
            <param name="mbfReader"></param>
            <param name="sequence"></param>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankParser.LocationBuilder">
            <summary>
            Location builder is used to build location objects from the location string 
            present in the features.
            By default an instance of LocationBuilder class is used to build location objects.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankParser.Name">
            <summary>
            Gets the type of Parser i.e GenBank.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankParser.Description">
            <summary>
            Gets the description of GenBank parser.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            GenBankParser class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a GenBank file.
            </summary>
        </member>
        <member name="T:MBF.DnaAlphabet">
            <summary>
            The basic alphabet that describes symbols used in DNA sequences.
            This alphabet allows not only for the four base nucleotide symbols,
            but also for various ambiguities, termination, and gap symbols.
            <para>
            The character representations come from the NCBI4na standard and
            are used in many sequence file formats. The NCBI4na standard is the
            same as the IUPACna standard with only the addition of the gap
            character.
            </para>
            <para>
            The entries in this dictionary are:
            Symbol - Name
            A - Adenine
            C - Cytosine
            M - A or C
            G - Guanine
            R - G or A
            S - G or C
            V - G or V or A
            T - Thymine
            W - A or T
            Y - T or C
            H - A or C or T
            K - G or T
            D - G or A or T
            B - G or T or C
            - - Gap
            N - A or G or T or C
            </para>
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.A">
            <summary>
            Nucleotide Adenine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.C">
            <summary>
            Nucleotide Cytosine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.G">
            <summary>
            Nucleotide Guanine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.T">
            <summary>
            Nucleotide Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.AC">
            <summary>
            Adenine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GA">
            <summary>
            Guanine or Adenine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GC">
            <summary>
            Guanine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.AT">
            <summary>
            Adenine or Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.TC">
            <summary>
            Thymine or Cytosine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GT">
            <summary>
            Gaunine or Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GCA">
            <summary>
            Gaunine, Cytosine, or Adenine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.ACT">
            <summary>
            Adenine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GAT">
            <summary>
            Gaunine, Adenine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.GTC">
            <summary>
            Gaunine, Thymine, or Cytosine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.Any">
            <summary>
            Adenine, Guanine, Cytosine, or Thymine
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.Gap">
            <summary>
            A gap character
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.instance">
            <summary>
            Static instance of this class.
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.name">
            <summary>
            Friendly name for Alphabet type.
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.values">
            <summary>
            Stores the list of Nucleotides for DNA
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.gapItems">
            <summary>
            Stores the set of character that represent 'gap' in DNA
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.basicToAmbiguousSymbolMap">
            <summary>
            Mapping from set of characters to corresponding ambiguous character
            </summary>
        </member>
        <member name="F:MBF.DnaAlphabet.ambiguousToBasicSymbolMap">
            <summary>
            Mapping from ambiguous character to set of characters they represent
            </summary>
        </member>
        <member name="M:MBF.DnaAlphabet.#cctor">
            <summary>
            Initializes static members of the DnaAlphabet class
            Set up the static instance
            </summary>
        </member>
        <member name="M:MBF.DnaAlphabet.#ctor">
            <summary>
            Prevents a default instance of the DnaAlphabet class from being created.
            Populates nucleotide values, and ambiguous maps.
            </summary>
        </member>
        <member name="M:MBF.DnaAlphabet.LookupBySymbol(System.Char)">
            <summary>
            Retrieves the nucleotide associated with a particular charcter symbol. See the comment for
            the class description to view the encoding table.
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.LookupBySymbol(System.String)">
            <summary>
            Retrieves the nucleotide associated with a particular string symbol.
            This method will throw an exception for a string with more than one
            character in it. See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="symbol">Symbol as a string</param>
            <returns>ISequenceItem for nucleotide corresponding to input symbol</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.LookupByValue(System.Byte)">
            <summary>
            Retrieves the nucleotide associated with a particular byte value.
            See the comment for the class description to view the
            encoding table.
            </summary>
            <param name="value">Byte value of the symbol</param>
            <returns>ISequenceItem for nucleotide corresponding to input value</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.GetConsensusSymbol(System.Collections.Generic.HashSet{MBF.ISequenceItem})">
            <summary>
            Find the consensus nucleotide for a set of nucleotides
            </summary>
            <param name="symbols">Set of sequence items</param>
            <returns>Consensus nucleotide</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.GetBasicSymbols(MBF.ISequenceItem)">
            <summary>
            Find the set of symbols that is represented by input symbol
            </summary>
            <param name="symbol">Symbol to look up</param>
            <returns>Set of symbols</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.LookupAll(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of all of the stored items filtered by the specified parameters
            </summary>
            <param name="includeBasics">Include the basic items of the alphabet (G, A, T, and C)</param>
            <param name="includeGaps">Include the gap item (-)</param>
            <param name="includeAmbiguities">Include the ambiguity items (GA, GAT, GC, etc.)</param>
            <param name="includeTerminations">Has no effect in this alphabet</param>
            <returns>List of all stored items matching parameters</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.Add(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.DnaAlphabet.Clear">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
        </member>
        <member name="M:MBF.DnaAlphabet.Contains(MBF.ISequenceItem)">
            <summary>
            Indication of whether or not an ISequenceItem is in the alphabet. This is
            a simple lookup and will only match exactly with items of this alphabet. It
            will not compare items from other alphabets that match the same nucleotide.
            </summary>
            <param name="item">Item whose presence is to be checked</param>
            <returns>True if this contains input item</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the nucleotides in this alphabet into an array
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Start index in array for copying</param>
        </member>
        <member name="M:MBF.DnaAlphabet.Remove(MBF.ISequenceItem)">
            <summary>
            This is a read only collection and thus this method will throw an exception
            </summary>
            <param name="item">Item to be removed</param>
            <returns>Value indicating whether value was removed</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator of ISequenceItem over alphabet values</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an IEnumerator of the nucleotides
            </summary>
            <returns>Enumerator over alphabet values</returns>
        </member>
        <member name="M:MBF.DnaAlphabet.PopulateMaps">
            <summary>
            Populates basic Set to ambiguous symbol (and vice versa) maps
            Sets gap symbols
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.Instance">
            <summary>
            Gets an instance of the DNA alphabet for nucleic acids. Since the
            data does not change, use this static member instead of constructing
            a new one.
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.Name">
            <summary>
            Gets the name of this alphabet - this is always 'DNA'
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.HasTerminations">
            <summary>
            Gets a value indicating whether this alphabet has termination characters.
            This alphabet does not have termination characters.
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.HasAmbiguity">
            <summary>
            Gets a value indicating whether this alphabet has ambiguous characters.
            This alphabet does have ambiguous characters.
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.HasGaps">
            <summary>
            Gets a value indicating whether this alphabet has a gap character.
            This alphabet does have a gap character.
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.DefaultGap">
            <summary>
            Gets the nucleotide that denotes default gap character in DNA
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.Count">
            <summary>
            Gets the number of alphabet symbols. 
            For this alphabet the result should always be 16.
            </summary>
        </member>
        <member name="P:MBF.DnaAlphabet.IsReadOnly">
            <summary>
            Gets a value indicating whether the alphabet is read only.
            Always returns true.
            </summary>
        </member>
        <member name="T:MBF.IO.Fasta.FastaFormatter">
            <summary>
            Writes an ISequence to a particular location, usually a file. The output is formatted
            according to the FASTA file format. A method is also provided for quickly accessing
            the content in string form for applications that do not need to first write to file.
            </summary>
        </member>
        <member name="M:MBF.IO.Fasta.FastaFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.Fasta.FastaFormatter.Format(MBF.ISequence,System.IO.TextWriter)">
            <summary>
            Writes an ISequence to a FASTA file in the location specified by the writer.
            </summary>
            <param name="sequence">The sequence to format.</param>
            <param name="writer">The TextWriter used to write the formatted sequence text.</param>
        </member>
        <member name="P:MBF.IO.Fasta.FastaFormatter.Name">
            <summary>
            Gets the type of Formatter i.e FASTA.
            This is intended to give developers some information 
            of the formatter class.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaFormatter.Description">
            <summary>
            Gets the description of Fasta formatter.
            This is intended to give developers some information 
            of the formatter class. This property returns a simple description of what the
            FastaFormatter class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.Fasta.FastaFormatter.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a FASTA file.
            </summary>
        </member>
        <member name="T:MBF.Registration.RegistrableAttribute">
            <summary>
            Self registerable mechanism's attribute
            </summary>
        </member>
        <member name="M:MBF.Registration.RegistrableAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="isRegistrable">Registrable or not</param>
        </member>
        <member name="P:MBF.Registration.RegistrableAttribute.IsRegistrable">
            <summary>
            If its registrable or not
            </summary>
        </member>
        <member name="T:MBF.IO.XsvSnpReader">
            <summary>
            This is used to read SNP items from a text reader available as 
            character separated values in a line. There is one SNP item per line and 
            each line has four character separated fields whose column numbers are identified: 
            a chromosome number, the Position, and 
            the two allele values that are valid for that SNP. 
            There may be assitional columns too, but their values are ignored.
            
            Classes that extend from this can override the protected properties and virtual methods 
            to perform Snp file format specific transformations before returning the field values.
            
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.IsChromosomeSorted">
            <summary>
            If true, the chromosome numbers are assumed to be sorted when 
            SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.IsChromosomePositionSorted">
            <summary>
            If true, the chromosome numbers AND chromosome positions within them 
            are assumed to be sorted when SkipToChromosome* methods are called.
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.currentSnpItem">
            <summary>
            The SNP item that has been parsed for the current line
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.isFirstLine">
            <summary>
            True if the current line contains the first line read from the reader
            </summary>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.#ctor(System.IO.TextReader,System.Char[],System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SNP reader from the given text reader that has character 
            separated values for Snpitems.
            </summary>
            
            <param name="reader">Source text reader for the SNP lines</param>
            <param name="separators">Valid character separators between fields in the line 
            e.g. '\t', ',', etc.</param>
            <param name="ignoreWhiteSpace">If true, trims the white space around a field value</param>
            <param name="hasHeader">If true, treats the field values of the first line in 
            the text reader as a header with the names of the fields.</param>
            <param name="chromosomeColumn">The zero-based column number in a line that 
            corresponds to the chromosome field</param>
            <param name="positionColumn">The zero-based column number in a line that 
            corresponds to the Snp position field</param>
            <param name="alleleOneColumn">The zero-based column number in a line that 
            corresponds to the first allele</param>
            <param name="alleleTwoColumn">The zero-based column number in a line that 
            corresponds to the second allele</param>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.MoveNext">
            <summary>
            Go to the next line in the text reader, unless it is the first line in which case, 
            it has already been called by MBFTextReader in the constructor and we do not move
            the TextReader.
            </summary>
            <returns>True if we have a valid SnpItem in the next line moved to</returns>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.Reset">
            <summary>
            This method is not implemented for XsvSnpReader. Use BufferedSnpReader() instead.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always since this method is not supported by this class
            </exception>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.SkipToChromosome(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number (i.e. Current.Chromosome == chromosomeNumber), 
             or beyond the end of the enumerator if none exist. 
             This is useful when traversing sorted SNP sequences and we need to 
             jump to a specific chromosome number.
             The enumerator should be positioned at or after the first item and at or before the last item.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             
             <returns>True if the cursor was moved to a SnpItem with the given chromosome number. 
             False if no subsequent SnpItems exist with given chromosome number.
             If returning true, the Current item will have given chromosome number.
             </returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.SkipToChromosomePosition(System.Int32,System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the given 
             chromosome number and position 
             (i.e. Current.Chromosome == chromosomeNumber and Current.Position == position), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome number+position.
             </summary>
             
             <param name="chromosomeNumber">The chromosome number for the Snpitem to move to.</param>
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if a SnpItem with given chromosome number and position is found.
             If end of file is reached before this they are found, it returns false. 
             If returning true, the Current item will have given chromosome number and position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.SkipToChromosomePosition(System.Int32)">
             <summary>
             This moves the cursor to the current/next SNP item containing the current chromosome number
             and position equal to the given position
             (i.e. Current.Position == position and Current.Chromosome does not change), 
             or beyond the end of the enumerator if none exist.
             The enumerator should be positioned at or after the first item and at 
             or before the last item.
             NOTE: This is useful when traversing sorted SNP sequences and need to jump to a 
             specific chromosome position within current chromosome position.
             </summary>
             
             <param name="position">The position within chromosome number for the Snpitem to move to.</param>
             
             <returns>Returns true if this position is found. 
             False if the next chromosome number is encountered, or end of file is 
             reached before the position is found. If returning true, the Current item 
             will contain the starting chromosome number and given position.</returns>
             
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.GetFieldValue(MBF.IO.XsvSnpReader.FieldNames)">
            <summary>
            Returns the field value as a string for the given field name.
            </summary>
            <param name="column">field name enumerator to get the string value for</param>
            <returns>Returns the field value as a string for the given field enum.</returns>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.GetColumnNumber(MBF.IO.XsvSnpReader.FieldNames)">
            <summary>
            Returns the column number for the given field name
            </summary>
            <param name="column">Snp field enumerator to get the column number for</param>
            <returns>Returns the column number for the given Snp field enum.</returns>
        </member>
        <member name="M:MBF.IO.XsvSnpReader.MakeSnpForCurrentLine">
            <summary>
            Makes a SNP item for the current line in the XSV reader.
            Since the XSV reader reads ahead, this is actually the next 
            SNP item for the enumerator.
            </summary>
            <returns>Creates a SnpItem for the current line in the XsvReader</returns>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.ChromosomeColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the chromosome field
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.PositionColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the Snp position field
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.AlleleOneColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the first allele field for the SNP
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.AlleleTwoColumn">
            <summary>
            the zero-based column number in a line which 
            corresponds to the second allele field for the SNP
            </summary>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.Current">
            <summary>
             Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>The element in the collection at the current position of the enumerator.</returns>
            
             <exception cref="T:System.InvalidOperationException">The enumerator is 
             positioned before the first element of the collection or after the last element. 
             </exception>
        </member>
        <member name="P:MBF.IO.XsvSnpReader.System#Collections#IEnumerator#Current">
            <summary>
             Gets the current element in the collection.
            </summary>
            
            <returns>The current element in the collection.</returns>
            
            <exception cref="T:System.InvalidOperationException">The enumerator is 
             positioned before the first element of the collection or after the last element. 
             </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:MBF.IO.XsvSnpReader.FieldNames">
            <summary>
            Field name enums for SNP fields in the file
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.FieldNames.Chromosome">
            <summary>
            The chromosome number field
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.FieldNames.Position">
            <summary>
            The position within chromosome number field
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.FieldNames.AlleleOne">
            <summary>
            The symbol for allele one field
            </summary>
        </member>
        <member name="F:MBF.IO.XsvSnpReader.FieldNames.AlleleTwo">
            <summary>
            The symbol for allele two field
            </summary>
        </member>
        <member name="T:MBF.IO.SequenceFormatters">
            <summary>
            SequenceFormatter class is an abstraction class which provides instances
            and lists of all Formatter currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceFormatters.genBank">
            <summary>
            A singleton instance of GenBankFormatter class which is capable of
            saving a ISequence according to the GenBank file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceFormatters.fasta">
            <summary>
            A singleton instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceFormatters.fastq">
            <summary>
            A singleton instance of FastQFormatter class which is capable of
            saving a IQualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceFormatters.gff">
            <summary>
            A singleton instance of GffFormatter class which is capable of
            saving a ISequence according to the GFF file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceFormatters.all">
            <summary>
            List of all supported sequence formatters.
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceFormatters.FindFormatterByFile(System.String)">
            <summary>
            Returns formatter which supports the specified file.
            </summary>
            <param name="fileName">File name for which the formatter is required.</param>
            <returns>If found returns the formatter as ISequenceFormatter else returns null.</returns>
        </member>
        <member name="M:MBF.IO.SequenceFormatters.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.IO.SequenceFormatters.GetSequenceFormatters(System.Boolean)">
            <summary>
            Gets all registered formatters in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered formatters</returns>
        </member>
        <member name="P:MBF.IO.SequenceFormatters.GenBank">
            <summary>
            Gets an instance of GenBankFormatter class which is capable of
            saving a ISequence according to the GenBank file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceFormatters.Fasta">
            <summary>
            Gets an instance of FastaFormatter class which is capable of
            saving a ISequence according to the FASTA file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceFormatters.FastQ">
            <summary>
            Gets an instance of FastQFormatter class which is capable of
            saving a IQualitativeSequence according to the FASTQ file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceFormatters.Gff">
            <summary>
            Gets an instance of GffFormatter class which is capable of
            saving a ISequence according to the GFF file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceFormatters.All">
            <summary>
            Gets the list of all formatters which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceStrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandTopology.None">
            <summary>
            None - StrandTopology is unspecified.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandTopology.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandTopology.Circular">
            <summary>
            Circular.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Intron">
            <summary>
            A segment of DNA that is transcribed, but removed from within the transcript by splicing together the sequences
            (exons) on either side of it.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Intron.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Intron feature item from the specified location.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Intron.#ctor(System.String)">
            <summary>
            Creates new Intron feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Intron.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Intron.#ctor(MBF.IO.GenBank.Intron)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Intron instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Intron.Clone">
            <summary>
            Creates a new Intron that is a copy of the current Intron.
            </summary>
            <returns>A new Intron that is a copy of this Intron.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Intron.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.FastQ.FastQParser">
            <summary>
            A FastQParser reads from a source of text that is formatted according to the FASTQ 
            file specification and converts the data to in-memory IQualitativeSequence objects.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._blockSize">
            <summary>
            The block size.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._maxNumberOfBlocks">
            <summary>
            The maximum number of blocks per sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._fileName">
            <summary>
            The name of the file being parsed.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._isDataVirtualizationEnforced">
            <summary>
            Indicates whether data virtualization has been explictly enabled.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._sequencePointers">
            <summary>
            A list of sequence pointers.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._mbfStreamReader">
            <summary>
            A stream reader to use data virtualization on biological sequence files.
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._enforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization
            </summary>
        </member>
        <member name="F:MBF.IO.FastQ.FastQParser._commonSequenceParser">
            <summary>
            Behavior common to all sequence parsers.
            </summary>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.#ctor">
            <summary>
            The default constructor which chooses the default encoding based on the alphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            A constructor to set the encoding used.
            </summary>
            <param name="encoding">The encoding to use for the parsed IQualitativeSequence objects.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#Parse(System.String)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed ISequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#ParseOne(System.String)">
            <summary>
            Parses a single biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.MBF#IO#ISequenceParser#ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in read-only mode or not.
            If this flag is set to true then the resulting QualitativeSequence's IsReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed ISequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Parse(System.String)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Parse(System.String,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(System.IO.TextReader)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(System.IO.TextReader,System.Boolean)">
            <summary>
            Parses a single biological sequence data from a reader.
            </summary>
            <param name="reader">A reader for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(System.String)">
            <summary>
            Parses a single biological sequence data from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(System.String,System.Boolean)">
            <summary>
            Parses a single biological sequence from a file.
            </summary>
            <param name="filename">The name of a biological sequence file.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in read-only mode or not.
            If this flag is set to true then the resulting QualitativeSequence's IsReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The parsed IQualitativeSequence object.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseRange(System.Int32,System.Int32,MBF.IO.SequencePointer)">
            <summary>
            Parses a range of symbols starting from the specified index in the sequence.
            </summary>
            <param name="startIndex">The zero-based index at which to begin parsing.</param>
            <param name="count">The number of symbols to parse.</param>
            <param name="seqPointer">The sequence pointer of that sequence.</param>
            <returns>The parsed symbols as ASCII values.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.GetQualityScores(System.Int64)">
            <summary>
            Gets the quality scores of a particular sequence.
            </summary>
            <param name="qualScoresStartingIndex">
            The starting index of the quality 
            scores within the source file.
            </param>
            <returns>The quality scores.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.GetSequenceID(MBF.IO.SequencePointer)">
            <summary>
            Get sequence ID corresponding to a given sequence pointer
            </summary>
            <param name="pointer">Sequence pointer</param>
            <returns>Sequence ID</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseQualSeqs(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a MBFTextReader.
            </summary>
            <param name="mbfReader">MBFTextReader instance for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Parse(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a list of biological sequence data from a MBFTextReader.
            </summary>
            <param name="mbfReader">MBFTextReader instance for a biological sequence data.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequences should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequences's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOneWithSpecificFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOneWithSpecificFormat(MBF.IO.MBFStreamReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOneWithFastQFormat(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOneWithFastQFormat(MBF.IO.MBFStreamReader,System.Boolean)">
            <summary>
            Parses a single FASTQ text from a reader into a QualitativeSequence.
            </summary>
            <param name="mbfReader">A reader for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>A new QualitativeSequence instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.IdentifyFastQFormatType(System.Byte[])">
            <summary>
            Identifies Alphabet for the sepecified quality scores.
            This method returns,
             Illumina - if the quality scores are in the range of 64 to 104
             Solexa   - if the quality scores are in the range of 59 to 104
             Sanger   - if the quality scores are in the range of 33 to 126.
            </summary>
            <param name="qualScores">Quality scores.</param>
            <returns>Returns appropriate FastQFormatType for the specified quality scores.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(MBF.IO.MBFTextReader,System.Boolean)">
            <summary>
            Parses a single FastQ text from a MBFTextReader.
            </summary>
            <param name="mbfReader">MBFTextReader instance for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseOne(MBF.IO.MBFStreamReader,System.Boolean)">
            <summary>
            Parses a single FastQ text from a MBFStreamReader.
            </summary>
            <param name="mbfReader">MBFStreamReader instance for a biological sequence text.</param>
            <param name="isReadOnly">
            Flag to indicate whether the resulting QualitativeSequence should be in readonly mode or not.
            If this flag is set to true then the resulting QualitativeSequence's isReadOnly property 
            will be set to true, otherwise it will be set to false.
            </param>
            <returns>The list of parsed IQualitativeSequence objects.</returns>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.VerifyForDV(System.String)">
            <summary>
            Validates if DV is reaquired or not if required then sets the required fields.
            </summary>
            <param name="filename">Filename to verify.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.ParseWithDV(System.Boolean)">
            <summary>
            Parses file with DV and returns Virtual Qualitative Sequences list.
            </summary>
            <param name="isReadOnly">Flag to indicate whether the sequences returned should be set to readonly or not.</param>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Dispose">
            <summary>
            If the TextReader was opened by this object, dispose it.
            </summary>
        </member>
        <member name="M:MBF.IO.FastQ.FastQParser.Dispose(System.Boolean)">
            <summary>
            Disposes of all resources held by this object.
            </summary>
            <param name="disposing">If disposing equals true, dispose all resources</param>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.Alphabet">
            <summary>
            The alphabet to use for parsed ISequence objects.  If this is not set, an alphabet will
            be determined based on the file being parsed.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.Encoding">
            <summary>
            The encoding to use for parsed ISequence objects.  If this is not set, the default
            for the given alphabet will be used.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.FastqType">
            <summary>
            The FastQFormatType to be used for parsed IQualitativeSequence objects.
            Set AutoDetectFastQFormat property to false, otherwise the FastQ parser
            will ignore this property and try to identify the FastQFormatType for 
            each sequence data it parses.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.Name">
            <summary>
            Gets the name of the parser, in this case, FastQ.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.Description">
            <summary>
            Gets a description of the FastQ parser.
            This is intended to give developers information about the parser
            class. This property returns a simple description of what the
            FastQParser class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.FileTypes">
            <summary>
            Gets a string of comma-separated values of the
            possible file extensions for a FASTQ file.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.AutoDetectFastQFormat">
            <summary>
            If this flag is true then FastQParser will ignore the Type property 
            and try to identify the FastQFormatType for each sequence data it parses.
            By default this property is set to true.
            
            If this flag is false then FastQParser will parse the sequence data 
            according to the FastQFormatType specified in Type property.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.IsDataVirtualizationEnabled">
            <summary>
            Indicates whether data virtualization is enabled or not.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.EnforceDataVirtualizationByFileSize">
            <summary>
            File size in KBs to enable data virtualization. If the file size is
            larger, then data virtualization is loaded automatically.
            </summary>
        </member>
        <member name="P:MBF.IO.FastQ.FastQParser.EnforceDataVirtualization">
            <summary>
            Enforces data virtualization on the parser.
            </summary>
        </member>
        <member name="T:MBF.Complementation">
            <summary>
            Provides DNA and RNA nucleotide complements.
            </summary>
            <remarks>
            Nucleotide complements are bases that bond with, and correspond to one
            another. For the DNA case, the correspondence is generally at a common
            location on the two strands of a DNA double helix. For RNA, the single
            strand can overlap and bond with itself in various ways to create
            secondary structure, and complementation will determine where this can happen.
            Static methods in the class provide lookup for single nucleotide
            complements, as well as creating the complementary strand for a given
            DNA sequence.
            </remarks>
        </member>
        <member name="M:MBF.Complementation.GetDnaComplement(MBF.Nucleotide)">
            <summary>
            Returns the complement of a DNA nucleotide. This also
            respects ambiguous characters in the DNA alphabet.
            </summary>
        </member>
        <member name="M:MBF.Complementation.GetRnaComplement(MBF.Nucleotide)">
            <summary>
            Returns the complement of an RNA nucleotide. This also
            respects ambiguous characters in the RNA alphabet.
            </summary>
        </member>
        <member name="M:MBF.Complementation.Complement(MBF.ISequence)">
             <summary>
             Transcribes a DNA sequence into the corresponding sequence on
             the other strand (which will have the opposite orientation). The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             </summary>
             <remarks>
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence otherStrand = Complementarity.Complement(dna);
            
             otherStrand.ToString() would produce "ATGGCG"
             </remarks>
             <param name="dnaSource">The input sequence.</param>
             <returns>A new complementary sequence.</returns>
        </member>
        <member name="M:MBF.Complementation.ReverseComplement(MBF.ISequence)">
             <summary>
             Transcribes a DNA sequence into the corresponding sequence on
             the other strand, then reverses it so that the new sequence has
             the same orientation as the original (in the 3'-to-5' sense). The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence otherStrand = Complementarity.ReverseComplement(dna);
            
             otherStrand.ToString() would produce "GCGGTA"
             </summary>
             <param name="dnaSource">The input sequence.</param>
             <returns>A new complementary sequence.</returns>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge">
            <summary>
            Implements IEdge interface for PersistentMWaySuffixTree. Represents an edge in suffix tree which exposes all the properties required by IEdge and pointers to child edges.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.IPersistentEdge">
            <summary>
            This interface extends IEdge and defines the contract that has to be implemented by and 
            class implementing persistent suffix edge of suffix tree.
            Targetting string (instead of stream) serialization as persistent storage can be anything.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IPersistentEdge.GetChildren">
            <summary>
            Gets pointers to all the child edges
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IPersistentEdge.Serialize">
            <summary>
            Serialize the given object to string format.
            </summary>
            <returns>Serialized data</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.IPersistentEdge.Deserialize(System.String)">
            <summary>
            Deserialize given data into persistent suffix tree edge
            </summary>
            <param name="data">Serialized data</param>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.IPersistentEdge.Key">
            <summary>
            Gets or sets the unique key representing the edge in persistent storage
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.SERIALIZE_FORMAT">
            <summary>
            Serialization format
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge._children">
            <summary>
            Pointers to all the child edges
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Index of First Character
                Index of Last Character
                Start node of edge
            </summary>
            <param name="startIndex">Index of the First Character</param>
            <param name="endIndex">Index of the Last Character</param>
            <param name="childrenCount">Number of allowed child edges</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
            </summary>
            <param name="childrenCount">Number of allowed child edges</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Edge class
            </summary>
            <param name="data">Deserialize given data into persistent suffix tree edge</param>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.PROPERTY_SEPERATOR">
            <summary>
            Property seperator
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.DATA_SEPERATOR">
            <summary>
            Data seperator
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.CHILDREN_SEPERATOR">
            <summary>
            Children seperator
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.Serialize">
            <summary>
            Serialize the given object to string format.
            Build a semicolon (;) seperator string in following format
            Key:{N}StartIndex:{N};EndIndex:{N};IsLeaf:{T/F};Children:{N},{N},...;
            </summary>
            <returns>Serialized data</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.Deserialize(System.String)">
            <summary>
            Deserialize given data into persistent suffix tree edge
            </summary>
            <param name="data">Serialized data</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.GetChildren">
            <summary>
            Gets pointers to all the child edges
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.AddChild(System.Int64)">
            <summary>
            Add an edge to children array
            </summary>
            <param name="key">Key of edge to be added</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.ReplaceChildren(System.Int64[])">
            <summary>
            Replace the current set of children with given set of children
            </summary>
            <param name="children">new set of children</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.ClearChildren">
            <summary>
            Clear the children list of current edge
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.Key">
            <summary>
            Gets or sets the unique key representing the edge in persistent storage
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.EndIndex">
            <summary>
            Gets or sets index of last character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.IsLeaf">
            <summary>
            Gets or sets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.PersistentMultiWaySuffixEdge.StartIndex">
            <summary>
            Gets or sets index of first character.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmerIndexerDictionary">
            <summary>
            Wrapper for dictionary that maps kmer strings 
            to list of sequence index and positions of occurance. 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Kmer.KmerIndexerDictionary._kmerIndexer">
            <summary>
            Maps kmer to list of KmerIndexer.
            Each KmerIndexer point to places of occurance of kmer.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerIndexerDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the 
            kmer and corresponding list of positions
            </summary>
            <returns>Enumerator over kmers</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerIndexerDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether kmer dictionary contains specified key.
            </summary>
            <param name="key">The key to locate</param>
            <returns>Boolean indicating if key exists</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerIndexerDictionary.TryGetValue(System.String,System.Collections.Generic.IList{MBF.Algorithms.Kmer.KmerIndexer}@)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key">The key of the value to get</param>
            <param name="value">Contains value associated with 
            the specified key, if key is found</param>
            <returns>Boolean indicating if key was found</returns>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerIndexerDictionary.Add(System.String,System.Collections.Generic.IList{MBF.Algorithms.Kmer.KmerIndexer})">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add</param>
            <param name="value">The value of the element to add</param>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerIndexerDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key
            </summary>
            <param name="key">The key of the value to get or set</param>
            <returns>The value associated with the specified key</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IGraphScaffoldBuilder">
            <summary>
            Generates Scaffolds using Graph.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IGraphScaffoldBuilder.BuildScaffold(System.Collections.Generic.IList{MBF.ISequence},System.Collections.Generic.IList{MBF.ISequence},System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds scaffolds from list of reads and contigs
            </summary>
            <param name="reads">List of reads</param>
            <param name="contigs">List of contigs</param>
            <param name="kmerLength">Kmer Length</param>
            <param name="depth">Depth for graph traversal</param>
            <param name="redundancy">Number of mate pairs required to create a link between two contigs.
             Hierarchical Scaffolding With Bambus
             by: Mihai Pop, Daniel S. Kosack, Steven L. Salzberg
             Genome Research, Vol. 14, No. 1. (January 2004), pp. 149-159.</param>
            <returns>List of scaffold sequences</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembler">
            <summary>
            Representation of any sequence assembly algorithm.
            This interface defines contract for classes implementing 
            De Bruijn graph based De Novo Sequence assembler.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembler.KmerLength">
            <summary>
            Gets or sets the kmer length
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.IDeBruijnDeNovoAssembler.Graph">
            <summary>
            Gets the assembler de-bruijn graph
            </summary>
        </member>
        <member name="T:MBF.StringListValidator">
            <summary>
            A validator for string values that has a specific list of allowed values.
            </summary>
        </member>
        <member name="M:MBF.StringListValidator.#ctor(System.String[])">
            <summary>
            Constructor that initializes the value list. IgnoreCase defaults to false.
            </summary>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:MBF.StringListValidator.#ctor(System.Boolean,System.String[])">
            <summary>
            Constructor that allows case sensitivity to be specified.
            </summary>
            <param name="ignoreCase">true means case will be ignored when validating.</param>
            <param name="values">An array of valid value strings.</param>
        </member>
        <member name="M:MBF.StringListValidator.AddValidValues(System.String[])">
            <summary>
            Add one or more strings to the list of valid values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MBF.StringListValidator.IsValid(System.Object)">
            <summary>
            Given a string value as an object, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="M:MBF.StringListValidator.IsValid(System.String)">
            <summary>
            Given a string value, return true if the value is in the list.
            </summary>
            <param name="parameterValue">The value.</param>
            <returns>True if the value is valid.</returns>
        </member>
        <member name="P:MBF.StringListValidator.ValidValues">
            <summary>
            The list of allowed values.
            </summary>
        </member>
        <member name="P:MBF.StringListValidator.IgnoreCase">
            <summary>
            If IgnoreCase is false (the default), a string will only be considered
            valid if it matches one of the stored values exactly, including case.
            Otherwise, any case (including mixed) is accepted.
            </summary>
        </member>
        <member name="T:MBF.Web.ConfigParameters">
            <summary>
            Client configuration parameters for accessing a web service.
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.Connection">
            <summary>
            URI for the web interface
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.UserAgent">
            <summary>
            Useragent string for authentication to the web-interface 
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.DefaultTimeout">
            <summary>
            Default timeout value
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.EmailAddress">
            <summary>
            User's Email address for connecting to the web-interface 
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.UseAsyncMode">
            <summary>
            Use Sync / Async calls
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.UseHttps">
            <summary>
            Use HTTP/HTTPS 
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.UseBrowserProxy">
            <summary>
            Use default browser proxy settings for web access
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.RetryCount">
            <summary>
            Number of times to requery a service when request is pending
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.RetryInterval">
            <summary>
            Number of seconds between requeries when waiting for a service request
            </summary>
        </member>
        <member name="P:MBF.Web.ConfigParameters.Password">
            <summary>
            Password string for authentication to the web service
            </summary>
        </member>
        <member name="T:MBF.Web.Blast.ParameterValidationResult">
            <summary>
            A data structure returned from validation of a set of parameters, allowing
            the caller to either diagnose validation errors, or proceed with a service call.
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.ParameterValidationResult.IsValid">
            <summary>
            True means that the parameters are valid for the service of interest.
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.ParameterValidationResult.ParametersObject">
            <summary>
            If a service requires a parameters object of a certain class, the validation
            routine can populate and set this object for the caller's use (on success).
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.ParameterValidationResult.ValidationErrors">
            <summary>
            A human-readable summary of errors found during an unsuccessful validation.
            </summary>
        </member>
        <member name="T:MBF.Util.AccessFlags">
            <summary>
            Access flags that define what is allowed in a RestrictedAccessDictionary. The can be combined with bit-wise OR.
            </summary>
        </member>
        <member name="F:MBF.Util.AccessFlags.Add">
            <summary>
            Allow elements to be added.
            </summary>
        </member>
        <member name="F:MBF.Util.AccessFlags.Remove">
            <summary>
            Allow elements to be removed.
            </summary>
        </member>
        <member name="F:MBF.Util.AccessFlags.ChangeElements">
            <summary>
            Allow elements to be changed.
            </summary>
        </member>
        <member name="T:MBF.Util.RestrictedAccessDictionary`2">
            <summary>
            A thin wrapper around Dictionary that allows access permissions to be set. Any changes not allowed result in an exception.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="M:MBF.Util.RestrictedAccessDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create read-only dictionary by wraping a dictionary.
            </summary>
            <param name="baseDictionary">The dictionary to wrap</param>
        </member>
        <member name="M:MBF.Util.RestrictedAccessDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},MBF.Util.AccessFlags)">
            <summary>
            Create a restricted access dictionary by wraping a dictionary.
            </summary>
            <param name="baseDictionary">The dictionary to wrap</param>
            <param name="accessFlags">The flags that define how to restrict the dictionary.</param>
        </member>
        <member name="M:MBF.Util.RestrictedAccessDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove an item from a restricted dictionary if that is allowd. It is not, raise an exception.
            </summary>
            <param name="item">The item to remove</param>
            <returns>true if the item was in the dictionary; otherwise, false</returns>
        </member>
        <member name="M:MBF.Util.RestrictedAccessDictionary`2.GetEnumerator">
            <summary>
            Enumerate the KeyValuePairs of the dictionary
            </summary>
            <returns>A sequence of KeyValue pairs</returns>
        </member>
        <member name="P:MBF.Util.RestrictedAccessDictionary`2.AddIsAllowed">
            <summary>
            True if and only if this dictionary allows elements to be added.
            </summary>
        </member>
        <member name="P:MBF.Util.RestrictedAccessDictionary`2.RemoveIsAllowed">
            <summary>
            True if and only if this dictionary allows elments to be removed.
            </summary>
        </member>
        <member name="P:MBF.Util.RestrictedAccessDictionary`2.ChangeElementsIsAllowed">
            <summary>
            True if and only if this dictionary allows elements to change
            </summary>
        </member>
        <member name="T:MBF.Util.Helper">
            <summary>
            Generally useful static methods.
            </summary>
            <remarks>
            The util class contains utility methods used throughout the MBF library. These
            are general rather than biological in nature. In another language, they might be implemented
            as global functions. They are generally stateless, so they should be public and static.
            </remarks>
        </member>
        <member name="F:MBF.Util.Helper.GenBankMetadataKey">
            <summary>
            Key to get GenBankMetadata object from Metadata of a sequence which is parsed from GenBankParser.
            </summary>
        </member>
        <member name="F:MBF.Util.Helper.SAMAlignmentHeaderKey">
            <summary>
            Key to get SAMAlignmentHeader object from Metadata of a sequence alignment which is parsed from SAMParser.
            </summary>
        </member>
        <member name="F:MBF.Util.Helper.SAMAlignedSequenceHeaderKey">
            <summary>
            Key to get SAMAlignedSequenceHeader object from Metadata of a aligned sequence which is parsed from SAMParser.
            </summary>
        </member>
        <member name="M:MBF.Util.Helper.Dequote(System.String)">
            <summary>
            Remove both single and double quotation mark delimiters from a string.
            </summary>
            <remarks>
            This does not ignore escaped quotes.
            </remarks>
            <param name="str">The input string.</param>
            <returns>The string minus delimiting quotes.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringMultiply(System.String,System.Int32)">
            <summary>
            String Multiply. Build a string by concatenating copies of the input string.
            </summary>
            <param name="str">The string to multiply.</param>
            <param name="count">The number of copies wanted.</param>
            <returns>The multiplied string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringMatches(System.String,System.Int32,System.String,System.Int32@)">
            <summary>
            see if string test, starting at startPos, matches string match, up to 
            the length of match. if so, set pos to the position just after the match.
            safely returns false if test is too short to match.
            </summary>
            <param name="test">The string to test.</param>
            <param name="startPos">Where to start testing.</param>
            <param name="match">The match string to test for.</param>
            <param name="pos">on success, the position just after the match.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringMatches(System.String,System.Int32,System.String)">
            <summary>
            Overload that doesn't return the position as an out parameter.
            </summary>
            <param name="test">The string to test.</param>
            <param name="startPos">Where to start testing.</param>
            <param name="match">The match string to test for.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringMatches(System.String,System.String)">
            <summary>
            Overload that starts at position 0.
            </summary>
            <param name="test">The string to test.</param>
            <param name="match">The match string to test for.</param>
            <returns>true if the strings match.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringHasMatch(System.String,System.String[])">
            <summary>
            See if test string is identical to any of the passed list of strings.
            </summary>
            <param name="test">The string to test.</param>
            <param name="args">Variable number of strings to test against.</param>
            <returns>True if test matches one of the subsequent arguments.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringContains(System.String,System.String[])">
            <summary>
            see if test string contains any of the passed list of strings.
            </summary>
            <param name="test">The string to test.</param>
            <param name="args">Variable number of strings to test against.</param>
            <returns>true if test contains one of the subsequent arguments.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StringRemoveWhitespace(System.String)">
            <summary>
            Remove all whitespace from the provided string
            </summary>
            <param name="input">The string to modify</param>
            <returns>A copy of 'input' with all whitespace characters removed</returns>
        </member>
        <member name="M:MBF.Util.Helper.CharIn(System.Char,System.Char[])">
            <summary>
            Character version of StrIn; see if passed char matches one of the later arguments.
            </summary>
            <param name="test">The char to test.</param>
            <param name="args">Variable list of chars to test against.</param>
            <returns>True if test equals one of the subsequent arguments.</returns>
        </member>
        <member name="M:MBF.Util.Helper.CountChar(System.String,System.Char)">
            <summary>
            Count up the occurrences of char ch in string str.
            </summary>
            <param name="str">string being examined.</param>
            <param name="ch">character to look for and count.</param>
            <returns>number of occurrences of ch in str.</returns>
        </member>
        <member name="M:MBF.Util.Helper.CountChars(System.String,System.Char[])">
            <summary>
            Count up occurrences, in the string str, of any of the subsequent char arguments.
            </summary>
            <param name="str">string being examined.</param>
            <param name="args">Variable list of chars to look for and count.</param>
            <returns>number of occurrences.</returns>
        </member>
        <member name="M:MBF.Util.Helper.ContainsOnly(System.String,System.Char[])">
            <summary>
            Test whether a string consists entirely of a specified set of characters.
            </summary>
            <param name="str">The string to test.</param>
            <param name="args">Variable list of chars comprising the set.</param>
            <returns>true if str contains only characters in the set.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsDigits(System.String)">
            <summary>
            Test a string to see if it's made up only of digits (like regex \d+, but faster).
            </summary>
            <param name="str">The test string.</param>
            <returns>true if the string contains only digits.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsSAM(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for SAM formats.
            </summary>
            <returns>
            true  : if it is a valid SAM file extension.
            false : if it is a in-valid SAM file extension.
            </returns>
        </member>
        <member name="M:MBF.Util.Helper.IsBAM(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for BAM formats.
            </summary>
            <returns>
            true  : if it is a valid BAM file extension.
            false : if it is a in-valid BAM file extension.
            </returns>
        </member>
        <member name="M:MBF.Util.Helper.IsGenBank(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for GenBank formats.
            </summary>
            <returns>
            true  : if it is a valid fasta file extension.
            false : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:MBF.Util.Helper.IsFastQ(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FastQ formats.
            </summary>
            <returns>
            true  : if it is a valid fastq file extension.
            false : if it is a in-valid fastq file extension.
            </returns>
        </member>
        <member name="M:MBF.Util.Helper.IsFasta(System.String)">
            <summary>
            Identifies if a file extension is a
            valid extension for FASTA formats.
            </summary>
            <returns>
            true  : if it is a valid fasta file extension.
            false : if it is a in-valid fasta file extension.
            </returns>
        </member>
        <member name="M:MBF.Util.Helper.GetNormalRandom(System.Double,System.Double)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <returns>A random value</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetNormalRandom(System.Double,System.Double,System.Int32)">
            <summary>
            Returns random numbers according to an approximate normal distribution
            with an average and standard deviation set by the caller. This is done iteratively
            using the central limit theorem.
            </summary>
            <param name="average">Average result returned from calling the method</param>
            <param name="standardDeviation">Standard deviation applied to the normal curve</param>
            <param name="steps">
            The number of iterative steps to take in generating each number. The higher this number
            is, the closer to a true normal distribution the results will be, but the higher the
            computation cost. A value between 4 and 8 should be sufficient for most uses.
            </param>
            <returns>A random value</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidSequence(MBF.IAlphabet,System.String,System.Char@)">
            <summary>
            Returns true if all the characters in the specified string belongs to the 
            specified alphabet, else returns false.
            </summary>
            <param name="alphabet">Alphabet against which the characters in the specified sequence data has to be validated.</param>
            <param name="sequence">Sequence data to be validated.</param>
            <param name="invalidCharacter">First character found to be invalid.</param>
            <returns>Returns true if all character are valid, else returns false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetSequenceItems(MBF.IAlphabet,System.String)">
            <summary>
            Returns the sequence items for the specified string.
            If any character in the string is unknown by the specified alphabet
            an exception will occur.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA, Alphabets.RNA or Alphabets.Protein)
            </param>
            <param name="sequence">A description of the sequence data.</param>
            <returns>Returns list of sequence items.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetStrandType(System.String)">
            <summary>
            Returns a SequenceStrandType corresponds to the specified string.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns SequenceStrandType.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetStrandType(MBF.IO.GenBank.SequenceStrandType)">
            <summary>
            Returns a string which represents specified SequenceStrandType.
            </summary>
            <param name="strand">Strand type.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetStrandTopology(System.String)">
            <summary>
            Returns a SequenceStrandTopology corresponds to the specified string.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns SequenceStrandTopology.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetStrandTopology(MBF.IO.GenBank.SequenceStrandTopology)">
            <summary>
            Returns a string which represents specified SequenceStrandTopology.
            </summary>
            <param name="strandTopology">Strand topology.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetCrossReferenceLink(MBF.IO.GenBank.CrossReferenceLink)">
            <summary>
            Returns a string which represents specified CrossReferenceLink.
            </summary>
            <param name="crossReferenceLink">CrossReferenceLink.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetGenBankAccession(MBF.IO.GenBank.GenBankAccession)">
            <summary>
            Returns a string which represents specified GenBankAccession.
            </summary>
            <param name="accession">GenBankAccession instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetProjectIdentifier(MBF.IO.GenBank.ProjectIdentifier)">
            <summary>
            Returns a string which represents specified ProjectIdentifier.
            </summary>
            <param name="projectIdentifier">ProjectIdentifier instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetSequenceSegment(MBF.IO.GenBank.SequenceSegment)">
            <summary>
            Returns a string which represents specified SequenceSegment.
            </summary>
            <param name="segment">SequenceSegment instance.</param>
            <returns>Returns string.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StartCheckFromDna(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns Dna alphabet if all the symbols in distinctSymbols are 
            known by Dna alphabet else it continue to verify with Rna alpabet by 
            calling StartCheckFromRna method.
            </summary>
            <param name="distinctSymbols">Distinct symbols of sequence</param>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StartCheckFromRna(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns Rna alphabet if all the symbols in distinctSymbols are 
            known by Rna alphabet else it continue to verify with Protein alpabet by 
            calling StartCheckFromProtein method.
            </summary>
            <param name="distinctSymbols">Distinct symbols of sequence</param>
            <returns>If success then returns an instance of IAlphabet else returns null.</returns>
        </member>
        <member name="M:MBF.Util.Helper.StartCheckFromProtein(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns Protein alphabet if all the symbols in distinctSymbols are 
            known by protein alphabet else returns null.
            </summary>
            <param name="distinctSymbols">Distinct symbols of sequence</param>
            <returns>If all symbols in distinctSymbols are known by protein alphabet 
            then returns protein Alphabet else returns null.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsDnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Dna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsRnaAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Rna.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsProteinAlphabet(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Returns true if all symbols in the specified list are known by Protein.
            </summary>
            <param name="characters">List of symbols.</param>
            <returns>True if all symbols are known else returns false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidRegexValue(System.String,System.String)">
            <summary>
            Validates specified value with the specified regular expression. 
            </summary>
            <param name="pattern">Regular expression.</param>
            <param name="value">Value to validate.</param>
            <returns>Returns true if value completely match with the specified 
            regular expression; otherwise false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidRegexValue(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Validates specified value with the specified regular expression. 
            </summary>
            <param name="regx">Regular expression object.</param>
            <param name="value">Value to validate.</param>
            <returns>Returns true if value completely match with the specified 
            regular expression; otherwise false.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidPatternValue(System.String,System.String,System.String)">
            <summary>
            Validates specified value with the specified regular expression pattern.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="pattern">Regular exression pattern.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidPatternValue(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Validates specified value with the specified regular expression.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="regx">Regular exression object.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:MBF.Util.Helper.IsValidRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates int value.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="value">Value to validate.</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <returns>Returns empty string if valid; otherwise error message.</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetReverseComplement(System.String,System.Char[])">
            <summary>
            Get reverse complement of sequence string.
            Handles only unambiguous DNA sequence strings.
            Note: This method is a light-weight implementation of sequence.ReverseComplement.
            This only works for unambiguous DNA sequences, which is characteristic of the input for de-novo.
            </summary>
            <param name="sequence">Sequence string</param>
            <param name="reverseComplementBuilder">String builder for building reverse complement</param>
            <returns>Reverse Complement sequence string</returns>
        </member>
        <member name="M:MBF.Util.Helper.GetLittleEndianByteArray(System.Int16)">
            <summary>
            Gets a byte array which represents value of 16 bit singed integer in LittleEndian format.
            </summary>
            <param name="value">16 bit singed integer value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetLittleEndianByteArray(System.UInt16)">
            <summary>
            Gets a byte array which represents value of 16 bit unsinged integer in LittleEndian format.
            </summary>
            <param name="value">16 bit unsinged integer value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetLittleEndianByteArray(System.Int32)">
            <summary>
            Gets a byte array which represents value of 32 bit singed integer in LittleEndian format.
            </summary>
            <param name="value">32 bit singed integer value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetLittleEndianByteArray(System.UInt32)">
            <summary>
            Gets a byte array which represents value of 32 bit unsinged integer in LittleEndian format.
            </summary>
            <param name="value">32 bit unsinged integer value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetLittleEndianByteArray(System.Single)">
            <summary>
            Gets byte array which represents value of float in LittleEndian format.
            </summary>
            <param name="value">Float value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetValue(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the integer value from the bytes stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
            <param name="count">number of bytes to be considered to create integer value.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetInt16(System.Byte[],System.Int32)">
            <summary>
            Returns 16 bit signed integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns 16 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetInt32(System.Byte[],System.Int32)">
            <summary>
            Returns 32 bit signed integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns 32 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns 64 bit unsigned integer from the byte array stored as little-endian.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetSingle(System.Byte[],System.Int32)">
            <summary>
            Returns float from the byte array.
            </summary>
            <param name="byteArray">byte array.</param>
            <param name="startIndex">Start index of the byte array.</param>
        </member>
        <member name="M:MBF.Util.Helper.GetHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the HexString from the specified byte array.
            </summary>
            <param name="byteArray">Byte array.</param>
            <param name="startIndex">Start index of array from which HexString is stored.</param>
            <param name="length">Length of HexString to read.</param>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition(System.Boolean)">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <param name="condition">The condition to check</param>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition(System.Boolean,System.String)">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="message">A message for the exception</param>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition(System.Boolean,System.String,System.Object[])">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageToFormat">A message for the exception</param>
            <param name="formatValues">Values for the exception's message.</param>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition(System.Boolean,System.Func{System.String})">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            messageFunction will only be evaluated of condition is false. Use this version for messages that are costly to compute.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageFunction">Function that will generate the message if the condition is false.</param>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition``1(System.Boolean)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <param name="condition">The condition to check</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition``1(System.Boolean,System.String)">
            <summary>
            Confirms that a condition is true. Raise an exception of type T if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="message">A message for the exception</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            Warning: The message with be evaluated even if the condition is true, so don't make it's calculation slow.
                      Avoid this with the "messageFunction" version.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageToFormat">A message for the exception</param>
            <param name="formatValues">Values for the exception's message.</param>
            <typeparam name="T">The type of exception that will be raised.</typeparam>
        </member>
        <member name="M:MBF.Util.Helper.CheckCondition``1(System.Boolean,System.Func{System.String})">
            <summary>
            Confirms that a condition is true. Raise an exception if it is not.
            </summary>
            <remarks>
            messageFunction will only be evaluated of condition is false. Use this version for messages that are costly to compute.
            </remarks>
            <param name="condition">The condition to check</param>
            <param name="messageFunction">Function that will generate the message if the condition is false.</param>
        </member>
        <member name="M:MBF.Util.Helper.CreateTabString(System.Object[])">
            <summary>
            Creates a tab-delimited string containing the object's string values.
            </summary>
            <param name="objectCollection">The objects to put in the string</param>
            <returns>A tab-delimited string</returns>
        </member>
        <member name="M:MBF.Util.Helper.CreateDelimitedString(System.String,System.Object[])">
            <summary>
            Creates a delimited string containing the object's string values.
            </summary>
            <param name="delimiter">The string that will delimit the objects</param>
            <param name="objectCollection">The objects to put in the string</param>
            <returns>A delimiter-delimited string</returns>
        </member>
        <member name="M:MBF.Util.Helper.FirstAndOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first item in sequence that is one item long. (Raises an
            exception of the sequence is more than one item long).
            </summary>
            <typeparam name="T">The type of elements of the sequence</typeparam>
            <param name="sequence">The one-item long sequence</param>
            <returns>The first item in the sequence.</returns>
        </member>
        <member name="M:MBF.Util.Helper.KeysEqual``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Efficently (log n) test if two dictionaries have the same key set.
            </summary>
            <typeparam name="TKey">The key type of the dictionaries</typeparam>
            <typeparam name="TValue1">The value type of dictionary 1</typeparam>
            <typeparam name="TValue2">The value type of dictionary 2</typeparam>
            <param name="dictionary1">The first dictionary</param>
            <param name="dictionary2">The second dictonary</param>
            <returns>True if the two key sets are "set equal"; false, otherwise.</returns>
        </member>
        <member name="M:MBF.Util.Helper.WrapAroundLeftShift(System.Int32,System.Int32)">
            <summary>
            Shifts the bits of an int around in a wrapped way. It is useful for creating hashcodes of collections.
            </summary>
            <param name="someInt">the int to shift</param>
            <param name="count">The number of bits to shift the int</param>
            <returns>The shifted int.</returns>
        </member>
        <member name="T:MBF.SequenceStatistics">
            <summary>
            SequenceStatistics is used to keep track of the number of occurrances of each symbol within
            a sequence.
            </summary>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(MBF.IAlphabet)">
            <summary>
            Constructs sequence statistics with alphabet and 0 counts.
            </summary>
            <param name="alphabet">The alphabet for the sequence.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(MBF.IAlphabet,System.Int32[])">
            <summary>
            Constructs sequence statistics from the alphabet and symbol counts for a sequence.
            </summary>
            <param name="alphabet">The alphabet for the sequence.</param>
            <param name="symbolCounts">An array of length 256 containing the counts of each symbol
            indexed by that symbol's char representation.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(MBF.ISequence)">
            <summary>
            Constructs sequence statistics by iterating through a sequence.
            </summary>
            <param name="sequence">The sequence to construct statistics for.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Constructs sequence statistics by iterating through a list of sequences.
            </summary>
            <param name="sequences">The list of sequences to construct statistics for.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(MBF.SequenceStatistics)">
            <summary>
            Copy constructor.
            </summary>
            <param name="that">The sequence statistics to copy from.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.GetCount(System.Char)">
            <summary>
            Gets the number of occurences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The number of occurences of the given symbol.</returns>
        </member>
        <member name="M:MBF.SequenceStatistics.GetCount(MBF.ISequenceItem)">
            <summary>
            Gets the number of occurences of the specific sequence item.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetCount('G') + GetCount('C') + GetCount('S')
            </summary>
            <param name="item">A sequence item.</param>
            <returns>The number of occurences of the given sequence item.</returns>
        </member>
        <member name="M:MBF.SequenceStatistics.GetFraction(System.Char)">
            <summary>
            Gets the fraction of occurences of a specific symbol.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="symbol">The char representation of a symbol.</param>
            <returns>The fraction of occurences of the given symbol.</returns>
        </member>
        <member name="M:MBF.SequenceStatistics.GetFraction(MBF.ISequenceItem)">
            <summary>
            Gets the fraction of occurences of a specific sequence item.  This method does not perform
            any calculations to group counts of ambiguous symbols with corresponding unambiguous
            symbols.  So the minimum G-C content of a DNA sequence would be calculated as
            
                GetFraction('G') + GetFraction('C') + GetFraction('S')
            </summary>
            <param name="item">A sequence item.</param>
            <returns>The fraction of occurences of the given sequence item.</returns>
        </member>
        <member name="M:MBF.SequenceStatistics.Add(System.String)">
            <summary>
            Adds the counts of the symbols in the given string to the existing counts.
            </summary>
            <param name="sequence">The symbols to add.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.Add(System.Char)">
            <summary>
            Increments the count of the given symbol.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.Add(MBF.ISequenceItem)">
            <summary>
            Increments the count of the given item.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.Remove(MBF.ISequenceItem)">
            <summary>
            Decrements the count of the given item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.Clear">
            <summary>
            Removes all counts from the SequenceStatistics.
            </summary>
        </member>
        <member name="M:MBF.SequenceStatistics.Clone">
            <summary>
            Creates a new SequenceStatistics that is a copy of the current SequenceStatistics.
            </summary>
            <returns>A new SequenceStatistics that is a copy of this.</returns>
        </member>
        <member name="M:MBF.SequenceStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.SequenceStatistics.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceStatistics.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.SequenceStatistics.Complement">
            <summary>
            The SequenceStatistics for the complement of the sequence that this was created from.
            </summary>
        </member>
        <member name="T:MBF.Sequence">
             <summary>
             This is the standard implementation of the ISequence interface. It contains
             the raw data that defines the contents of a sequence. You can access that
             data in two ways. The first is by treating the Sequence as a list of
             SequenceItems. For example:
             
             Sequence mySequence = new Sequence(Alphabets.DNA, "GATTC");
             foreach (Nucleotide nucleotide in mySequence) { ... }
             
             You can also retrieve the data and work with it as a string. For example:
             
             String nucleotides = mySequence.ToString();
             
             In both cases the results will be based on the Alphabet associated with the
             sequence. Common alphabets include those for DNA, RNA, and Amino Acids.
             
             For users who wish to get at the underlying data directly, Sequence provides
             a means to do this as well. This may be useful for those writing algorithms
             against the sequence where performance is especially important. For these
             advanced users access is provided to the encoding classes associated with the
             sequence.
            
             This class is marked with Serializable attribute thus instances of this 
             class can be serialized and stored to files and the stored files 
             can be de-serialized to restore the instances.
             
             This class also used by Data Virtualization on editable and non-editable scenario 
             </summary>
        </member>
        <member name="F:MBF.Sequence._valueArray">
            <summary>
            Byte array of encode values
            </summary>
        </member>
        <member name="F:MBF.Sequence._valueList">
            <summary>
            List of bytes for editing the sequence
            </summary>
        </member>
        <member name="F:MBF.Sequence._isReadOnly">
            <summary>
            Is sequence read only or not
            </summary>
        </member>
        <member name="F:MBF.Sequence._encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="F:MBF.Sequence._seqInfo">
            <summary>
            Basic sequence info
            </summary>
        </member>
        <member name="F:MBF.Sequence._areStatisticsValid">
            <summary>
            Statistics valid or not
            </summary>
        </member>
        <member name="F:MBF.Sequence._useEncoding">
            <summary>
            Use encoding (compressed sequence representation)
            </summary>
        </member>
        <member name="F:MBF.Sequence._statistics">
            <summary>
            Sequence statistics
            </summary>
        </member>
        <member name="F:MBF.Sequence._mapToAlphabet">
            <summary>
            Holds Mapping from Encoding to Alphabet.
            </summary>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,MBF.IVirtualSequenceProvider)">
            <summary>
            Constructor to create a new sequence from the specified 
            alphabet and virtual sequence provider.
            </summary>
            <param name="alphabet">Alphabet instance.</param>
            <param name="virtualData">Virtual sequence provider.</param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.Sequence)">
            <summary>
            Constructor for clone method.
            </summary>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,MBF.Encoding.IEncoding,MBF.Sequence)">
            <summary>
            Constructor to create a new sequence from the specified sequence 
            alphabet and encoding.
            </summary>
            <param name="alphabet">Alphabet for the new sequence.</param>
            <param name="encoding">Encoding for the new sequence.</param>
            <param name="sequence">Sequence instance.</param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet)">
            <summary>
            Creates a sequence with no sequence data and sets IsReadOnly property 
            of the created sequence to false.
            
            For working with sequences that never have sequence data, but are
            only used for metadata storage (like keeping an ID or various features
            but no direct sequence data) consider using the VirtualSequence
            class instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,System.String)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            Sequence mySequence = new Sequence(Alphabets.DNA, someSequenceData);
            
            The Corollary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            Sequence mySequence = new Sequence(Alphabets.RNA, someSequenceData);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,System.String,System.Boolean)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            Sequence mySequence = new Sequence(Alphabets.DNA, someSequenceData);
            
            The correlary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            Sequence mySequence = new Sequence(Alphabets.RNA, someSequenceData);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="useEncoding">
            Indicates whether encoding is used to store the sequence in memory
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,MBF.Encoding.IEncoding,System.String)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,MBF.Encoding.IEncoding,System.String,System.Boolean)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter. The characters in the sequence parameter must be contained
            in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            
            The standard SequenceEncoder for the given encoding is used.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="useEncoding">
            Indicates whether encoding is used to store the sequence in memory
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,System.String,MBF.SequenceStatistics,System.Boolean)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter, when sequence statistics have already been calculated for
            the sequence data. The characters in the sequence parameter must be
            contained in the alphabet or an Exception will occur.
            
            A typical use of this constructor for a DNA sequence would look like:
            
            string someSequenceData = "GATTCAAGGGCT";
            SequenceStatistics someStatistics = ...
            Sequence mySequence = new Sequence(Alphabets.DNA, someSequenceData, someStatistics);
            
            The Corollary for RNA:
            
            string someSequenceData = "GAUUCAAGGGCU";
            SequenceStatistics someStatistics = ...
            Sequence mySequence = new Sequence(Alphabets.RNA, someSequenceData, someStatistics);
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="statistics">
            The statistics for the given sequence data, or null if no statistics have been
            calculated.
            </param>
            <param name="useEncoding">
            Indicates whether encoding is used to store the sequence in memory
            </param>
        </member>
        <member name="M:MBF.Sequence.#ctor(MBF.IAlphabet,MBF.Encoding.IEncoding,System.String,MBF.SequenceStatistics,System.Boolean)">
            <summary>
            Creates a sequence based on sequence data passed in via a string
            parameter, when sequence statistics have already been calculated for
            the sequence data. The characters in the sequence parameter must be
            contained in the alphabet or an Exception will occur.
            
            This constructor also allows the setting of a particular encoding and
            is designed for programmers familiar with the encoding techniques used
            for storing sequence data in memory. Users not familiar with these
            encodings should consider using the Sequence(IAlphabet, string) constructor
            instead.
            </summary>
            <param name="alphabet">
            The alphabet the sequence uses (eg. Alphabets.DNA or Alphabets.RNA)
            </param>
            <param name="sequence">
            A description of the sequence where each character in the string is
            known by the alphabet.
            </param>
            <param name="encoding">
            The encoding to use when converting the sequence data into in memory
            byte represenation. This encoding must have an EncodingMap registered
            for it and the alphabet via EncodingMaps.GetMapToEncoding().
            </param>
            <param name="statistics">
            The statistics for the given sequence data, or null if no statistics have been
            calculated.
            </param>
            <param name="useEncoding">
            Indicates whether encoding is used to store the sequence in memory
            </param>
        </member>
        <member name="M:MBF.Sequence.Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new Sequence that is a copy of this Sequence.</returns>
        </member>
        <member name="M:MBF.Sequence.Insert(System.Int32,MBF.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.InsertRange(System.Int32,System.String)">
            <summary>
            Encodes sequence parameter and places the values obtained at the
            indicated position within the current sequence data. Insert also works on
            Data Virtualization enabled and non-Data Virtualization scenario 
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The sequence to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.Insert(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.RemoveAt(System.Int32)">
            <summary>
            Removes the sequence data item at the indicated position. Remove also works on
            Data Virtualization enabled and non-Data Virtualization scenario 
            </summary>
            <param name="index">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
        </member>
        <member name="M:MBF.Sequence.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the sequence data at the indicated position for an indicated
            number of characters.
            </summary>
            <param name="position">
            The position within the data to remove the data item. Note that this
            position starts its counting from 0. Thus to remove the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="length">The number of characters to remove.</param>
        </member>
        <member name="M:MBF.Sequence.Replace(System.Int32,MBF.ISequenceItem)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.Replace(System.Int32,System.Char)">
            <summary>
            Encodes the sequence item and places it at the indicated position
            within the current sequence data, replacing the item currently
            located at that position.
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="character">The symbol of the item to be encoded and placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.ReplaceRange(System.Int32,System.String)">
            <summary>
            Encodes the sequence and places it at the indicated position
            within the current sequence data, replacing the items currently
            located within that range. The number of items replaced will
            match the length of the sequence passed in. Replace also works on
            Data Virtualization enabled and non-Data Virtualization scenario 
            </summary>
            <param name="position">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to replace the first item
            of the sequence, set this parameter to 0.
            </param>
            <param name="sequence">The item to be encoded placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.ToString">
            <summary>
            Returns a string representation of the sequence data. This representation
            will come from the symbols in the alphabet defined for the sequence.
            
            Thus a Sequence whose Alphabet is Alphabets.DNA may return a value like
            'GATTCCA'
            </summary>
        </member>
        <member name="M:MBF.Sequence.Range(System.Int32,System.Int32)">
            <summary>
            Return a virtual sequence representing a range (substring) of this sequence.
            </summary>
            <param name="start">The index of the first symbol in the range.</param>
            <param name="length">The number of symbols in the range.</param>
            <returns>The virtual sequence.</returns>
        </member>
        <member name="M:MBF.Sequence.IndexOfNonGap">
            <summary>
            Gets the index of first non gap character.
            </summary>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.Sequence.IndexOfNonGap(System.Int32)">
            <summary>
            Returns the position of the first item from startPos that does not 
            have a Gap character.
            </summary>
            <param name="startPos">Index value above which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the first non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.Sequence.LastIndexOfNonGap">
            <summary>
            Gets the index of last non gap character.
            </summary>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.Sequence.LastIndexOfNonGap(System.Int32)">
            <summary>
            Gets the index of last non gap character within the specified end position.
            </summary>
            <param name="endPos">Index value below which to search for non-Gap character.</param>
            <returns>If found returns an zero based index of the last non gap character, otherwise returns -1.</returns>
        </member>
        <member name="M:MBF.Sequence.MBF#ISequence#Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new ISequence that is a copy of this Sequence.</returns>
        </member>
        <member name="M:MBF.Sequence.FindMatches(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean)">
            <summary>
            Finds the list of string that matches any of the patterns with the indices of each occurrence in sequence.
            </summary>
            <param name="patterns">List of patterns that needs to be searched in Sequence.</param>
            <param name="startIndex">Minimum index in Sequence at which match has to start.</param>
            <param name="ignoreCase">
            if true ignore character casing while match.
            <remarks>
            Note that symbols in Sequence are always Upper case.
            </remarks>
            </param>
            <returns></returns>
        </member>
        <member name="M:MBF.Sequence.IndexOf(MBF.ISequenceItem)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter. This does not do a symbol
            comparison. The match must be the exact same ISequenceItem.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.Sequence.Add(MBF.ISequenceItem)">
            <summary>
            Adds a sequence item to the end of the sequence. The Sequence
            must not be marked as read only in order to make this change.
            </summary>
            <param name="item">The item to add to the end of the sequence</param>
        </member>
        <member name="M:MBF.Sequence.Clear">
            <summary>
            Removes all sequence data from the Sequence.  The Sequence
            must not be marked as read only in order to make this change.
            </summary>
        </member>
        <member name="M:MBF.Sequence.Contains(MBF.ISequenceItem)">
            <summary>
            Indicates if a sequence item is contained in the sequence anywhere.
            Note that the SequenceItem must be taken from the alphabet defined
            for this sequence in order for this method to return true.
            </summary>
        </member>
        <member name="M:MBF.Sequence.CopyTo(MBF.ISequenceItem[],System.Int32)">
            <summary>
            Copies the sequence items into a preallocated array.
            </summary>
        </member>
        <member name="M:MBF.Sequence.Remove(MBF.ISequenceItem)">
            <summary>
            Removes the first instance found of a particular sequence item.
            This item must be from the alphabet defined for the Sequence.
            </summary>
            <param name="item">The items to search for and remove.</param>
            <returns>True if the item was found and removed, false if the item was not found.</returns>
        </member>
        <member name="M:MBF.Sequence.GetEnumerator">
            <summary>
            Retrieves an enumerator for this sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.Sequence.System#ICloneable#Clone">
            <summary>
            Creates a new Sequence that is a copy of the current Sequence.
            </summary>
            <returns>A new object that is a copy of this Sequence.</returns>
        </member>
        <member name="M:MBF.Sequence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Sequence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#IList{System#Byte}#IndexOf(System.Byte)">
            <summary>
            Returns the index of the first item matching the item
            passed in to the parameter.
            </summary>
            <returns>The index of the first matched item. Counting starts at 0.</returns>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>
            Places the given item at the indicated position within the current sequence data.
            </summary>
            <param name="index">
            The position within the data to place the new data. Note that this
            position starts its counting from 0. Thus to start at the begging
            of the sequence, set this parameter to 0.
            </param>
            <param name="item">The item to be placed into the sequence</param>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>
            Adds the given byte value at the end of the sequence.
            </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#ICollection{System#Byte}#Contains(System.Byte)">
            <summary>
            Checks if a given item is present in the sequence or not
            </summary>
            <param name="item">Item to check for</param>
            <returns>True if found, else false</returns>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#ICollection{System#Byte}#CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies all items from the sequence to a pre allocated array.
            </summary>
            <param name="array">Array to fill the items to</param>
            <param name="arrayIndex">Index at which the filling starts</param>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>
            Removes the first occurance of the given item from the sequence
            </summary>
            <param name="item">Item to be removed</param>
            <returns>True if removal was successful, else false</returns>
        </member>
        <member name="M:MBF.Sequence.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <summary>
            Gets an enumerator to read through the byte values in the sequence
            </summary>
            <returns>Enumerator to read through the byte values in the sequence</returns>
        </member>
        <member name="M:MBF.Sequence.ConvertToByteArray">
            <summary>
            Partial sequence - convert to byte array
            </summary>
            <returns>Byte array which corresponds the sequence</returns>
        </member>
        <member name="M:MBF.Sequence.GetSymbolSafeISequenceItem(MBF.ISequenceItem)">
            <summary>
            Get the sequence item converted from Encoding to Alphabet
            </summary>
            <param name="item">Sequence item to veify.</param>
        </member>
        <member name="M:MBF.Sequence.GetAlphabetISeqeunceItem(System.Byte)">
            <summary>
            Gets the ISequenceItem from Alphabet eventhough Encoding is set.
            </summary>
            <param name="value">value to verify.</param>
        </member>
        <member name="P:MBF.Sequence.Encoding">
            <summary>
            The encoding being used to translate the sequence items into string
            representations when needed, such as when calling ToString(). This
            value may also be used by individual implementations of ISequence to
            convert strings or characters passed into constructors or methods to
            convert to sequence items.
            </summary>
        </member>
        <member name="P:MBF.Sequence.UseEncoding">
            <summary>
            Gets a value indicating whether encoding is used while storing
            sequence in memory
            </summary>
        </member>
        <member name="P:MBF.Sequence.VirtualSequenceProvider">
            <summary>
            Gets or sets the virtual sequence provider
            </summary>
        </member>
        <member name="P:MBF.Sequence.PatternFinder">
            <summary>
            Gets or sets the Pattern Finder used to short string in sequence
            </summary>
        </member>
        <member name="P:MBF.Sequence.MapToAlphabet">
            <summary>
            Gets the mappring from Encoding to Alphabet.
            </summary>
        </member>
        <member name="P:MBF.Sequence.ID">
            <summary>
            An identification provided to distinguish the sequence to others
            being worked with.
            </summary>
        </member>
        <member name="P:MBF.Sequence.DisplayID">
            <summary>
            An identification of the sequence that is meant to be understood
            by human users when displayed in an application or file format.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Metadata">
            <summary>
            Many sequence representations when saved to file also contain
            information about that sequence. Unfortunately there is no standard
            around what that data may be from format to format. This property
            allows a place to put structured metadata that can be accessed by
            a particular key.
            
            For example, if species information is stored in a particular Species
            class, you could add it to the dictionary by:
            
            mySequence.Metadata["SpeciesInfo"] = mySpeciesInfo;
            
            To fetch the data you would use:
            
            Species mySpeciesInfo = mySequence.Metadata["SpeciesInfo"];
            
            Particular formats may create their own data model class for information
            unique to their format as well. Such as:
            
            GenBankMetadata genBankData = new GenBankMetadata();
            // ... add population code
            mySequence.MetaData["GenBank"] = genBankData;
            </summary>
        </member>
        <member name="P:MBF.Sequence.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Alphabet">
            <summary>
            The alphabet to which string representations of the sequence should
            conform.
            </summary>
        </member>
        <member name="P:MBF.Sequence.MoleculeType">
            <summary>
            The molecule type (DNA, protein, or various kinds of RNA) the sequence encodes.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Statistics">
            <summary>
            Keeps track of the number of occurrances of each symbol within a sequence.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Reverse">
            <summary>
            Return a virtual sequence representing this sequence with the orientation reversed.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Complement">
            <summary>
            Return a virtual sequence representing the complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.Sequence.ReverseComplement">
            <summary>
            Return a virtual sequence representing the reverse complement of this sequence.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Item(System.Int32)">
            <summary>
            Allows the sequence to function like an array, getting and setting
            the sequence item at the particular index specified. Note that the
            index value starts its count at 0.
            </summary>
        </member>
        <member name="P:MBF.Sequence.Count">
            <summary>
            The number of sequence items contained in the Sequence.
            </summary>
        </member>
        <member name="P:MBF.Sequence.IsReadOnly">
            <summary>
            A flag indicating whether or not edits can be made to this Sequence.
            When IsReadOnly is true, the sequence data is stored in a compact
            array and any method for editing that data will throw an exception.
            When IsReadOnly is false, the sequence data is stored in a less
            compact structure that allows for quick edits.
            
            You can set the IsReadOnly flag. The result of doing so will transfer
            the internal storage of the data from one mechanism to the other.
            </summary>
        </member>
        <member name="P:MBF.Sequence.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.Sequence.BlockSize">
            <summary>
            Gets or sets block size
            </summary>
        </member>
        <member name="P:MBF.Sequence.IsDataVirtualized">
            <summary>
            Gets a value indicating that whether the Data Virtualization is 
            enabled on this instance or not.
            </summary>
        </member>
        <member name="P:MBF.Sequence.System#Collections#Generic#IList{System#Byte}#Item(System.Int32)">
            <summary>
            Gets or Sets the byte value of the sequence item at the given index
            </summary>
            <param name="index">Index of the item to retrieve</param>
            <returns>Byte value at the given index</returns>
        </member>
        <member name="T:MBF.IO.SequenceRangeFormatters">
            <summary>
            SequenceRangeFormatter class is an abstraction class which provides instances
            and lists of all Range-Formatter currently supported by MBF.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceRangeFormatters.bed">
            <summary>
            A singleton instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SequenceRangeFormatters.all">
            <summary>
            List of all supported Range-Formatters.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceRangeFormatters.Bed">
            <summary>
            Gets an instance of BedFormatter class which is capable of
            saving a ISequenceRange according to the BED file format.
            </summary>
        </member>
        <member name="P:MBF.IO.SequenceRangeFormatters.All">
            <summary>
            Gets the list of all range-formatters supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.IO.Newick.NewickParser">
            <summary>
            A NewickParser reads from a source of text that is formatted according to 
            the Newick notation flat file specification, and converts the data to 
            in-memory PhylogeneticTree object.  
            Documentation for the latest Newic file format can be found at
            http://evolution.genetics.washington.edu/phylip/newicktree.html
            http://en.wikipedia.org/wiki/Newick_format
            </summary>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Parse(System.Text.StringBuilder)">
            <summary>
            Parses a Phylogenetic tree text from a string into a PhylogeneticTree.
            </summary>
            <param name="treeBuilder">Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Parse(System.IO.TextReader)">
            <summary>
            Parses a Phylogenetic tree text from a reader into a PhylogeneticTree.
            </summary>
            <param name="reader">A reader for a Phylogenetic tree text.</param>
            <returns>A new PhylogeneticTree instance containing parsed data.</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Parse(System.String)">
            <summary>
            Parses a Phylogenetic tree text from a file.
            </summary>
            <param name="fileName">The name of a Phylogenetic tree file.</param>
            <returns>PhylogeneticTree object.</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Parse">
            <summary>
            Parses a Phylogenetic tree text from the local text reader
            </summary>
            <returns>Parsed PhylogeneticTree object.</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.GetNode(System.Boolean)">
            <summary>
            Get collection of (Branche and Leaf) nodes
            </summary>
            <param name="isRoot"></param>
            <returns>PhylogeneticNode object</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.GetBranch(System.Boolean)">
            <summary>
            Gets the Branch node
            </summary>
            <param name="isRoot"></param>
            <returns>Branch object</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.GetLeaf">
            <summary>
            Get the Leaf node
            </summary>
            <returns>Leaf object</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Peek">
            <summary>
            Peeks the TextReader char by char 
            </summary>
            <returns>a character</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.ReadLength">
            <summary>
            Reads Length
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.ReadChar">
            <summary>
            Reads current character
            </summary>
            <returns>a character</returns>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Dispose">
            <summary>
            Implements dispose to supress GC finalize
            This is done as one of the methods uses ReadWriterLockSlim
            which extends IDisposable.
            </summary>
        </member>
        <member name="M:MBF.IO.Newick.NewickParser.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="P:MBF.IO.Newick.NewickParser.Name">
            <summary>
            Gets the type of Parser i.e NEWICK.
            This is intended to give developers some information 
            of the parser class.
            </summary>
        </member>
        <member name="P:MBF.IO.Newick.NewickParser.Description">
            <summary>
            Gets the description of Newick parser.
            This is intended to give developers some information 
            of the parser class. This property returns a simple description of what the
            NewickParser class acheives.
            </summary>
        </member>
        <member name="P:MBF.IO.Newick.NewickParser.FileTypes">
            <summary>
            Gets a comma seperated values of the possible
            file extensions for a Newick file.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceStrandType">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandType.None">
            <summary>
            None - StrandType is unspecified.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandType.Single">
            <summary>
            Single-stranded (ss).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandType.Double">
            <summary>
            Double-stranded (ds).
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.SequenceStrandType.Mixed">
            <summary>
            Mixed-stranded (ms).
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.GenBankLocusInfo">
            <summary>
            Locus provides a short mnemonic name for the sequence entry in gen bank 
            database, chosen to suggest the sequence's definition.
            
            It also contains information like Sequence type, Strand type division code etc.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankLocusInfo.Clone">
            <summary>
            Creates a new GenBankLocusInfo that is a copy of the current GenBankLocusInfo.
            </summary>
            <returns>A new GenBankLocusInfo that is a copy of this GenBankLocusInfo.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.GenBankLocusInfo.System#ICloneable#Clone">
            <summary>
            Creates a new GenBankLocusInfo that is a copy of the current GenBankLocusInfo.
            </summary>
            <returns>A new object that is a copy of this GenBankLocusInfo.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.Name">
            <summary>
            Mnemonic name for the sequence entry.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.SequenceLength">
            <summary>
            Specifies the length of the sequence present.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.SequenceType">
            <summary>
            Sequence type specifies whether the sequence is a base pair (bp) or an amino acid (aa).
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.Strand">
            <summary>
            A StrandType specifies whether sequence occurs as a single stranded,
            double stranded or mixed stranded. 
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.MoleculeType">
            <summary>
            Specifies type of the biological sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.StrandTopology">
            <summary>
            A StrandTopology specifies whether the strand is linear or circular.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.DivisionCode">
            <summary>
            A DivisionCode specifies which family a sequence belongs to.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.GenBankLocusInfo.Date">
            <summary>
            Contains the date the entry was entered or underwent any substantial revisions,
            such as the addition of newly published data.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.NonCodingRNA">
            <summary>
            A non-protein-coding gene (ncRNA), other than ribosomal RNA and transfer RNA, the functional 
            molecule of which is the RNA transcript.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.NonCodingRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new NonCodingRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.NonCodingRNA.#ctor(System.String)">
            <summary>
            Creates new NonCodingRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the NonCodingRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.NonCodingRNA.#ctor(MBF.IO.GenBank.NonCodingRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other NonCodingRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.NonCodingRNA.Clone">
            <summary>
            Creates a new NonCodingRNA that is a copy of the current NonCodingRNA.
            </summary>
            <returns>A new NonCodingRNA that is a copy of this NonCodingRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.NonCodingRNA.NonCodingRNAClass">
            <summary>
            ncRNA_class; A structured description of the classification of the non-coding RNA described by the ncRNA parent key.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.LocationResolver">
            <summary>
            This is the default implementation of ILocationResolver.
            This class resolves the start and end positions of a location.
            
            Please see the following table for how this class resolves the ambiguities in start and end data.
            
            Start/End Data		Resolved Start		Resolved End
            12.30               12      			30
            &gt;30	            30			        30
            &lt;30 	            30			        30
            23^24		        23	                24
            100^1		        1000    			1	
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.Clone">
            <summary>
            Returns the new LocationResolver instance that is a copy of this instance.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetStart(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns the start position by resolving the startdata present in the specified location.
            If unable to resolve startdata then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetEnd(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns the end position by resolving the enddata present in the specified location.
            If unable to resolve enddata then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetSubSequence(MBF.IO.GenBank.ILocation,MBF.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location of a feature and sequence in which the feature is present is 
            specified then this method returns a sequence which contains the bases of the specified feature.
            
            Please note that,
            1. If Accession of the location is not null or empty then an exception will occur.
            2. If the location contains "order" operator then this method uses SegmentedSequence class to construct the sequence.
               For example, order(100..200,300..450) will result in a SegmentedSequence which internally contains two sequences, 
               first one created from 100 to 200 bases, and second one created from 300 to 450 bases.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetSubSequence(MBF.IO.GenBank.ILocation,MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequence as specified by the location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example,
            if location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            then bases from 100 to 200 will be considered from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="location">Location instance.</param>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.IsInStart(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the start position.
            For example,
            if the startdata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start position else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.IsInEnd(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Return true if the specified position is within the end position.
            For example,
            if the enddata of a location is "23.40", this method will 
            return true for the position values ranging from 23 to 40.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified P\position is with in the end position else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.IsInRange(MBF.IO.GenBank.ILocation,System.Int32)">
            <summary>
            Returns true if the specified position is with in the start and end positions.
            </summary>
            <param name="location">Location instance.</param>
            <param name="Position">Position to be verified.</param>
            <returns>Returns true if the specified position is with in the start and end positions else returns false.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.MBF#IO#GenBank#ILocationResolver#Clone">
            <summary>
            Creates a new ILocationResolver that is a copy of the current ILocationResolver.
            </summary>
            <returns>A new ILocationResolver that is a copy of this ILocationResolver.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the LocationResolver.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.System#ICloneable#Clone">
            <summary>
            Creates a new LocationResolver that is a copy of the current LocationResolver.
            </summary>
            <returns>A new object that is a copy of this LocationResolver.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.ResolveStart(System.String)">
            <summary>
            Resolves and returns the start position.
            </summary>
            <param name="str">Start data.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.ResolveEnd(System.String)">
            <summary>
            Resolves and returns the end position.
            </summary>
            <param name="str">End data.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationResolver.GetSubSequence(System.Int32,System.Int32,System.String,System.String,MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns the sequence for the specified start and end positions.
            If the accession is null or empty then the source sequence is used to construct the output sequence,
            otherwise appropriate sequence from the referred sequence is used to construct output sequence.
            </summary>
            <param name="start">Start position.</param>
            <param name="end">End position.</param>
            <param name="accession">Accession number.</param>
            <param name="sepataror">Start and End separator.</param>
            <param name="source">Source sequence.</param>
            <param name="referredSequences">Referred Sequences.</param>
        </member>
        <member name="T:MBF.IO.GenBank.Location">
            <summary>
            Location, holds the feature location information.
            This is the default implementaion of the ILocation interface.
            This holds Start and End points of location. 
            If in case location refers to some other sequence (for example, J00194.1:1..150) 
            then the accession number information should be stored in the Accession property.
            Resolver property is used to resolve any ambiguity in the location startdata and enddata. 
            By default this will be set to an instance of LocationResolver class.  
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Location.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Location.Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new Location that is a copy of this Location.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.Location.IsInStart(System.Int32)">
            <summary>
            Returns true if the specified position is within the start positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.IsInEnd(System.Int32)">
            <summary>
            Returns true if the specified position is within the end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.IsInRange(System.Int32)">
            <summary>
            Returns true if the specified position is within the start and end positions of the location.
            </summary>
            <param name="position">Position to be verified.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.GetSubSequence(MBF.ISequence)">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            </summary>
            <param name="sequence">Sequence from which the sub sequence has to be returned.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.GetSubSequence(MBF.ISequence,System.Collections.Generic.Dictionary{System.String,MBF.ISequence})">
            <summary>
            Returns a sequence which contains bases from the specified sequences as specified by this location.
            If the location contains accession then the sequence from the referredSequences which matches the 
            accession of the location will be considered.
            
            For example, 
            If a location is "join(100..200, J00089.1:10..50, J00090.2:30..40)"
            bases from 100 to 200 will be taken from the sequence parameter and referredSequences will
            be searched for the J00089.1 and J00090.2 accession if found then those sequences will be considered 
            for constructing the output sequence.
            If the referred sequence is not found in the referredSequences then an exception will occur.
            </summary>
            <param name="sequence">Sequence instance from which the sub sequence has to be returned.</param>
            <param name="referredSequences">A dictionary containing Accession numbers as keys and Sequences as values, this will be used when
            the location or sublocations contains accession.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.GetLeafLocations">
            <summary>
            Gets the leaf locations present in this location.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Location.MBF#IO#GenBank#ILocation#Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new ILocation that is a copy of this Location.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.Location.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object and returns an 
             indication of their relative values.
            </summary>
            <param name="obj">Loction instance to compare.</param>
            <returns> 
            A signed number indicating the relative values of this instance and value.
            Return Value Description Less than zero This instance is less than value.
            Zero This instance is equal to value. Greater than zero This instance is
            greater than value.  -or- value is null.
            </returns>
        </member>
        <member name="M:MBF.IO.GenBank.Location.System#ICloneable#Clone">
            <summary>
            Creates a new Location that is a copy of the current Location.
            </summary>
            <returns>A new object that is a copy of this Location.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.Location.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the Location.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Location.GetLeafLocations(System.Collections.Generic.List{MBF.IO.GenBank.ILocation},MBF.IO.GenBank.ILocation)">
            <summary>
            Recursively gets the leaf locations.
            </summary>
            <param name="locations">Locations list.</param>
            <param name="location">location instance.</param>
        </member>
        <member name="P:MBF.IO.GenBank.Location.Resolver">
            <summary>
            Gets or sets the ILocationResolver instance used to resolve 
            ambiguity in startdata and enddata
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.Start">
            <summary>
            Gets the start position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.End">
            <summary>
            Gets the end position of the location.
            Note that this is one based position.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.StartData">
            <summary>
            Gets or sets the start position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.EndData">
            <summary>
            Gets or sets the end position data.
            All positions are one based.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.Accession">
            <summary>
            Accession number of referred sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.Separator">
            <summary>
            Start and end positions separator.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.Operator">
            <summary>
            Operator like none, complement, join and order.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Location.SubLocations">
            <summary>
            Sub locations.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.NeedlemanWunschAligner">
            <summary>
            Implements the NeedlemanWunsch algorithm for global alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NeedlemanWunschAligner._optScore">
            <summary>
            Tracks optimal score for alignment
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch - Uses linear gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetOptimalScoreSimple">
            <summary>
            Sets the score in last cell of _FScore to be the optimal score
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetOptimalScoreAffine">
            <summary>
            Sets the score in last cell of _MaxScore to be the optimal score
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch - Uses affine gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for zeroth row in NeedlemanWunsch global alignment.
            Uses linear gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth column in NeedlemanWunsch global alignment.
            Uses linear gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for zeroth row in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth column in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
            <param name="row">Row number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.Traceback(System.Collections.Generic.List{System.Byte[]}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Performs traceback for global alignment.
            </summary>
            <param name="alignedSequences">List of aligned sequences (output)</param>
            <param name="offsets">Offset is the starting position of alignment
            of sequence1 with respect to sequence2</param>
            <param name="startOffsets">Start indices of aligned sequences with respect to input sequences.</param>
            <param name="endOffsets">End indices of aligned sequences with respect to input sequences.</param>
            <param name="insertions">Insetions made to the aligned sequences.</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch - Uses linear gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch - Uses affine gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms.
            </summary>
            <param name="row">row of cell</param>
            <param name="col">col of cell</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for zeroth row and zeroth column in NeedlemanWunsch global alignment.
            Uses linear gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NeedlemanWunschAligner.SetBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for zeroth row and zeroth column in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NeedlemanWunschAligner.Name">
            <summary>
            Gets the name of the current Alignment algorithm used.
            This is a overriden property from the abstract parent.
            This property returns the Name of our algorithm i.e 
            Needleman-Wunsch algorithm.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.NeedlemanWunschAligner.Description">
            <summary>
            Gets the description of the NeedlemanWunsch algorithm used.
            This is a overriden property from the abstract parent.
            This property returns a simple description of what 
            NeedlemanWunschAligner class implements.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.LongestIncreasingSubsequence">
            <summary>
            This class implements an algorithm to find the longest increasing
            subsequence from the list of MUMs. In the process 
                1. Removes the criss-cross mums.
                2. Removes the overlapping portion of MUM by trimming the appropriate MUM.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.LongestIncreasingSubsequence.GetLongestSequence(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Find the longest increasing sub sequence from the given set of MUMs
            </summary>
            <param name="sortedMums">List of sorted MUMs</param>
            <returns>Longest Increasing Subsequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.LongestIncreasingSubsequence.ConvertToMUMExtension(System.Collections.Generic.IList{MBF.Algorithms.Alignment.MaxUniqueMatch})">
            <summary>
            Convert given list of MUMs to MaxUniqueMatchExtension
            </summary>
            <param name="sortedMums">List of MUMs</param>
            <returns>List of MaxUniqueMatchExtension</returns>
        </member>
        <member name="T:MBF.IO.SAM.SAMRecordField">
            <summary>
            This class holds SAM record fields.
            Record fields are present in the SAM header.
            This class can hold one header line of the SAM header.
            For example, consider the following header line.
            @SQ	SN:chr20	LN:62435964
            In this example SQ is the Type code.
            SN:chr20  and LN:62435964 are SAMRecordFieldTags.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMRecordField.#ctor">
            <summary>
            Creates SAMRecordField instance.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMRecordField.#ctor(System.String)">
            <summary>
            Creates SAMRecordField with the specified type code.
            </summary>
            <param name="typecode">Type code.</param>
        </member>
        <member name="P:MBF.IO.SAM.SAMRecordField.Typecode">
            <summary>
            Record field type code.
            for example. HD, SQ.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMRecordField.Tags">
            <summary>
            List of SAM RecordFieldTags.
            </summary>
        </member>
        <member name="T:MBF.IO.SAM.SAMAlignedSequenceHeader">
            <summary>
            SAMAlignedSequenceHeader holds aligned sequence headers of the sam file format.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.QNameRegxExprPattern">
            <summary>
            Regular expression pattern for QName.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.RNameRegxExprPattern">
            <summary>
            Regular expression pattern for RName.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.CIGARRegxExprPattern">
            <summary>
            Regular expression pattern for CIGAR.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MRNMRegxExprPattern">
            <summary>
             Regular expression pattern for MRNM.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.POS_MaxValue">
            <summary>
            Represents the largest possible value of POS. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.POS_MinValue">
            <summary>
            Represents the smallest possible value of POS. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MPOS_MaxValue">
            <summary>
            Represents the largest possible value of MPOS. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MPOS_MinValue">
            <summary>
            Represents the smallest possible value of MPOS. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.ISize_MaxValue">
            <summary>
            Represents the largest possible value of ISize. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.ISize_MinValue">
            <summary>
            Represents the smallest possible value of ISize. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MapQ_MaxValue">
            <summary>
            Represents the largest possible value of MapQ. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MapQ_MinValue">
            <summary>
            Represents the smallest possible value of MapQ. This field is constant.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.DefaultReadLength">
            <summary>
            Default value for read/query length.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.DefaultCIGAR">
            <summary>
            Default value for CIGAR.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.QNameRegxExpr">
            <summary>
            Regular Expression object for QName.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.RNameRegxExpr">
            <summary>
            Regular Expression object for RName.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.CIGARRegxExpr">
            <summary>
            Regular Expression object for CIGAR.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader.MRNMRegxExpr">
            <summary>
            Regular Expression object for MRNM.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._qname">
            <summary>
            Holds Query pair name if paired; or Query name if unpaired.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._rname">
            <summary>
            Holds Reference sequence name.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._pos">
            <summary>
            Holds left co-ordinate of alignment.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._mapq">
            <summary>
            Holds MAPping Quality of alignment.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._mpos">
            <summary>
            Holds Leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._isize">
            <summary>
            Holds inferred insert size.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._readLength">
            <summary>
            Holds read (query sequence) length depending on CIGAR value.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._cigar">
            <summary>
            Holds CIGAR value.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._mrnm">
            <summary>
            Holds Mate Reference sequence name (MRNM).
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMAlignedSequenceHeader._bin">
            <summary>
            Holds bin number.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.#ctor">
            <summary>
            Creates new SAMAlignedSequenceHeader instance.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.GetFlag(System.Int32)">
            <summary>
            Gets the SAMFlag for the specified integer value.
            </summary>
            <param name="value">Value for which the SAMFlag is required.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.GetFlag(System.String)">
            <summary>
            Gets the SAMFlag for the specified string value.
            </summary>
            <param name="value">Value for which the SAMFlag is required.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.RegionToBin(System.Int32,System.Int32)">
            <summary>
            Gets Bin for the specified region.
            Note that this method returns zero for negative values.
            </summary>
            <param name="start">Zero based start co-ordinate of alignment.</param>
            <param name="end">Zero based end co-ordinate of the alignment.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidQName(System.String)">
            <summary>
            Validates QName.
            </summary>
            <param name="qname">QName value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidRName(System.String)">
            <summary>
            Validates RName.
            </summary>
            <param name="rname">RName value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidPos(System.Int32)">
            <summary>
            Validates Pos.
            </summary>
            <param name="pos">Position value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidMapQ(System.Int32)">
            <summary>
            Validates MapQ.
            </summary>
            <param name="mapq">MapQ value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidCIGAR(System.String)">
            <summary>
            Validates CIGAR.
            </summary>
            <param name="cigar">CIGAR value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidMRNM(System.String)">
            <summary>
            Validates MRNM.
            </summary>
            <param name="mrnm">MRNM value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidMPos(System.Int32)">
            <summary>
            Validates MPos.
            </summary>
            <param name="mpos">MPOS value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.IsValidISize(System.Int32)">
            <summary>
            Validates ISize.
            </summary>
            <param name="isize">ISIZE value to validate.</param>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.GetBin">
            <summary>
            Returns the bin number.
            </summary>
        </member>
        <member name="M:MBF.IO.SAM.SAMAlignedSequenceHeader.GetReadLengthFromCIGAR">
            <summary>
            Gets the read sequence length depending on the CIGAR value.
            </summary>
            <returns>Length of the read.</returns>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.QName">
            <summary>
            Query pair name if paired; or Query name if unpaired.
            </summary>  
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.Flag">
            <summary>
            SAM flags.
            <see cref="T:MBF.IO.SAM.SAMFlags"/>
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.RName">
            <summary>
            Reference sequence name.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.Pos">
            <summary>
            One-based leftmost position/coordinate of the aligned sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.MapQ">
            <summary>
            Mapping quality (phred-scaled posterior probability that the 
            mapping position of this read is incorrect).
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.CIGAR">
            <summary>
            Extended CIGAR string.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.MRNM">
            <summary>
            Mate reference sequence name. 
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.MPos">
            <summary>
            One-based leftmost mate position of the clipped sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.ISize">
            <summary>
            Inferred insert size.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.Bin">
            <summary>
            Gets the Bin depending on the POS and CIGAR.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.QueryLength">
            <summary>
            Gets the query length depending on CIGAR Value.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.DotSymbolIndices">
            <summary>
            Contains the list of indices of "." symbols present in the aligned sequence.
            As "." is not supported by DNA, RNA and Protien alphabets, while creating aligned 
            sequence "." symbols are replaced by "N" which has the same meaning of ".".
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.EqualSymbolIndices">
            <summary>
            Contains the list of "=" symbol indices present in the aligned sequence.
            The "=" symbol in aligned sequence indicates that the symbol at this index 
            is equal to the symbol present in the reference sequence. As "=" is not 
            supported by DNA, RNA and Protien alphabets, while creating aligned 
            sequence "=" symbols are replaced by the symbol present in the reference 
            sequence at the same index.
            </summary>
        </member>
        <member name="P:MBF.IO.SAM.SAMAlignedSequenceHeader.OptionalFields">
            <summary>
            Optional fields.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder">
            <summary>
            This class implements Algorithm (using Multi-Way Suffix Tree) to build the Suffix Tree.
            Steps to build the suffix tree are:
                For every prefix in suffix of sequence string
                Add prefix to the tree, prefix can be added in to ways
                    1. New edge is created
                    2. Previous edge is updated (split the tree and and new edges)
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.TERMINATING_SYMBOL">
            <summary>
            Character used as terminating symbol for Suffix Tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.CONCATENATING_SYMBOL">
            <summary>
            Character used as Concatenating symbol for Suffix Tree
            Note: This is specific to NUCmer implementation
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._distinctSymbolCount">
            <summary>
            Count of Unique symbols in reference sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._minimumLengthOfMUM">
            <summary>
            Minimum Required length of MUM
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._suffixTree">
            <summary>
            Current suffix tree
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._referenceSequences">
            <summary>
            Reference sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._querySequence">
            <summary>
            Query sequence
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._referenceSymbolsList">
            <summary>
            If reference sequence is segmented sequence then store sequence's encoded values in 
            segemented sequence in list of byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._referenceSymbols">
            <summary>
            Reference sequence's encoded values are in the byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._querySymbols">
            <summary>
            Query sequence's encoded values in the byte array.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._lastMatch">
            <summary>
            Last Match found
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._lastEdge">
            <summary>
            Last edge in the previous match
            </summary>
        </member>
        <member name="F:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder._findMaximumMatch">
            <summary>
            If set, find all the matches irrespective of the uniqueness in 
            reference or query sequence.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.#ctor">
            <summary>
            Default Constructor: Initializes an instance of type SimpleSuffixTreeBuilder.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.BuildSuffixTree(MBF.ISequence)">
            <summary>
            Builds the Suffix Tree using Kurtz Algorithm(using Multi Way Suffix Tree)
            </summary>
            <param name="sequence">Input Sequence</param>
            <returns>Suffix Tree</returns>
            _edgeStorage.Dispose() is being called in Dispose(true) method.
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.FindMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.FindMaximumMatches(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Finds all the matches of given sequence in suffix tree irrespective of the uniqueness in
            reference or query sequence
            </summary>
            <param name="suffixTree">Suffix Tree</param>
            <param name="searchSequence">Query searchSequence</param>
            <param name="lengthOfMUM">Mininum length of MUM</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.FindMatchWithOption(MBF.Algorithms.SuffixTree.ISuffixTree,MBF.ISequence,System.Int64)">
            <summary>
            Find the matches of sequence in suffix tree
            </summary>
            <param name="suffixTree">Suffix tree to searh on</param>
            <param name="searchSequence">query sequence to find matches</param>
            <param name="lengthOfMUM">Minimum length of the match</param>
            <returns>Matches found</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.ValidateReferenceSequence(MBF.ISequence)">
            <summary>
            Validate input sequences are of same encoding
            </summary>
            <param name="sequence">Reference sequence</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.InitializeReferenceSequence(MBF.ISequence)">
            <summary>
            Initialize reference sequence.
            If the sequence is DV-enabled pre-fetch the sequence in local byte array
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.ValidateSequence(MBF.ISequence,MBF.ISequence)">
            <summary>
            Validate input sequences are of same encoding
            </summary>
            <param name="referenceSequence">Reference sequence</param>
            <param name="querySequence">Query sequence</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.InitializeQuerySequence(MBF.ISequence)">
            <summary>
            Initialize query sequence.
            If the sequence is DV-enabled pre-fetch the sequence in local byte array
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.GetReferenceSymbol(System.Int32)">
            <summary>
            Get the symbol from refrence sequence at given index
            </summary>
            <param name="index">Index of symbol</param>
            <returns>Symbol at index</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.GetQuerySymbol(System.Int32)">
            <summary>
            Get the symbol from query sequence at given index
            </summary>
            <param name="index">Index of symbol</param>
            <returns>Symbol at index</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.AppendSuffix(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Add suffix to the tree, the loop inside will break under two conditions
                1. If you have reached the leaf node
                2. If you have reached end of suffix
            </summary>
            <param name="startIndices">List of index of the first character of suffix</param>
            <returns>Suffix tree</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.FindMUMs(System.Int32,System.Int32)">
            <summary>
            Finds the MUMs for suffix in given interval of query sequence
            </summary>
            <param name="startIndex">startindex of interval</param>
            <param name="interval">length of interval</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.Search(System.Int32)">
            <summary>
            Search for a query sequence in give Suffix Tree for existence
            </summary>
            <param name="startIndex">Index of first suffix character in search sequence</param>
            <returns>Does query sequence exists</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.CreateMUM(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate following conditions and create MUM only if valid
            1. Make sure there is no split edge in reference sequence (this 
                represent duplicate in reference sequence)
            2. Validate required length of MUM
            </summary>
            <param name="referenceEndIndex">End index of string found in reference sequence</param>
            <param name="queryStartIndex">Start index of string found in query sequence</param>
            <param name="length">Length of match</param>
            <returns>Maximum Unique Match</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.GetPhysicalMemory">
            <summary>
            Gets physical memory of the machine.
            </summary>
            <returns>Physical memory in bytes</returns>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.CreateSuffixTree">
            <summary>
            Create a in-memory or storable suffix tree based on the current OS, architecture and available RAM
            </summary>
            <returns>Suffix tree</returns>
            Cannot dispose "suffixTree" as this the returned by BuildSuffixTree method
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.Dispose">
            <summary>
            Dispose the resources
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.Dispose(System.Boolean)">
            <summary>
            Dispose field instances
            </summary>
            <param name="disposeManaged">If disposeManaged equals true, clean all resources</param>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.ReferenceLength">
            <summary>
            Gets the length of reference sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.EdgeStorage">
            <summary>
            Gets or sets Edge storage instance
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.SimpleSuffixTreeBuilder.PersistenceThreshold">
            <summary>
            Gets or sets Maximum number of edges to be added before switching to PersistentEdge
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IDistanceCalculator">
            <summary>
            Classes implementing interface calculates distance between contigs using 
            mate pair information.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IDistanceCalculator.CalculateDistance(MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs)">
            <summary>
            Calculates distances between contigs.
            </summary>
            <param name="contigPairedReads">Input Contigs and mate pair mappping.s</param>
        </member>
        <member name="T:MBF.Web.Blast.Hsp">
            <summary>
            a High-scoring Segment Pair.
            </summary>
            <remarks>
            Represents an aligned section of the query and hit sequences with high similarity.
            </remarks>
        </member>
        <member name="M:MBF.Web.Blast.Hsp.#ctor">
            <summary>
            Default Constructor: Initializes an instance of class BlastStatistics
            </summary>
        </member>
        <member name="M:MBF.Web.Blast.Hsp.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.Blast.Hsp.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.Score">
            <summary>
            The score for the pair
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.BitScore">
            <summary>
            Normalized form of the score
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.EValue">
            <summary>
            Expectation value
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.QueryStart">
            <summary>
            The start location of the match in the query sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.QueryEnd">
            <summary>
            The end location of the match in the query sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.HitStart">
            <summary>
            The start location of the match in the hit sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.HitEnd">
            <summary>
            The end location of the match in the hit sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.QueryFrame">
            <summary>
            The frame for the query sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.HitFrame">
            <summary>
            The frame for the hit sequence
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.IdentitiesCount">
            <summary>
            Number of residues that matched exactly
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.PositivesCount">
            <summary>
            Number of residues that matched conservatively (for proteins)
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.AlignmentLength">
            <summary>
            The length of the local match
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.Density">
            <summary>
            The score density
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.QuerySequence">
            <summary>
            The local match in the query sequence, as a string
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.HitSequence">
            <summary>
            The local match in the hit sequence, as a string
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.Midline">
            <summary>
            Gets or sets the formating middle line
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.PatternFrom">
            <summary>
            Gets or sets start of PHI-BLAST pattern
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.PatternTo">
            <summary>
            Gets or sets end of PHI-BLAST pattern
            </summary>
        </member>
        <member name="P:MBF.Web.Blast.Hsp.Gaps">
            <summary>
            Gets are sets number of gaps in HSP
            </summary>
        </member>
        <member name="T:MBF.Web.ServiceRequestStatus">
            <summary>
            A simple summary of the status of a remote service request.
            </summary>
        </member>
        <member name="F:MBF.Web.ServiceRequestStatus.Queued">
            <summary>
            The request is queued at the server.
            </summary>
        </member>
        <member name="F:MBF.Web.ServiceRequestStatus.Waiting">
            <summary>
            The request is being processed by the server.
            </summary>
        </member>
        <member name="F:MBF.Web.ServiceRequestStatus.Ready">
            <summary>
            The request has been processed and results are available.
            </summary>
        </member>
        <member name="F:MBF.Web.ServiceRequestStatus.Error">
            <summary>
            An error has occurred while processing the request.
            </summary>
        </member>
        <member name="F:MBF.Web.ServiceRequestStatus.Canceled">
            <summary>
            The request has been cancelled at server.
            </summary>
        </member>
        <member name="T:MBF.Web.ServiceRequestInformation">
            <summary>
            A return value for service requests, giving the status 
            as well as additional information from the server.
            </summary>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.#ctor">
            <summary>
            Default Constructor: Initializes an instance of class ServiceRequestInformation
            </summary>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.Equals(System.Object)">
            <summary>
            Override the Equals implementation
            </summary>
            <param name="obj">The System.Object to compare with the current instance.</param>
            <returns>Returns true is given object is equal to current instance</returns>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.GetHashCode">
            <summary>
            generate a number (hash code) that corresponds to the value of an object
            </summary>
            <returns>Hash of the object</returns>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.Equals(MBF.Web.ServiceRequestInformation)">
            <summary>
            Determines whether the specified ServiceRequestInformation is equal to the current instance.
            </summary>
            <param name="obj">The ServiceRequestInformation to compare with the current instance.</param>
            <returns>Returns true is given ServiceRequestInformation is equal to current instance</returns>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.op_Equality(MBF.Web.ServiceRequestInformation,MBF.Web.ServiceRequestInformation)">
            <summary>
            Overloading ==
            </summary>
            <param name="object1">Object1 to be compared</param>
            <param name="object2">Object@ to be compared</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.op_Inequality(MBF.Web.ServiceRequestInformation,MBF.Web.ServiceRequestInformation)">
            <summary>
            Overloading !=
            </summary>
            <param name="object1">Object1 to be compared</param>
            <param name="object2">Object2 to be compared</param>
            <returns></returns>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Web.ServiceRequestInformation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:MBF.Web.ServiceRequestInformation.Status">
            <summary>
            The status summary.
            </summary>
        </member>
        <member name="P:MBF.Web.ServiceRequestInformation.StatusInformation">
            <summary>
            Additional information from the server.
            </summary>
        </member>
        <member name="T:MBF.VirtualData`1">
            <summary>
            This class maintains a data virtualization list for caching purpose
            Caching mechanism  works with T and least-used-out approach based on
            the last accessed time. The cache data (T) is maintained for 10 sec 
            as default. Data Virtualization uses this class to hold the partial 
            sequences based on max number of blocks.
            </summary>
            <typeparam name="T">Underlying type</typeparam>
        </member>
        <member name="F:MBF.VirtualData`1._timeout">
            <summary>
            time out to clean from cache
            </summary>
        </member>
        <member name="F:MBF.VirtualData`1._cachedData">
            <summary>
            cache holder
            </summary>
        </member>
        <member name="M:MBF.VirtualData`1.#ctor">
            <summary>
            Initializes a new instance of the VirtualData class.
            </summary>
        </member>
        <member name="M:MBF.VirtualData`1.IndexOf(MBF.CacheBox{`0})">
            <summary>
            Gets index of given item
            </summary>
            <param name="item">Item whose index is required</param>
            <returns>index of item</returns>
        </member>
        <member name="M:MBF.VirtualData`1.Insert(System.Int32,MBF.CacheBox{`0})">
            <summary>
            Insert into cached data
            </summary>
            <param name="index">index at which item has to be inserted</param>
            <param name="item">cachebox item</param>
        </member>
        <member name="M:MBF.VirtualData`1.RemoveAt(System.Int32)">
            <summary>
            remove at the index
            </summary>
            <param name="index">index at which item has to be removed</param>
        </member>
        <member name="M:MBF.VirtualData`1.GetData(System.Int32)">
            <summary>
            pass file block index to get the data from cache
            </summary>
            <param name="blockIndex">block index</param>
            <returns>Return the data from block</returns>
        </member>
        <member name="M:MBF.VirtualData`1.AddData(`0,System.Int64,System.Int64)">
            <summary>
            add block of data into cache
            </summary>
            <param name="blockType">Block Type</param>
            <param name="startRange">Block starting index</param>
            <param name="endRange">Block ending index</param>
        </member>
        <member name="M:MBF.VirtualData`1.GetAllData">
            <summary>
            get all the blocks currently
            </summary>
            <returns>List of Ts</returns>
        </member>
        <member name="M:MBF.VirtualData`1.ClearStaleData">
            <summary>
            clear unused data
            </summary>
        </member>
        <member name="M:MBF.VirtualData`1.Add(MBF.CacheBox{`0})">
            <summary>
            add into cached data
            </summary>
            <param name="item">cachebox item</param>
        </member>
        <member name="M:MBF.VirtualData`1.Clear">
            <summary>
            clear cache
            </summary>
        </member>
        <member name="M:MBF.VirtualData`1.Contains(MBF.CacheBox{`0})">
            <summary>
            Contatains or not
            </summary>
            <param name="item">cachebox item</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MBF.VirtualData`1.CopyTo(MBF.CacheBox{`0}[],System.Int32)">
            <summary>
            copyto array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:MBF.VirtualData`1.Remove(MBF.CacheBox{`0})">
            <summary>
            remove item from cache
            </summary>
            <param name="item">item to be removed</param>
            <returns>true or false</returns>
        </member>
        <member name="M:MBF.VirtualData`1.GetEnumerator">
            <summary>
            Get enumerator of cache T
            </summary>
            <returns>enumerator of cachebox</returns>
        </member>
        <member name="M:MBF.VirtualData`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of cache
            </summary>
            <returns>enumerator of cachebox</returns>
        </member>
        <member name="M:MBF.VirtualData`1.ForceMinimumTimeRemove">
            <summary>
            Force for single space
            </summary>
        </member>
        <member name="P:MBF.VirtualData`1.MaxNumberOfBlocks">
            <summary>
            Gets or sets maximum number of blocks per sequence
            </summary>
        </member>
        <member name="P:MBF.VirtualData`1.BlockSize">
            <summary>
            Gets or sets block size
            </summary>
        </member>
        <member name="P:MBF.VirtualData`1.Count">
            <summary>
            cache count
            </summary>
        </member>
        <member name="P:MBF.VirtualData`1.IsReadOnly">
            <summary>
            Default read only
            </summary>
        </member>
        <member name="P:MBF.VirtualData`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">index</param>
            <returns>cachebox of T</returns>
        </member>
        <member name="T:MBF.Util.Parser">
            <summary>
            A class for parsing strings to values of a desired type.
            </summary>
        </member>
        <member name="M:MBF.Util.Parser.TryParseAll``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IList{``0}@)">
            <summary>
            Tries to parse a sequence of strings into a list of values
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="stringSequence">The sequence of strings to parse</param>
            <param name="result">The list of values</param>
            <returns>true, if parsing worked; false, otherwise.</returns>
        </member>
        <member name="M:MBF.Util.Parser.ParseAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a sequences of values from a sequence of strings
            </summary>
            <typeparam name="T">The type to parse into</typeparam>
            <param name="stringSequence">The sequence of strings to parse</param>
            <returns>A sequence of values</returns>
        </member>
        <member name="M:MBF.Util.Parser.Parse(System.String,System.Type)">
            <summary>
            Tries to parse a string into the type given
            </summary>
            <param name="field">The string to parse</param>
            <param name="type">The type to parse into</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:MBF.Util.Parser.Parse``1(System.String)">
            <summary>
            Will parse s into T, provided T has a Parse(string) or TryParse(string s, out T t) method defined, or is one of the magical
            special cases we've implemented (including ICollection (comma delimited), Nullable and Enums).
            </summary>
            <typeparam name="T">The type to parse into</typeparam>
            <param name="s">the string to parse</param>
            <returns>the value</returns>
        </member>
        <member name="M:MBF.Util.Parser.TryParse``1(System.String,``0@)">
            <summary>
            Will parse s into T, provided T has a Parse(string) or TryParse(string s, out T t) method defined, or is one of the magical
            special cases we've implemented (including ICollection (comma delimited), Nullable and Enums).
            </summary>
            <typeparam name="T">the type to parse into</typeparam>
            <param name="s">the string to parse</param>
            <param name="t">the resulting value</param>
            <returns>true, if parsing worked; false, otherwise.</returns>
        </member>
        <member name="T:MBF.Phylogenetics.Node">
            <summary>
            Node : Node of the tree which can be either Leaf or another branch node.
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Node.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Node.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Node as object</returns>
        </member>
        <member name="P:MBF.Phylogenetics.Node.Children">
            <summary>
            Get Childern nodes
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Node.Nodes">
            <summary>
            Get list of Nodes
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Node.Edges">
            <summary>
            Get list of Edges
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Node.IsLeaf">
            <summary>
            Either node is leaf or not
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Node.IsRoot">
            <summary>
            Either node is root node or not
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Node.Name">
            <summary>
            If its leaf node, then use name
            </summary>
        </member>
        <member name="T:MBF.IO.XsvContigFormatter">
            <summary>
            This class will write a contig as a list of sparse sequences using the 
            XsvSparseFormatter. The first sequence is the consensus, and the rest are
            the assembled sequences offset from the consensus. 
            E.g. formatting a Contig with 2 assembled sequences, using '#' as sequence prefix and ',' as character separator.
            # 0,100,Consensus
            12,A
            29,T
            39,G
            #3,10,Fragment1
            9,A
            #25,20,Fragment2
            4,T
            14,G
            </summary>
        </member>
        <member name="M:MBF.IO.XsvContigFormatter.#ctor(System.Char,System.Char)">
            <summary>
             Creates a formatter for contigs using the given separator and 
             sequence start line prefix characacter.
            </summary>
            <param name="separator_">The character to separate position of the sequence 
             item from its symbol, and separate the offset, count and sequence ID in the 
             sequence start line.</param>
            <param name="sequenceIDPrefix_">The character to refix the sequence start line.</param>
        </member>
        <member name="M:MBF.IO.XsvContigFormatter.Format(MBF.Algorithms.Assembly.Contig,System.IO.TextWriter)">
            <summary>
            Formats a (sparse) contig to a charcter separated value file,
            writing the consensus first, followed by the sequence separator,
            and each assembled sequences followed by the sequence separator.
            The consensus has an offet of 0, while the assembed sequences have the
            offset as present in AssembledSequence.Position.
            </summary>
            <param name="contig">The contig to format as a set of sparse sequences.</param>
            <param name="writer">The text writer to write the formatted output to.</param>
        </member>
        <member name="T:MBF.IO.GenBank.PrecursorRNA">
            <summary>
            Any RNA species that is not yet the mature RNA product; may include 5' untranslated region (5'UTR), 
            coding sequences (CDS, exon), intervening sequences (intron) and 3' untranslated region (3'UTR).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.PrecursorRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new PrecursorRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PrecursorRNA.#ctor(System.String)">
            <summary>
            Creates new PrecursorRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PrecursorRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PrecursorRNA.#ctor(MBF.IO.GenBank.PrecursorRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PrecursorRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PrecursorRNA.Clone">
            <summary>
            Creates a new PrecursorRNA that is a copy of the current PrecursorRNA.
            </summary>
            <returns>A new PrecursorRNA that is a copy of this PrecursorRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PrecursorRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscRecombination">
            <summary>
            Site of any generalized, site-specific or replicative recombination event where there is a breakage and 
            reunion of duplex DNA that cannot be described by other recombination keys or qualifiers of source key (/proviral).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRecombination.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscRecombination feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRecombination.#ctor(System.String)">
            <summary>
            Creates new MiscRecombination feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscRecombination.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRecombination.#ctor(MBF.IO.GenBank.MiscRecombination)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscRecombination instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscRecombination.Clone">
            <summary>
            Creates a new MiscRecombination that is a copy of the current MiscRecombination.
            </summary>
            <returns>A new MiscRecombination that is a copy of this MiscRecombination.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscRecombination.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MiscFeature">
            <summary>
            Region of biological interest which cannot be described by any other feature key; a new or rare feature.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MiscFeature.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MiscFeature feature item from the specified location.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscFeature.#ctor(System.String)">
            <summary>
            Creates new MiscFeature feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MiscFeature.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscFeature.#ctor(MBF.IO.GenBank.MiscFeature)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MiscFeature instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MiscFeature.Clone">
            <summary>
            Creates a new MiscFeature that is a copy of the current MiscFeature.
            </summary>
            <returns>A new MiscFeature that is a copy of this MiscFeature.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MiscFeature.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.LocationBuilder">
            <summary>
            This is the default implementation of the ILocationBuilder interface.
            This class builds the location for the specified location string
            and location string for the specified location instance.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LocationBuilder.GetLocation(System.String)">
            <summary>
            Returns a location for the specified location string.
            </summary>
            <param name="location">Location stirng.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationBuilder.GetLocationString(MBF.IO.GenBank.ILocation)">
            <summary>
            Returns a location string for the specified location.
            </summary>
            <param name="location">Location instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationBuilder.BuildLocation(System.String@)">
            <summary>
            Builds location from the specified location string.
            </summary>
            <param name="locationString">Location string.</param>
            <returns>A Location instance.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.LocationBuilder.BuilSubLocation(MBF.IO.GenBank.ILocation,System.String@)">
            <summary>
            Builds the sublocations from the specified string and places in the specified location.
            </summary>
            <param name="location">Location instance.</param>
            <param name="locationString">Location string.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LocationBuilder.GetNextIndex(System.String)">
            <summary>
            Returns an integer index which indicates the next ","  or ")" character.
            </summary>
            <param name="location">Location string.</param>
        </member>
        <member name="T:MBF.IO.GenBank.CrossReferenceType">
            <summary>
            A CrossReferenceType specifies whether the DBLink is 
            refering to project or a Trace Assembly Archive.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.CrossReferenceType.None">
            <summary>
            None - CrossReferenceType is unspecified.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.CrossReferenceType.Project">
            <summary>
            Project.
            </summary>
        </member>
        <member name="F:MBF.IO.GenBank.CrossReferenceType.TraceAssemblyArchive">
            <summary>
            Trace Assembly Archive.
            </summary>
        </member>
        <member name="T:MBF.IO.Bed.BedFormatter">
            <summary>
            Formats lists of ISequenceRange or SequenceRangeGroupings into a file
            formatted in the BED format.
            
            Info for the specification of this format can be found at:
            http://genome.ucsc.edu/FAQ/FAQformat
            
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedFormatter.Format(System.Collections.Generic.IList{MBF.ISequenceRange},System.String)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedFormatter.Format(System.Collections.Generic.IList{MBF.ISequenceRange},System.IO.TextWriter)">
            <summary>
            Writes out a list of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedFormatter.Format(MBF.SequenceRangeGrouping,System.String)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            file location.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedFormatter.Format(MBF.SequenceRangeGrouping,System.IO.TextWriter)">
            <summary>
            Writes out a grouping of ISequenceRange objects to a specified
            text writer.
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedFormatter.Name">
            <summary>
            The name of this format: BED
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedFormatter.Description">
            <summary>
            A short description of the format
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedFormatter.FileTypes">
            <summary>
            Known file extensions for the BED format
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Translation.Transcription">
            <summary>
            Provides basic nucleotide transcription across DNA and RNA sequences.
            Static methods in the class provide lookup for single nucleotide
            complements as well as creating RNA (transcription) or DNA (reverse
            transcription) from a DNA or RNA sequence, respectively.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Transcription.GetRnaComplement(MBF.Nucleotide)">
            <summary>
            Returns the complement nucleotide from DNA to RNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Transcription.GetDnaComplement(MBF.Nucleotide)">
            <summary>
            Returns the complement nucleotide from RNA to DNA. This also
            respects ambiguous characters in the DNA and RNA alphabet.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Transcription.Transcribe(MBF.ISequence)">
             <summary>
             Transcribes a DNA sequence into an RNA sequence. The length
             of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence dna = new Sequence(Alphabets.DNA, "TACCGC");
             Sequence rna = Transcription.Transcribe(dna);
            
             rna.ToString() would produce "AUGGCG"
             </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Transcription.ReverseTranscribe(MBF.ISequence)">
             <summary>
             Does reverse transcription from an RNA sequence into an DNA sequence.
             The length of the resulting sequence will equal the length of the source
             sequence. Gap and ambiguous characters will also be transcribed.
             
             For example:
             
             Sequence rna = new Sequence(Alphabets.RNA, "UACCGC");
             Sequence dna = Transcription.ReverseTranscribe(rna);
            
             dna.ToString() would produce "ATGGCG"
             </summary>
        </member>
        <member name="T:MBF.Algorithms.Translation.Codons">
            <summary>
            A class which stores a table of mappings from triplets of RNA nucleotides
            to Amino Acids. This mapping comes from the standard Axiom of Genetics
            triplet rule. This class provides the basic lookup functionality from the
            codons. The ProteinTranslation class provides methods for translating
            whole RNA sequences.
            
            In order to perform mapping from DNA, it is suggested that you first
            use the Transcription class to create the RNA sequence
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Codons.Lookup(MBF.Nucleotide,MBF.Nucleotide,MBF.Nucleotide)">
            <summary>
            Lookup an amino acid based on a triplet of nucleotides. U U U for instance
            will result in Phenylalanine.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Translation.Codons.Lookup(MBF.ISequence,System.Int32)">
            <summary>
            Lookup an amino acid within a sequence starting a certian offset.
            </summary>
            <param name="sequence">The source sequence to lookup from.</param>
            <param name="offset">
            The offset within the sequence from which to look at the next three
            nucleotides. Note that this offset begins its count at zero. Thus
            looking at a sequence described by "AUGGCG" and using a offset of 0
            would lookup the amino acid for codon "AUG" while using a offset of 1
            would lookup the amino acid for codon "UGG".
            </param>
            <returns>An amino acid from the protein alphabet</returns>
        </member>
        <member name="T:MBF.Algorithms.Alignment.NUCmerAttributes">
            <summary>
            This class extends MUMmerAttributes and adds NUCmer specific attributes
            required to run the NUCmer algorithm.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Alignment.MUMmerAttributes">
            <summary>
            This class extends PairwiseAlignmentAttributes and adds MUMmer specific attributes
            required to run the MUMmer algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.MUMmerAttributes.LengthOfMUM">
            <summary>
            Describes the Minimal length Maximal Unique Match parameter
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.MUMmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the MUMmerAttributes class.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAttributes.FixedSeparation">
            <summary>
            Describes maximum fixed diagonal difference
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAttributes.MaximumSeparation">
            <summary>
            Describes maximum separation between the adjacent matches in clusters
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAttributes.MinimumScore">
            <summary>
            Describes Minimum Output Score
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAttributes.SeparationFactor">
            <summary>
            Describes Separation Factor
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.NUCmerAttributes.BreakLength">
            <summary>
            Describes number of bases to be extended before stopping alignment
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.NUCmerAttributes.#ctor">
            <summary>
            Initializes a new instance of the NUCmerAttributes class.
            </summary>
        </member>
        <member name="T:MBF.Matrix.RenameColsView`3">
            <summary>
            A wrapper around a parent matrix that allows col keys to be renamed and/or expanded. If expanded, then multiple keys will
            point to the same underlying row, meaning change to a value in one row will be reflected in another row.
            Also, because it is a view, any changes made to the values of this matrix or the parent matrix are reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="P:MBF.Matrix.RenameColsView`3.ParentMatrix">
            <summary>
            The matrix that this view wraps.
            </summary>
        </member>
        <member name="P:MBF.Matrix.RenameColsView`3.NewKeyToOldKey">
            <summary>
            A read-only dictionary giving the mapping from the col keys of this matrix to the col keys of its parent matrix.
            </summary>
        </member>
        <member name="P:MBF.Matrix.RenameColsView`3.NewIndexToOldIndex">
            <summary>
            A read-only dictionary giving the mapping from the col index of this matrix to the col index of it's parent matrix
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualQualitativeSequenceList">
            <summary>
            A VirtualQualitativeSequenceList is used in data virtualization scenarios to maintain a
            large list of sequences. When all the available sequences cannot be accommodated at once
            in memory, this list fetches blocks of sequences from the cache or from the file on request.
            For example, if a FastA file has more than one sequence and data virtualization returns this class, then
            each sequence is loaded from the FastA file when it is first accessed.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList.KBytes">
            <summary>
            1 KB
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList.MaximumDictionaryLength">
            <summary>
            The maximum allowable number of items in the dictionary before the weak
            references are forcibly removed to facilitate optimal use of available memory.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList._count">
            <summary>
            Number of items in the actual file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList._sidecarProvider">
            <summary>
            SequencePointer provider from sidecar file
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList._sequenceParser">
            <summary>
            Parser used to parse sequence data on request
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceList._sequenceDictionary">
            <summary>
            Contains the index of the sequence in the actual file, and a weak reference to that sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.#ctor(MBF.IO.SidecarFileProvider,MBF.IO.IVirtualSequenceParser,System.Int32)">
            <summary>
            Initializes a new instance of the VirtualQualitativeSequenceList class with a specified provider,
            a specified parser, and a specifed sequence count.
            </summary>
            <param name="provider">SequencePointer provider from sidecar file.</param>
            <param name="parser">Parser used to parse sequence data on request.</param>
            <param name="count">Number of items in the actual file.</param>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#Add(MBF.ISequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#Clear">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#Contains(MBF.ISequence)">
            <summary>
            Determines whether a specific sequence is in the virtual sequence list.
            </summary>
            <param name="item">The sequence to locate in the list.</param>
            <returns>true if the sequence is found in the list; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#CopyTo(MBF.ISequence[],System.Int32)">
            <summary>
            Copies the entire virtual sequence list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current list. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#Remove(MBF.ISequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#IEnumerable{MBF#ISequence}#GetEnumerator">
            <summary>
            Get the enumerator to the sequences in the list.
            </summary>
            <returns>The enumerator to the sequences in the list.</returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator to the qualitative sequences in the list.
            </summary>
            <returns>The enumerator to the qualitative sequences in the list.</returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.IndexOf(MBF.IQualitativeSequence)">
            <summary>
            Returns the index of the first sequence matching the sequence
            passed in to the parameter. This does not do a value-based
            comparison. The match must be the exact same IQualitativeSequence.
            </summary>
            <returns>the zero-based index of the sequence if found; otherwise, -1</returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.Insert(System.Int32,MBF.IQualitativeSequence)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#IList{MBF#IQualitativeSequence}#RemoveAt(System.Int32)">
            <summary>
            This method is not supported since VirtualSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.Add(MBF.IQualitativeSequence)">
            <summary>
            This method is not supported since VirtualQualitativeSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#IQualitativeSequence}#Clear">
            <summary>
            This method is not supported since VirtualQualitativeSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.Contains(MBF.IQualitativeSequence)">
            <summary>
            Determines whether a specific qualitative sequence is in the virtual qualitative sequence list.
            </summary>
            <param name="item">The qualitative sequence to locate in the list.</param>
            <returns>true if the qualitative sequence is found in the list; otherwise, false</returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.CopyTo(MBF.IQualitativeSequence[],System.Int32)">
            <summary>
            Copies the entire virtual qualitative sequence list to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the current list. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.Remove(MBF.IQualitativeSequence)">
            <summary>
            This method is not supported since VirtualQualitativeSequenceList is read-only.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceList.GetEnumerator">
            <summary>
            Get the enumerator to the qualitative sequences in the list.
            </summary>
            <returns>The enumerator to the qualitative sequences in the list.</returns>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.CreateSequenceAsReadOnly">
            <summary>
            Gets or sets a value indicating whether to set the sequence to read-only
            when reading from the sidecar file.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#Count">
            <summary>
            Gets the number of sequences in the list.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#ISequence}#IsReadOnly">
            <summary>
            Gets the read-only status of the list.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.Item(System.Int32)">
            <summary>
            Gets the index of a qualitative sequence within the list.
            Throws a NotSupportedException when attempting to set the position
            since VirtualSequenceList is read-only.
            </summary>
            <param name="index">The zero-based index of the qualitative sequence in the list.</param>
            <returns>The qualitative sequence found at the specified index.</returns>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#IQualitativeSequence}#Count">
            <summary>
            Gets the number of qualitative sequences in the list.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceList.System#Collections#Generic#ICollection{MBF#IQualitativeSequence}#IsReadOnly">
            <summary>
            Gets the read-only status of the list.
            </summary>
        </member>
        <member name="T:MBF.IO.VirtualQualitativeSequenceEnumerator">
            <summary>
            Implementation of the enumerator for the VirtualQualitativeSequenceList.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceEnumerator._sequences">
            <summary>
            A list of qualitative sequences.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceEnumerator._index">
            <summary>
            The zero-based index of the sequence in the list.
            </summary>
        </member>
        <member name="F:MBF.IO.VirtualQualitativeSequenceEnumerator._disposed">
            <summary>
            Track whether disposed has been called.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceEnumerator.#ctor(System.Collections.Generic.IList{MBF.IQualitativeSequence})">
            <summary>
            Initializes an enumerator for the VirtualQualitativeSequenceList.
            </summary>
            <param name="virtualSequenceList"></param>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceEnumerator.Dispose">
            <summary>
            Disposes of any allocated memory.
            </summary>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes of any allocated memory.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MBF.IO.VirtualQualitativeSequenceEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the qualitative sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.IO.VirtualQualitativeSequenceEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="T:MBF.IO.BAM.Chunk">
            <summary>
            Class to hold start and end offsets of a BAM file chunk related to a bin.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.Chunk.ChunkStart">
            <summary>
            Gets or sets start offset of this chunk.
            </summary>
        </member>
        <member name="P:MBF.IO.BAM.Chunk.ChunkEnd">
            <summary>
            Gets or sets end offset of this chunk.
            </summary>
        </member>
        <member name="T:MBF.Library.Resources.LibraryResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MBF.Library.Resources.LibraryResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MBF.Library.Resources.LibraryResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MBF.Library.Resources.LibraryResource.Library">
             <summary>
               Looks up a localized string similar to 0.5K 500 20
            2K 2000 100
            10K 10000 1000
            50K 65000 13334
            100K 147500 40834.
             </summary>
        </member>
        <member name="T:MBF.UpdatedSequenceItem">
            <summary>
            Class to hold updated sequence item and type of update.
            </summary>
        </member>
        <member name="M:MBF.UpdatedSequenceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MBF.UpdatedSequenceItem.#ctor(MBF.UpdatedSequenceItem)">
            <summary>
            Creates UpdatedSequenceItem from the specified updatedSequenceItem.
            </summary>
            <param name="updatedSequenceItem">UpdatedSequenceItem instance.</param>
        </member>
        <member name="M:MBF.UpdatedSequenceItem.#ctor(MBF.ISequenceItem,MBF.UpdateType)">
            <summary>
            Creates UpdatedSequenceItem from the specified sequence item and update type.
            </summary>
            <param name="sequenceItem">Sequence item.</param>
            <param name="type">Update type.</param>
        </member>
        <member name="P:MBF.UpdatedSequenceItem.SequenceItem">
            <summary>
            Gets or sets the updated sequence item.
            </summary>
        </member>
        <member name="P:MBF.UpdatedSequenceItem.Type">
            <summary>
            Gets or sets the update type.
            </summary>
        </member>
        <member name="T:MBF.MoleculeType">
            <summary>
            A MoleculeType specifies which type of biological sequence is stored in an ISequence.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.Invalid">
            <summary>
            Not a valid molecule type.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.NA">
            <summary>
            Nucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.DNA">
            <summary>
            Deoxyrobonucleic acid.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.RNA">
            <summary>
            Ribonucleic acid of an unspecified type.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.tRNA">
            <summary>
            Transfer RNA.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.rRNA">
            <summary>
            Ribosomal RNA.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.mRNA">
            <summary>
            Messenger RNA.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.uRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.snRNA">
            <summary>
            Small nuclear RNA.
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.snoRNA">
            <summary>
            Small nucleolar RNA (often referred to as guide RNA).
            </summary>
        </member>
        <member name="F:MBF.MoleculeType.Protein">
            <summary>
            Amino acid chain.
            </summary>
        </member>
        <member name="T:MBF.IO.SimpleSnpParser">
            <summary>
            Simple SNP Parser that uses an XsvSnpReader for parsing files with 
            chromosome number, position, allele 1 and allele 2 in tab separated 
            columns into sequences with the first allele.
            </summary>
        </member>
        <member name="M:MBF.IO.SimpleSnpParser.#ctor(MBF.Encoding.IEncoding,MBF.IAlphabet)">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            given alphabet and encoding.
            NOTE: Given that this parses Snps, should we always use the DnaAlphabet?
            </summary>
            <param name="encoding">Encoding to use in the sequence parsed.</param>
            <param name="alphabet">Alphabet to use in the sequence parsed.</param>
        </member>
        <member name="M:MBF.IO.SimpleSnpParser.#ctor(MBF.Encoding.IEncoding)">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            given encoding and the DnaAlphabet.
            </summary>
            <param name="encoding">Encoding to use in the sequence parsed.</param>
        </member>
        <member name="M:MBF.IO.SimpleSnpParser.#ctor">
            <summary>
            Creates a SimpleSnpParser which generates parsed sequences that use the the 
            Ncbi4NAEncoding and DnaAlphabet.
            </summary>
        </member>
        <member name="M:MBF.IO.SimpleSnpParser.GetSnpReader(System.IO.TextReader)">
            <summary>
            Returns a XsvSnpReader that wraps the given TextReader. 
            Reads SNP Files with the following tab separated value format:
            chrom   pos     allele1 allele2
            1       45162   C       T
            1       72434   G       A
            </summary>
            <param name="reader"></param>
            <returns>Returns the ISnpReader created for the TextReader</returns>
        </member>
        <member name="P:MBF.IO.SimpleSnpParser.Name">
            <summary>
            Gets the name of the parser. 
            </summary>
        </member>
        <member name="P:MBF.IO.SimpleSnpParser.Description">
            <summary>
            Gets the description of the parser.
            </summary>
        </member>
        <member name="P:MBF.IO.SimpleSnpParser.FileTypes">
            <summary>
            Gets the filetypes supported by the parser.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.ThreePrimeUtr">
            <summary>
            ThreePrimeUTR (3'UTR) is a Region at the 3' end of a mature transcript (following the stop codon) that 
            is not translated into a protein.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.ThreePrimeUtr.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new ThreePrimeUTR feature item from the specified location.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ThreePrimeUtr.#ctor(System.String)">
            <summary>
            Creates new ThreePrimeUTR feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the ThreePrimeUTR.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ThreePrimeUtr.#ctor(MBF.IO.GenBank.ThreePrimeUtr)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other ThreePrimeUTR instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.ThreePrimeUtr.Clone">
            <summary>
            Creates a new ThreePrimeUTR that is a copy of the current ThreePrimeUTR.
            </summary>
            <returns>A new ThreePrimeUTR that is a copy of this ThreePrimeUTR.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.ThreePrimeUtr.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceSegment">
            <summary>
            Segment provides the information on the order in which this entry appears in a
            series of discontinuous sequences from the same molecule.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSegment.Clone">
            <summary>
            Creates a new SequenceSegment that is a copy of the current SequenceSegment.
            </summary>
            <returns>A new SequenceSegment that is a copy of this SequenceSegment.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceSegment.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceSegment that is a copy of the current SequenceSegment.
            </summary>
            <returns>A new object that is a copy of this SequenceSegment.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceSegment.Current">
            <summary>
            Current segment number.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceSegment.Count">
            <summary>
            Total number of segments.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.SequenceFeatures">
            <summary>
            Contains information about genes and gene products,
            as well as regions of biological significance reported 
            in the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceFeatures.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceFeatures.#ctor(MBF.IO.GenBank.SequenceFeatures)">
            <summary>
            Private Constructor for clone method.
            </summary>
            <param name="other">SequenceFeatures instance to clone.</param>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceFeatures.GetFeatures(System.String)">
            <summary>
            Returns list of feature items for the specified feature key.
            </summary>
            <param name="featureKey">Feature key.</param>
            <returns>Returns List of feature items.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceFeatures.Clone">
            <summary>
            Creates a new SequenceFeatures that is a copy of the current SequenceFeatures.
            </summary>
            <returns>A new SequenceFeatures that is a copy of this SequenceFeatures.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.SequenceFeatures.System#ICloneable#Clone">
            <summary>
            Creates a new SequenceFeatures that is a copy of the current SequenceFeatures.
            </summary>
            <returns>A new object that is a copy of this SequenceFeatures.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.All">
            <summary>
            Lists all features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Minus10Signals">
            <summary>
            Returns list of Minus10Signal (-10_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Minus35Signals">
            <summary>
            Returns list of Minus35Signal (-35_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.ThreePrimeUTRs">
            <summary>
            Returns list of ThreePrimeUTR (3'UTR) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.FivePrimeUTRs">
            <summary>
            Returns list of FivePrimeUTR (5'UTR) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Attenuators">
            <summary>
            Returns list of Attenuator features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.CAATSignals">
            <summary>
            Returns list of CAATSignal (CAAT_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.CodingSequences">
            <summary>
            Returns list of CodingSequence (CDS) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.DisplacementLoops">
            <summary>
            Returns list of DisplacementLoop (D-loop) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Enhancers">
            <summary>
            Returns list of Enhancer features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Exons">
            <summary>
            Returns list of Exon features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.GCSignals">
            <summary>
            Returns list of GCSingal (GC_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Genes">
            <summary>
            Returns list of Gene features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.InterveningDNAs">
            <summary>
            Returns list of InterveningDNA (iDNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Introns">
            <summary>
            Returns list of Intron features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.LongTerminalRepeats">
            <summary>
            Returns list of LongTerminalRepeat (LTR) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MaturePeptides">
            <summary>
            Returns list of MaturePeptide (mat_peptide) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscBindings">
            <summary>
            Returns list of MiscBinding (misc_binding) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscDifferences">
            <summary>
            Returns list of MiscDifference (misc_difference) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscFeatures">
            <summary>
            Returns list of MiscFeature (misc_feature) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscRecombinations">
            <summary>
            Returns list of MiscRecombination (misc_recomb) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscRNAs">
            <summary>
            Returns list of MiscRNA (misc_RNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscSignals">
            <summary>
            Returns list of MiscSignal (misc_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MiscStructures">
            <summary>
            Returns list of MiscStructure (misc_structure) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.ModifiedBases">
            <summary>
            Returns list of ModifiedBase (modified_base) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.MessengerRNAs">
            <summary>
            Returns list of MessengerRNA (mRNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.NonCodingRNAs">
            <summary>
            Returns list of NonCodingRNA (ncRNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.OperonRegions">
            <summary>
            Returns list of OperonRegion (Operon) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.PolyASignals">
            <summary>
            Returns list of PolyASignal (polyA_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.PolyASites">
            <summary>
            Returns list of PolyASite (polyA_site) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.PrecursorRNAs">
            <summary>
            Returns list of PrecursorRNA (precursor_RNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Promoters">
            <summary>
            Returns list of Promoter features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.ProteinBindingSites">
            <summary>
            Returns list of ProteinBindingSite (protein_bind) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.RibosomeBindingSites">
            <summary>
            Returns list of RibosomeBindingSite (RBS) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.ReplicationOrigins">
            <summary>
            Returns list of ReplicationOrigin (rep_origin) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.RepeatRegions">
            <summary>
            Returns list of RepeatRegion (repeat_region) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.RibosomalRNAs">
            <summary>
            Returns list of RibosomalRNA (rRNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.SignalPeptides">
            <summary>
            Returns list of SignalPeptide (sig_peptide) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.StemLoops">
            <summary>
            Returns list of StemLoop (stem_loop) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.TATASignals">
            <summary>
            Returns list of TATASignal (TATA_signal) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Terminators">
            <summary>
            Returns list of Terminator features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.TransferMessengerRNAs">
            <summary>
            Returns list of TransferMessengerRNA (tmRNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.TransitPeptides">
            <summary>
            Returns list of TransitPeptide (transit_peptide) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.TransferRNAs">
            <summary>
            Returns list of TransferRNA (tRNA) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.UnsureSequenceRegions">
            <summary>
            Returns list of UnsureSequenceRegion (unsure) features.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.SequenceFeatures.Variations">
            <summary>
            Returns list of Variation features.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.PolyASignal">
            <summary>
            Recognition region necessary for endonuclease cleavage of an RNA transcript that is followed by polyadenylation.
            Consensus=AATAAA.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASignal.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new PolyASignal feature item from the specified location.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASignal.#ctor(System.String)">
            <summary>
            Creates new PolyASignal feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the PolyASignal.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASignal.#ctor(MBF.IO.GenBank.PolyASignal)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other PolyASignal instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.PolyASignal.Clone">
            <summary>
            Creates a new PolyASignal that is a copy of the current PolyASignal.
            </summary>
            <returns>A new PolyASignal that is a copy of this PolyASignal.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.PolyASignal.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MessengerRNA">
            <summary>
             Messenger RNA (mRNA); includes 5 prime untranslated region (5'UTR), coding sequences (CDS, exon)
             and 3 prime untranslated region (3'UTR).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MessengerRNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MessengerRNA feature item from the specified location.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MessengerRNA.#ctor(System.String)">
            <summary>
            Creates new MessengerRNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MessengerRNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MessengerRNA.#ctor(MBF.IO.GenBank.MessengerRNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MessengerRNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MessengerRNA.Clone">
            <summary>
            Creates a new MessengerRNA that is a copy of the current MessengerRNA.
            </summary>
            <returns>A new MessengerRNA that is a copy of this MessengerRNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MessengerRNA.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.InterveningDNA">
            <summary>
            Intervening DNA (iDNA) is a DNA which is eliminated through any of several kinds of recombination.
            For example, in the somatic processing of immunoglobulin genes.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.InterveningDNA.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new InterveningDNA feature item from the specified location.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.InterveningDNA.#ctor(System.String)">
            <summary>
            Creates new InterveningDNA feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the InterveningDNA.</param>
        </member>
        <member name="M:MBF.IO.GenBank.InterveningDNA.#ctor(MBF.IO.GenBank.InterveningDNA)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other InterveningDNA instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.InterveningDNA.Clone">
            <summary>
            Creates a new InterveningDNA that is a copy of the current InterveningDNA.
            </summary>
            <returns>A new InterveningDNA that is a copy of this InterveningDNA.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.InterveningDNA.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Exon">
            <summary>
            Exon is a region of genome that codes for portion of spliced mRNA, rRNA and tRNA; may contain 5'UTR,
            all CDSs and 3' UTR.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Exon.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Exon feature item from the specified location.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Exon.#ctor(System.String)">
            <summary>
            Creates new Exon feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the Exon.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Exon.#ctor(MBF.IO.GenBank.Exon)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Exon instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Exon.Clone">
            <summary>
            Creates a new Exon that is a copy of the current Exon.
            </summary>
            <returns>A new Exon that is a copy of this Exon.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Exon.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.Bed.BedParser">
            <summary>
            Parses ISequenceRange objects that are formatted according to the BED
            format. This is a format of tab delimited text where the each line
            represents one range and each defines an ID, start and stop index.
            
            Info for the specification of this format can be found at:
            http://genome.ucsc.edu/FAQ/FAQformat
            
            In this format indices start their count from zero. The chromosome start
            index is inclusive and the chromosome end index is exclusive.
            
            There are three required fields in each line as described above. There
            are also 9 option fields. These are: name, score, strand, thickStartm
            thickEnd, itemRgb, blockCount, blockSizes, and blockStarts.
            
            This parser does not support the bigBED format.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedParser.ParseRange(System.String)">
            <summary>
            Parse a set of ISequenceRange objects from a file.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedParser.ParseRangeGrouping(System.String)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a file.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedParser.ParseRange(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects from a reader.
            </summary>
        </member>
        <member name="M:MBF.IO.Bed.BedParser.ParseRangeGrouping(System.IO.TextReader)">
            <summary>
            Parse a set of ISequenceRange objects into a SequenceRange
            grouping from a reader.
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedParser.Name">
            <summary>
            The name of this parser: BED
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedParser.Description">
            <summary>
            A short description of the BED parser
            </summary>
        </member>
        <member name="P:MBF.IO.Bed.BedParser.FileTypes">
            <summary>
            Known file extensions for BED files
            </summary>
        </member>
        <member name="T:MBF.ByteArray">
            <summary>
            ByteArray holds the encoded values and provides array like access to the data stored in it.
            This class internally stores compressed indices of encoded values into a byte array to reduce the 
            memory required to hold sequence data.
            For example:
            Ncbi2NAEncoding contains four encoded values to store an index of an encoded value; two bits are sufficient.
            Thus when creating this class, if Ncbi2NAEncoding is specified, then the index of specified encoded values 
            are stored in a byte array so that each byte will contain a maximum of four encoded values.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
        </member>
        <member name="F:MBF.ByteArray._defaultMask">
            <summary>
            Default mask value.
            Binary: 00000000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFirstFourBitValue">
            <summary>
            Mask for four bit value stored in first position from leftside in a byte.
            Binary: 11110000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForSecondFourBitValue">
            <summary>
            Mask for four bit value stored in second position from leftside in a byte.
            Binary: 00001111
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFirstTwoBitValue">
            <summary>
            Mask for two bit value stored in first position from leftside in a byte.
            Binary: 11000000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForSecondTwoBitValue">
            <summary>
            Mask for two bit value stored in second position from leftside in a byte.
            Binary: 00110000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForThirdTwoBitValue">
            <summary>
            Mask for two bit value stored in third position from leftside in a byte.
            Binary: 00001100
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFourthTwoBitValue">
            <summary>
            Mask for two bit value stored in fourth position from leftside in a byte.
            Binary: 00000011
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFirstOneBitValue">
            <summary>
            Mask for one bit value stored in first position from leftside in a byte.
            Binary: 10000000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForSecondOneBitValue">
            <summary>
            Mask for one bit value stored in second position from leftside in a byte.
            Binary: 01000000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForThirdOneBitValue">
            <summary>
            Mask for one bit value stored in third position from leftside in a byte.
            Binary: 00100000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFourthOneBitValue">
            <summary>
            Mask for one bit value stored in fourth position from leftside in a byte.
            Binary: 00010000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForFifthOneBitValue">
            <summary>
            Mask for one bit value stored in fifth position from leftside in a byte.
            Binary: 00001000
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForSixthOneBitValue">
            <summary>
            Mask for one bit value stored in sixth position from leftside in a byte.
            Binary: 00000100
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForSeventhOneBitValue">
            <summary>
            Mask for one bit value stored in seventh position from leftside in a byte.
            Binary: 00000010
            </summary>
        </member>
        <member name="F:MBF.ByteArray._maskForEighthOneBitValue">
            <summary>
            Mask for one bit value stored in eighth position from leftside in a byte.
            Binary: 00000001
            </summary>
        </member>
        <member name="F:MBF.ByteArray._bitsRequired">
            <summary>
            Holds total number of bits required to store an ISequence item.
            </summary>
        </member>
        <member name="F:MBF.ByteArray._valuesPerByte">
            <summary>
            Specifies number of values can be stored in a byte.
            </summary>
        </member>
        <member name="F:MBF.ByteArray._encodedValues">
            <summary>
            Holds all encoded values in the specified Encoding.
            </summary>
        </member>
        <member name="F:MBF.ByteArray._compressedBytes">
            <summary>
            Array to hold bytes.
            </summary>
        </member>
        <member name="M:MBF.ByteArray.#ctor(MBF.Encoding.IEncoding,System.Collections.Generic.IList{System.Byte})">
            <summary>
            Creates new ByteArray instance from the specified encoding and list of byte values.
            ByteArray compacts and stores the byte values depending on the specified encoding.
            
            For example: Ncbi2NAEncoding contains four values, In this case two bits are sufficient 
            to store index of an encoded value thus four encoded values can be stored in to a byte.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
            <param name="encoding">Encoding to which the specified values are belongs to.</param>
            <param name="values">Encoded values.</param>
        </member>
        <member name="M:MBF.ByteArray.#ctor(MBF.Encoding.IEncoding,System.Int32)">
            <summary>
            Creates new ByteArray instance from the specified encoding which can store 
            specified size of encoded values.
            ByteArray compacts and stores the byte values depending on the specified encoding.
            
            For example: Ncbi2NAEncoding contains four values, In this case two bits are sufficient 
            to store index of an encoded value thus four encoded values can be stored in to a byte.
            
            Note that data will be compressed when the total number of encoded values present in the 
            specified IEncoding is less than or equal to 16, otherwise it stores specified encoded values 
            in the byte array.
            </summary>
            <param name="encoding">Encoding to which the specified values are belongs to.</param>
            <param name="size">Required size of ByteArray.</param>
        </member>
        <member name="M:MBF.ByteArray.#ctor(MBF.ByteArray)">
            <summary>
            Constructor used for clone method.
            </summary>
            <param name="byteArray">ByteArray instance.</param>
        </member>
        <member name="M:MBF.ByteArray.Clone">
            <summary>
            Creates a clone copy of this instance.
            </summary>
            <returns>New instance of ByteArray.</returns>
        </member>
        <member name="M:MBF.ByteArray.SetEncoding(MBF.Encoding.IEncoding)">
            <summary>
            Sets required fields from the specified encoding.
            </summary>
            <param name="encoding">IEncoding instance.</param>
        </member>
        <member name="M:MBF.ByteArray.SetByteValue(System.Int32,System.Byte)">
            <summary>
            Stores specified encoded value.
            </summary>
            <param name="index">Index of value.</param>
            <param name="value">Encoded value.</param>
        </member>
        <member name="M:MBF.ByteArray.GetByteValue(System.Int32)">
            <summary>
            Returns the encoded value for the specified index.
            </summary>
            <param name="index">Index of the value to be required.</param>
            <returns>Returns the encoded value.</returns>
        </member>
        <member name="M:MBF.ByteArray.GetBitsRequired(System.Int32)">
             <summary>
             Returns the number of bits required to store the specified value.
            
             For example if the input value is 3, the number of bits needed to store
             3 is 2 bits (Binary - 11). Hence this method would return 2 bits as the
             output.
             </summary>
             <param name="value">Value for which the number of required bits has to be determined.</param>
             <returns>Number of bits required to store the value.</returns>
        </member>
        <member name="M:MBF.ByteArray.GetByteMask(System.Int32,System.Int32)">
            <summary>
            Returns mask value that can be used while reading each value present in the compressed byte.
            Note that position is one based and starts from lefthand side of the byte.
            
            For example: 
            If 2 four bit values, 1011 and 1101 are placed in a byte then the value of byte will be
            10111101. 
            Following are the steps to read first value i.e 1011.
            
            Step1: "bitwise AND" with _maskForFirstFourBitValue.
                    10111101 &amp; 11110000 = 10110000
            Step2: Right shift the result from Step1 by 4 position.
                    10110000 >> 4 = 00001011
            </summary>
            <param name="position">Position of the value in the byte.</param>
            <param name="sizeInBits">Size of each value in bits.</param>
            <returns>Returns the mask value.</returns>
        </member>
        <member name="M:MBF.ByteArray.GetEnumerator">
            <summary>
            Returns enumerator for this instance.
            </summary>
            <returns>Returns IEnumerator for ByteArray.</returns>
        </member>
        <member name="M:MBF.ByteArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator for this instance.
            </summary>
            <returns>Returns IEnumerator for ByteArray.</returns>
        </member>
        <member name="M:MBF.ByteArray.System#ICloneable#Clone">
            <summary>
            Creates a clone copy of this instance.
            </summary>
            <returns>New instance of ByteArray.</returns>
        </member>
        <member name="P:MBF.ByteArray.Count">
            <summary>
            Total number of values stored in this instance.
            </summary>
        </member>
        <member name="P:MBF.ByteArray.Item(System.Int32)">
            <summary>
            Gets or sets the encoded value at specified index.
            Note that the encoded value should be from the encoding specified 
            while creating this instance, otherwise exception will occur.
            </summary>
            <param name="index">Zero based index.</param>
            <returns>Encoded value.</returns>
        </member>
        <member name="T:MBF.ByteArrayEnumerator">
            <summary>
            Enumerator implementation for the ByteArray class
            </summary>
        </member>
        <member name="F:MBF.ByteArrayEnumerator._byteArray">
            <summary>
            Holds a ByteArray.
            </summary>
        </member>
        <member name="F:MBF.ByteArrayEnumerator._index">
            <summary>
            Current index of ByteArray.
            </summary>
        </member>
        <member name="M:MBF.ByteArrayEnumerator.#ctor(MBF.ByteArray)">
            <summary>
            Constructs an enumerator for a ByteArray object.
            </summary>
        </member>
        <member name="M:MBF.ByteArrayEnumerator.Dispose">
            <summary>
            Takes care of any allocated memory
            </summary>
        </member>
        <member name="M:MBF.ByteArrayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next item.
            </summary>
            <returns>True if the enumerator can advance. False if the end of the ByteArray is reached.</returns>
        </member>
        <member name="M:MBF.ByteArrayEnumerator.Reset">
            <summary>
            Resets the enumerator to the start of the ByteArray.
            </summary>
        </member>
        <member name="P:MBF.ByteArrayEnumerator.Current">
            <summary>
            The current item reference for the enumerator.
            </summary>
        </member>
        <member name="P:MBF.ByteArrayEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current item reference for the enumerator
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.SequenceAssemblers">
            <summary>
            SequenceAssemblers class is an abstraction class which provides instances
            and lists of all Assemblers currently supported by MBF. 	
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.SequenceAssemblers.simple">
            <summary>
            A singleton instance of SimpleSequenceAssembler which implements
            a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Assembly.SequenceAssemblers.all">
            <summary>
            List of sequence assemblers.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.SequenceAssemblers.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.SequenceAssemblers.GetAssemblers(System.Boolean)">
            <summary>
            Get all registered assemblers in core folder and addins (optional) folders
            </summary>
            <param name="includeAddinFolder">include add-ins folder or not</param>
            <returns>List of registered assemblers</returns>
        </member>
        <member name="P:MBF.Algorithms.Assembly.SequenceAssemblers.Simple">
            <summary>
            Gets an instance of SimpleSequenceAssembler which implements
            a simple greedy assembly algorithm for DNA.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Assembly.SequenceAssemblers.All">
            <summary>
            Gets the list of all assemblers which is supported by the framework.
            </summary>
        </member>
        <member name="T:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.AmbiguousDna">
             <summary>
               Looks up a localized string similar to AmbiguousDNA
             A   T   G   C   S   W   R   Y   K   M   B   V   H   D   N
             5  -4  -4  -4  -4   1   1  -4  -4   1  -4  -1  -1  -1   0
            -4   5  -4  -4  -4   1  -4   1   1  -4  -1  -4  -1  -1   0
            -4  -4   5  -4   1  -4   1  -4   1  -4  -1  -1  -4  -1   0
            -4  -4  -4   5   1  -4  -4   1  -4   1  -1  -1  -1  -4   0
            -4  -4   1   1	 5  -4  -2  -2  -2  -2  -1  -1  -3  -3   0
             1   1  -4  -4  -4   5  -2  -2  -2  -2  -3  -3  -1  -1   0
             1  -4   1  -4  -2  -2   5  -4  -2  -2  -3  -1  -3  -1   0
            -4   1  -4   1  -2  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.AmbiguousRna">
             <summary>
               Looks up a localized string similar to AmbiguousRNA
             A   U   G   C   S   W   R   Y   K   M   B   V   H   D   N
             5  -4  -4  -4  -4   1   1  -4  -4   1  -4  -1  -1  -1   0
            -4   5  -4  -4  -4   1  -4   1   1  -4  -1  -4  -1  -1   0
            -4  -4   5  -4   1  -4   1  -4   1  -4  -1  -1  -4  -1   0
            -4  -4  -4   5   1  -4  -4   1  -4   1  -1  -1  -1  -4   0
            -4  -4   1   1	 5  -4  -2  -2  -2  -2  -1  -1  -3  -3   0
             1   1  -4  -4  -4   5  -2  -2  -2  -2  -3  -3  -1  -1   0
             1  -4   1  -4  -2  -2   5  -4  -2  -2  -3  -1  -3  -1   0
            -4   1  -4   1  -2  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Blosum45">
            <summary>
              Looks up a localized string similar to BLOSUM45
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -1  -2  -1  -1  -1   0  -2  -1  -1  -1  -1  -2  -1   1   0  -2  -2   0  -1  -1  -1  -1  -5
            -2   7   0  -1  -3   1   0  -2   0  -3  -2   3  -1  -2  -2  -1  -1  -2  -1  -2  -1  -3   1  -1  -5
            -1   0   6   2  -2   0   0   0   1  -2  -3   0  -2  -2  -2   1   0  -4  -2  -3   5  -3   0  -1  -5
            -2  -1   2   7  -3   0   2  -1   0  -4  -3   0  -3  -4  -1   0  -1  -4  -2  -3   6  -3   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Blosum50">
            <summary>
              Looks up a localized string similar to BLOSUM50
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -1  -2  -1  -1  -1   0  -2  -1  -2  -1  -1  -3  -1   1   0  -3  -2   0  -2  -2  -1  -1  -5
            -2   7  -1  -2  -4   1   0  -3   0  -4  -3   3  -2  -3  -3  -1  -1  -3  -1  -3  -1  -3   0  -1  -5
            -1  -1   7   2  -2   0   0   0   1  -3  -4   0  -2  -4  -2   1   0  -4  -2  -3   5  -4   0  -1  -5
            -2  -2   2   8  -4   0   2  -1  -1  -4  -4  -1  -4  -5  -1   0  -1  -5  -3  -4   6  -4   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Blosum62">
            <summary>
              Looks up a localized string similar to BLOSUM62
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             4  -1  -2  -2   0  -1  -1   0  -2  -1  -1  -1  -1  -2  -1   1   0  -3  -2   0  -2  -1  -1  -1  -4
            -1   5   0  -2  -3   1   0  -2   0  -3  -2   2  -1  -3  -2  -1  -1  -3  -2  -3  -1  -2   0  -1  -4
            -2   0   6   1  -3   0   0   0   1  -3  -3   0  -2  -3  -2   1   0  -4  -2  -3   4  -3   0  -1  -4
            -2  -2   1   6  -3   0   2  -1  -1  -3  -4  -1  -3  -3  -1   0  -1  -4  -3  -3   4  -3   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Blosum80">
            <summary>
              Looks up a localized string similar to BLOSUM80
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -2  -2  -1  -1  -1   0  -2  -2  -2  -1  -1  -3  -1   1   0  -3  -2   0  -2  -2  -1  -1  -6
            -2   6  -1  -2  -4   1  -1  -3   0  -3  -3   2  -2  -4  -2  -1  -1  -4  -3  -3  -1  -3   0  -1  -6
            -2  -1   6   1  -3   0  -1  -1   0  -4  -4   0  -3  -4  -3   0   0  -4  -3  -4   5  -4   0  -1  -6
            -2  -2   1   6  -4  -1   1  -2  -2  -4  -5  -1  -4  -4  -2  -1  -1  -6  -4  -4   5  -5   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Blosum90">
            <summary>
              Looks up a localized string similar to BLOSUM90
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             5  -2  -2  -3  -1  -1  -1   0  -2  -2  -2  -1  -2  -3  -1   1   0  -4  -3  -1  -2  -2  -1  -1  -6
            -2   6  -1  -3  -5   1  -1  -3   0  -4  -3   2  -2  -4  -3  -1  -2  -4  -3  -3  -2  -3   0  -1  -6
            -2  -1   7   1  -4   0  -1  -1   0  -4  -4   0  -3  -4  -3   0   0  -5  -3  -4   5  -4  -1  -1  -6
            -3  -3   1   7  -5  -1   1  -2  -2  -5  -5  -1  -4  -5  -3  -1  -2  -6  -4  -5   5  -5   1  -1  - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.DiagonalScoreMatrix">
            <summary>
              Looks up a localized string similar to DiagonalScoreMatrix
             A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y   Z
             3, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7,  3, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7 },
            -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, - [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Pam250">
            <summary>
              Looks up a localized string similar to PAM250
             A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   J   Z   X   *
             2  -2   0   0  -2   0   0   1  -1  -1  -2  -1  -1  -3   1   1   1  -6  -3   0   0  -1   0  -1  -8
            -2   6   0  -1  -4   1  -1  -3   2  -2  -3   3   0  -4   0   0  -1   2  -4  -2  -1  -3   0  -1  -8
             0   0   2   2  -4   1   1   0   2  -2  -3   1  -2  -3   0   1   0  -4  -2  -2   2  -3   1  -1  -8
             0  -1   2   4  -5   2   3   1   1  -2  -4   0  -3  -6  -1   0   0  -7  -4  -2   3  -3   3  -1  -8
            [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Pam30">
            <summary>
              Looks up a localized string similar to PAM30
              A     R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X   *
              6    -7   -4   -3   -6   -4   -2   -2   -7   -5   -6   -7   -5   -8   -2    0   -1  -13   -8   -2   -3   -6   -3   -1  -17
             -7     8   -6  -10   -8   -2   -9   -9   -2   -5   -8    0   -4   -9   -4   -3   -6   -2  -10   -8   -7   -7   -4   -1  -17
             -4    -6    8    2  -11   -3   -2   -3    0   -5   -7   -1   -9   -9   -6    0   -2   -8   -4   -8    6   -6   -3   -1  -17 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MBF.SimilarityMatrices.Resources.SimilarityMatrixResources.Pam70">
            <summary>
              Looks up a localized string similar to PAM70
             A     R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S    T    W    Y    V    B    J    Z    X    *
             5    -4   -2   -1   -4   -2   -1    0   -4   -2   -4   -4   -3   -6    0    1    1   -9   -5   -1   -1   -3   -1   -1  -11
            -4     8   -3   -6   -5    0   -5   -6    0   -3   -6    2   -2   -7   -2   -1   -4    0   -7   -5   -4   -5   -2   -1  -11
            -2    -3    6    3   -7   -1    0   -1    1   -3   -5    0   -5   -6   -3    1    0   -6   -3   -5    5   -4   -1   -1  -11
             [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:MBF.Matrix.TransposeView`3">
            <summary>
            A wrapper around a parent matrix that switches the rows with the columns.
            Because it is a view, any changes made to the values of this matrix or the parent matrix are reflected in both.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="P:MBF.Matrix.TransposeView`3.ParentMatrix">
            <summary>
            The matrix that this view wraps.
            </summary>
        </member>
        <member name="T:MBF.Matrix.MergeRowsView`3">
            <summary>
            A wrapper around one or more parent matrices that created a merged view of their rows.
            Because it is a view, any changes made to the values of this matrix or the parents are reflected in all.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.MergeRowsView`3.#ctor(System.Boolean,MBF.Matrix.Matrix{`0,`1,`2}[])">
            <summary>
            Creates a new view in which the rows of the matrices are merged. The rows will be in the order
            of the input matrices. If two matrices contain a rows with the same rowKey, an exception is thrown. All matricies must have the same
            MissingValue.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <param name="colsMustMatch">true, to require all matrices to have the same colKeys in the same order; false, use an intersection of the
            colKeys in the order of ColKeys of the first matrix.</param>
            <param name="matrices">One or more matricies with which to concatinate rows.</param>
        </member>
        <member name="T:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge">
            <summary>
            Implements IEdge interface for MWaySuffixTree. Represents an edge in suffix tree which exposes all the properties required by IEdge and pointers to child edges.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Edge class
                Index of First Character
                Index of Last Character
                Start node of edge
            </summary>
            <param name="startIndex">Index of the First Character</param>
            <param name="endIndex">Index of the Last Character</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.#ctor">
            <summary>
            Initializes a new instance of the Edge class
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the sequence.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.GetChildren">
            <summary>
            Pointers to all the child edges
            </summary>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.AddChild(MBF.Algorithms.SuffixTree.IEdge)">
            <summary>
            Add an edge to children array
            </summary>
            <param name="edge">Edge to be added</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.ReplaceChildren(MBF.Algorithms.SuffixTree.IEdge[])">
            <summary>
            Replace the current set of children with given set of children
            </summary>
            <param name="children">new set of children</param>
        </member>
        <member name="M:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.ClearChildren">
            <summary>
            Clear the children list of current edge
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.StartIndex">
            <summary>
            Gets or sets index of first character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.EndIndex">
            <summary>
            Gets or sets index of last character
            </summary>
        </member>
        <member name="P:MBF.Algorithms.SuffixTree.MultiWaySuffixEdge.IsLeaf">
            <summary>
            Gets or sets a value indicating whether the edge is at the leaf.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ScaffoldPath">
            <summary>
            Stores information about the scaffold paths.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ScaffoldPath.BuildSequenceFromPath(MBF.Algorithms.Assembly.Graph.DeBruijnGraph,System.Int32)">
            <summary>
            Converts the scaffold path into its sequence.
            </summary>
            <param name="graph">De Bruijn graph.</param>
            <param name="kmerLength">Kmer Length.</param>
            <returns>Scaffold Sequence.</returns>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs">
            <summary>
            Stores information about Contig - Contig mate pair map.
            Forward Contig     Reverse Contig
            ---------------) (---------------
               -------)           (------
               Forward              Reverse
               read                 read
               
            Key: Sequence of Forward Contig
            Value:
                Key: Sequence of reverse contig
                Value: List of mate pair between two contigs.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs.#ctor">
            <summary>
            Initializes a new instance of the ContigMatePairs class.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ContigMatePairs class.
            This constructor is used for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs.#ctor(System.Collections.Generic.IList{MBF.ISequence})">
            <summary>
            Initializes a new instance of the ContigMatePairs class with specified contigs.
            </summary>
            <param name="contigs">List of contigs.</param>
        </member>
        <member name="T:MBF.Web.AsyncWebMethodCompleted">
            <summary>
            Function pointer to a method that has to be invoked after the asynchronous web call completes.
            </summary>
            <param name="response">Response of asynchronous web method call.</param>
        </member>
        <member name="T:MBF.Util.Logging.ApplicationLog">
            <summary>
            log is a class that implements straightforward logging to a text file, 
            and tries to minimize clutter of the code that uses it.
            </summary>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Open(System.String)">
            <summary>
            Opens the specified filename for writing. If the file already
            exists, it is overwritten. If a different log file is open, it's 
            closed before the new one is opened.
            </summary>
            <param name="fileName">the filename</param>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Reopen(System.String)">
            <summary>
            If log is already open with the same filename, do nothing.
            Otherwise open (in append mode, if file exists).
            </summary>
            <remarks>
            Be aware that log files that are never truncated can become very large.
            </remarks>
            <param name="fileName">the filename</param>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.OpenAppend(System.String)">
            <summary>
            Open the specified filename (in append mode if it exists).
            </summary>
            <param name="fileName">the filename</param>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Close">
            <summary>
            If a writer is open, flush, close, and dispose it.
            </summary>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Write(System.String)">
            <summary>
            Write a single string to the writer.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Write(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output.
            Same syntax as Stream.Write().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.WriteLine(System.String)">
            <summary>
            Write a plain string to the output, then a newline.
            </summary>
            <param name="output">the string</param>
            <returns>the string</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted string to the output, then a newline.
            Same syntax as Stream.WriteLine().
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.WriteTime(System.String,System.Object[])">
            <summary>
            Write a formatted string to output, with the current date/time
            prepended, and a newline appended.
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">additional arguments</param>
            <returns>the formatted string (including date/time) that was written</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Exception(System.Exception)">
            <summary>
            Write an exception's message, its inner exception's message, and the
            stack trace to the log.
            </summary>
            <param name="ex">the Exception</param>
            <returns>the formatted string that was written</returns>
        </member>
        <member name="M:MBF.Util.Logging.ApplicationLog.Flush">
            <summary>
            Flush any pending writes
            </summary>
        </member>
        <member name="P:MBF.Util.Logging.ApplicationLog.Autoflush">
            <summary>
            if true (default), a flush occurs after each write, to prevent loss of messages.
            if false, calling code should Flush() after critical writes.
            </summary>
        </member>
        <member name="P:MBF.Util.Logging.ApplicationLog.Ready">
            <summary>
            returns true if there is a valid writer. if not
            in this state, writes will be no-ops.
            </summary>
        </member>
        <member name="T:MBF.Util.IEnumerableExtensions">
            <summary>
            Extensions to IEnumerable{T}
            </summary>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffles the elements of a sequence.
            </summary>
            <typeparam name="T">the type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence of elements to shuffle</param>
            <param name="random">a random number instance</param>
            <returns>a list of shuffled items</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable)">
            <summary>
            Creates a string from a sequence of elements. No delimiter is used.
            </summary>
            <param name="sequence">the sequence</param>
            <returns>a string</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a delimited string from a sequence of elements.
            </summary>
            <param name="sequence">the sequence</param>
            <param name="separator">the delimiter</param>
            <returns>a string</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.StringJoin(System.Collections.IEnumerable,System.String,System.Int32,System.String)">
            <summary>
            Creates a delimited string from a sequence of elements. At most maxLength elements will be used and "..." shows that more elements were in the list.
            </summary>
            <param name="sequence">a sequence</param>
            <param name="separator">the delimiter</param>
            <param name="maxLength">the maximum number of elements in the string.  It must be at least 2 or an exception is thrown.</param>
            <param name="etcString">the string to use of more than maxLength elements are found</param>
            <returns>a string</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a HashSet from a sequence. If the sequence is already a HashSet, a new HashSet is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <returns>a HashSet</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a Queue from a sequence. If the sequence is already a Queue, a new Queue is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <returns>a Queue</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a HashSet from a sequence. If the sequence is already a HashSet, a new HashSet is still created.
            </summary>
            <typeparam name="T">the type of elements of the sequence</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="comparer">The IEqualityComparer used by the HashSet</param>
            <returns>a HashSet</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a dictionary from a sequence of KeyValuePairs. If the sequence is already a Dictionary, a new Dictionary is still created.
            </summary>
            <typeparam name="T1">the type of Key</typeparam>
            <typeparam name="T2">the type of Value</typeparam>
            <param name="pairSequence">the input pair sequence</param>
            <returns>a Dictionary</returns>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls an action on each element of a sequence. The action takes one argument: an element. It has no return value.
            </summary>
            <typeparam name="T">the type of the elements</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="action">An Action, that is, a delegate that takes one input and has no output.</param>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Calls an action on each element of a sequence. The action takes two arguments: an element and the index of the element.
            It has no return value.
            </summary>
            <typeparam name="T">the type of the elements</typeparam>
            <param name="sequence">the input sequence</param>
            <param name="action">An action that takes an element and an index and returns nothing.</param>
        </member>
        <member name="M:MBF.Util.IEnumerableExtensions.SubSequence``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Take the items from a sequence starting with item # start (index 0) and contining for count items.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="sequence">The input sequence</param>
            <param name="start">The index of the first item to take</param>
            <param name="count">The number of items to take</param>
            <returns>The count items starting with the one with index start.</returns>
        </member>
        <member name="T:MBF.Algorithms.Alignment.AlignmentInfo">
            <summary>
            This class defines generic properties of any alignment algorithm.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.AlignmentInfo.IntType">
            <summary>
            "int" data type argument
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.AlignmentInfo.FloatType">
            <summary>
            "float" data type argument
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.AlignmentInfo.StringListType">
            <summary>
            "string" data type argument
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.AlignmentInfo._dataType">
            <summary>
            Data type of the parameter
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignmentInfo.#ctor(System.String,System.String,System.Boolean,System.String,System.String,MBF.IParameterValidator)">
            <summary>
            Initializes a new instance of the AlignmentInfo class, 
            specifying all properties.
            </summary>
            <param name="name">Name of the property</param>
            <param name="description">A friendly description of property.</param>
            <param name="required">True if this is a required property.</param>
            <param name="defaultValue">The default value that will be used (expressed as a string).</param>
            <param name="dataType">The data type: INT, FLOAT, or STRINGLIST.</param>
            <param name="validator">The validation object, or null if no validation is required.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.AlignmentInfo.ValidateDataType(System.String)">
            <summary>
            Validate the data type value
            </summary>
            <param name="dataType">Type to be validated</param>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.Name">
            <summary>
            Gets or sets the name of attribute.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.Description">
            <summary>
            Gets or sets description of the parameter's meaning.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.Required">
            <summary>
            Gets or sets a value indicating whether the parameter is required property or not.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.DefaultValue">
            <summary>
            Gets or sets default value (as a string). Ignored if Required = true.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.DataType">
            <summary>
            Gets or sets data type ("int", "double", "float" or "string") of parameter.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.AlignmentInfo.Validator">
            <summary>
            Gets or sets validation object that tests values. If this is null, 
            any value will be accepted
            </summary>
        </member>
        <member name="T:MBF.Phylogenetics.Tree">
            <summary>
            Tree: The full input Newick Format for a single tree
            Tree --> Subtree ";" | Branch ";"
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Tree.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:MBF.Phylogenetics.Tree.Clone">
            <summary>
            Clone object
            </summary>
            <returns>Tree as object</returns>
        </member>
        <member name="P:MBF.Phylogenetics.Tree.Name">
            <summary>
            Name of the tree
            </summary>
        </member>
        <member name="P:MBF.Phylogenetics.Tree.Root">
            <summary>
            Root of the tree
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.OrganismInfo">
            <summary>
            Provides Genus, Species and taxonomic classification levels of the sequence.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.OrganismInfo.Clone">
            <summary>
            Creates a new OrganismInfo that is a copy of the current OrganismInfo.
            </summary>
            <returns>A new OrganismInfo that is a copy of this OrganismInfo.</returns>
        </member>
        <member name="M:MBF.IO.GenBank.OrganismInfo.System#ICloneable#Clone">
            <summary>
            Creates a new OrganismInfo that is a copy of the current OrganismInfo.
            </summary>
            <returns>A new object that is a copy of this OrganismInfo.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.OrganismInfo.Genus">
            <summary>
            Genus name of the Organism.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OrganismInfo.Species">
            <summary>
            Species of the Oraganism.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.OrganismInfo.ClassLevels">
            <summary>
            Taxonomic classification levels of the Organism.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.MaturePeptide">
            <summary>
            Mature peptide or protein coding sequence; coding sequence for the mature or final peptide or protein product following 
            post-translational modification; the location does not include the stop codon (unlike the corresponding CDS).
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.MaturePeptide.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new MaturePeptide feature item from the specified location.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MaturePeptide.#ctor(System.String)">
            <summary>
            Creates new MaturePeptide feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the MaturePeptide.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MaturePeptide.#ctor(MBF.IO.GenBank.MaturePeptide)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other MaturePeptide instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.MaturePeptide.Clone">
            <summary>
            Creates a new MaturePeptide that is a copy of the current MaturePeptide.
            </summary>
            <returns>A new MaturePeptide that is a copy of this MaturePeptide.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.MaturePeptide.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.LongTerminalRepeat">
            <summary>
            Long terminal repeat (LTR), a sequence directly repeated at both ends of a defined sequence,
            of the sort typically found in retroviruses.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.LongTerminalRepeat.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new LongTerminalRepeat feature item from the specified location.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LongTerminalRepeat.#ctor(System.String)">
            <summary>
            Creates new LongTerminalRepeat feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the LongTerminalRepeat.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LongTerminalRepeat.#ctor(MBF.IO.GenBank.LongTerminalRepeat)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other LongTerminalRepeat instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.LongTerminalRepeat.Clone">
            <summary>
            Creates a new LongTerminalRepeat that is a copy of the current LongTerminalRepeat.
            </summary>
            <returns>A new LongTerminalRepeat that is a copy of this LongTerminalRepeat.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.LongTerminalRepeat.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.DisplacementLoop">
            <summary>
            Displacement Loop (D-Loop): A region within mitochondrial DNA in which a short stretch of RNA is paired with one strand
            of DNA, displacing the original partner DNA strand in this region; also used to describe the
            displacement of a region of one strand of duplex DNA by a single stranded invader in the 
            reaction catalyzed by RecA protein.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.DisplacementLoop.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new DisplacementLoop feature item from the specified location.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:MBF.IO.GenBank.DisplacementLoop.#ctor(System.String)">
            <summary>
            Creates new DisplacementLoop feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the DisplacementLoop.</param>
        </member>
        <member name="M:MBF.IO.GenBank.DisplacementLoop.#ctor(MBF.IO.GenBank.DisplacementLoop)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other DisplacementLoop instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.DisplacementLoop.Clone">
            <summary>
            Creates a new DisplacementLoop that is a copy of the current DisplacementLoop.
            </summary>
            <returns>A new DisplacementLoop that is a copy of this DisplacementLoop.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.DisplacementLoop.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.CodingSequence">
            <summary>
            Coding sequence (CDS); sequence of nucleotides that corresponds with the sequence of amino acids 
            in a protein (location includes stop codon); feature includes amino acid conceptual translation.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CodingSequence.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new CodingSequence feature item from the specified location.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CodingSequence.#ctor(System.String)">
            <summary>
            Creates new CodingSequence feature item with the specified location.
            Note that this constructor uses LocationBuilder to construct location object from the specified 
            location string.
            </summary>
            <param name="location">Location of the CodingSequence.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CodingSequence.#ctor(MBF.IO.GenBank.CodingSequence)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other CodingSequence instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.CodingSequence.GetTranslation">
            <summary>
            Returns protein sequence from the translation.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.CodingSequence.Clone">
            <summary>
            Creates a new CodingSequence that is a copy of the current CodingSequence.
            </summary>
            <returns>A new CodingSequence that is a copy of this CodingSequence.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Codon">
            <summary>
            Specifies a codon which is different from any found in the reference genetic code.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.CodonStart">
            <summary>
            Indicates the offset at which the first complete codon of a coding feature can be found, 
            relative to the first base of that feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.EnzymeCommissionNumber">
            <summary>
            Enzyme Commission number for enzyme product of sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Exception">
            <summary>
            Indicates that the coding region cannot be translated using standard biological rules.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Function">
            <summary>
            Function attributed to a sequence.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Number">
            <summary>
            A number to indicate the order of genetic elements (e.g., exons or introns) in the 5' to 3' direction.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Product">
            <summary>
            Name of the product associated with the feature, e.g. the mRNA of an mRNA feature, 
            the polypeptide of a CDS, the mature peptide of a mat_peptide, etc.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.ProteinId">
            <summary>
            Protein identifier, issued by International collaborators. this qualifier consists of a stable ID 
            portion (3+5 format with 3 position letters and 5 numbers) plus a version number after the decimal point.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Pseudo">
            <summary>
            Indicates that this feature is a non-functional version of the element named by the feature key.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.RibosomalSlippage">
            <summary>
            During protein translation, certain sequences can program ribosomes to change to an alternative 
            reading frame by a mechanism known as ribosomal slippage.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.StandardName">
            <summary>
            Accepted standard name for this feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.Translation">
            <summary>
            Automatically generated one-letter abbreviated amino acid sequence derived from either 
            the universal genetic code or the table as specified in Transl_table qualifier and as 
            determined by exceptions in the Transl_except and Codon qualifiers.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.TranslationalExcept">
            <summary>
            Translational exception: single codon the translation of which does not conform 
            to genetic code defined by Organism and Codon qualifier.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.TranslationTable">
            <summary>
            Definition of genetic code table used if other than universal genetic code table.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.CodingSequence.TransSplicing">
            <summary>
            Indicates that exons from two RNA molecules are ligated in intermolecular 
            reaction to form mature RNA.
            </summary>
        </member>
        <member name="T:MBF.IO.GenBank.Attenuator">
            <summary>
            Region of DNA at which regulation of termination of transcription occurs, 
            which controls the expression of some bacterial operons.
            Sequence segment located between the promoter and the first structural gene that 
            causes partial termination of transcription.
            </summary>
        </member>
        <member name="M:MBF.IO.GenBank.Attenuator.#ctor(System.String)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Attenuator.#ctor(MBF.IO.GenBank.ILocation)">
            <summary>
            Creates new Attenuator feature item from the specified location.
            </summary>
            <param name="location">Location of the Attenuator.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Attenuator.#ctor(MBF.IO.GenBank.Attenuator)">
            <summary>
            Private constructor for clone method.
            </summary>
            <param name="other">Other Attenuator instance.</param>
        </member>
        <member name="M:MBF.IO.GenBank.Attenuator.Clone">
            <summary>
            Creates a new Attenuator that is a copy of the current Attenuator.
            </summary>
            <returns>A new Attenuator that is a copy of this Attenuator.</returns>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Allele">
            <summary>
            Name of the allele for the given gene.
            All gene-related features (exon, CDS etc) for a given gene should share the same Allele qualifier value; 
            the Allele qualifier value must, by definition, be different from the Gene qualifier value; when used with 
            the variation feature key, the Allele qualifier value should be that of the variant.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Citation">
            <summary>
            Reference to a citation listed in the entry reference field.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.DatabaseCrossReference">
            <summary>
            Database cross-reference: pointer to related information in another database.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Experiment">
            <summary>
            A brief description of the nature of the experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.GeneSymbol">
            <summary>
            Symbol of the gene corresponding to a sequence region.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.GeneSynonym">
            <summary>
            Synonymous, replaced, obsolete or former gene symbol.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.GenomicMapPosition">
            <summary>
            Genomic map position of feature.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Inference">
            <summary>
            A structured description of non-experimental evidence that supports the feature 
            identification or assignment.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.LocusTag">
            <summary>
            A submitter-supplied, systematic, stable identifier for a gene and its associated 
            features, used for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Note">
            <summary>
            Any comment or additional information.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.OldLocusTag">
            <summary>
            Feature tag assigned for tracking purposes.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Operon">
            <summary>
            Name of the group of contiguous genes transcribed into a single transcript to which that feature belongs.
            </summary>
        </member>
        <member name="P:MBF.IO.GenBank.Attenuator.Phenotype">
            <summary>
            Phenotype conferred by the feature, where phenotype is defined as a physical, biochemical or behavioral 
            characteristic or set of characteristics.
            </summary>
        </member>
        <member name="T:MBF.Registration.AssemblyResolver">
            <summary>
            Internal class gets the instance of defined (RegistrableAttribute) 
            attribute in MBF namespace
            </summary>
        </member>
        <member name="M:MBF.Registration.AssemblyResolver.Resolve">
            <summary>
            Resolves the local/loaded assembly with the registed attribute
            </summary>
            <returns>List of objects</returns>
        </member>
        <member name="M:MBF.Registration.AssemblyResolver.Resolve(System.String)">
            <summary>
            Resolves the specified assembly with the registed attribute
            </summary>
            <param name="assemblyName">assembly name</param>
            <returns>List of objects</returns>
        </member>
        <member name="M:MBF.Registration.AssemblyResolver.Resolve(System.Reflection.Assembly)">
            <summary>
            Creates the instance of specified type
            </summary>
            <param name="assembly">assembly reference</param>
            <returns>List of objects</returns>
        </member>
        <member name="P:MBF.Registration.AssemblyResolver.MBFInstallationPath">
            <summary>
            Gets the MBF installed path from current assembly location
            </summary>
            <returns></returns>
        </member>
        <member name="T:MBF.Matrix.MergeColsView`3">
            <summary>
            A wrapper around one or more parent matrices that created a merged view of their columns.
            Because it is a view, any changes made to the values of this matrix or the parents are reflected in all.
            </summary>
            <typeparam name="TRowKey">The type of the row key. Usually "String"</typeparam>
            <typeparam name="TColKey">The type of the col key. Usually "String"</typeparam>
            <typeparam name="TValue">The type of the value, for example, double, int, char, etc.</typeparam>
        </member>
        <member name="M:MBF.Matrix.MergeColsView`3.#ctor(System.Boolean,MBF.Matrix.Matrix{`0,`1,`2}[])">
            <summary>
            Creates a new view in which the cols of the matrices are merged. The cols will be in the order
            of the input matrices. If two matrices contain a rows with the same colKey, an exception is thrown. All matricies must have the same
            MissingValue.
            This is a 'view' in the sense that changes to the values in either matrix will be reflected in both.
            </summary>
            <param name="rowsMustMatch">true, to require all matrices to have the same rowKeys in the same order; false, use an intersection of the
            rowKeys in the order of RowKeys of the first matrix.</param>
            <param name="matrices">One or more matricies with which to concatinate cols.</param>
        </member>
        <member name="T:MBF.IO.SAM.SAMFlags">
            <summary>
            SAM Flags.
            This enum represents the bitwise flags of the SAM format.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.PairedRead">
            <summary>
            0x0001 The read is paired in sequencing, no matter whether it is mapped in a pair.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.MappedInProperPair">
            <summary>
            0x0002 The read is mapped in a proper pair (depends on the protocol, normally inferred during alignment).
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.UnmappedQuery">
            <summary>
            0x0004 The query sequence itself is unmapped.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.UnmappedMate">
            <summary>
            0x0008 The mate is unmapped.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.QueryOnReverseStrand">
            <summary>
            0x0010 Strand of the query (0 for forward; 1 for reverse strand).
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.MateOnReverseStrand">
            <summary>
            0x0020 Strand of the mate.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.FirstReadInPair">
            <summary>
            0x0040 The read is the first read in a pair.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.SecondReadInPair">
            <summary>
            0x0080 The read is the second read in a pair.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.NonPrimeAlignment">
            <summary>
            0x0100 The alignment is not primary (a read having split hits may have multiple primary alignment records).
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.QualityCheckFailure">
            <summary>
            0x0200 The read fails platform/vendor quality checks.
            </summary>
        </member>
        <member name="F:MBF.IO.SAM.SAMFlags.Duplicate">
            <summary>
            0x0400 The read is either a PCR duplicate or an optical duplicate.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Kmer.KmerDataGraphNodePair">
            <summary>
            Holds reference to a pair of KmerData and De Bruijn Node.
            Used to improve parallelization.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Kmer.KmerDataGraphNodePair.#ctor(MBF.Algorithms.Kmer.KmerData,System.Boolean)">
            <summary>
            Initializes a new instance of the TupleClass class.
            </summary>
            <param name="kmerData">Kmer Data</param>
            <param name="orientation">This boolean indicates whether 
            the kmer represented here is same as first occurance of kmer in read</param>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerDataGraphNodePair.Kmer">
            <summary>
            Gets or sets Kmer Data
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerDataGraphNodePair.Node">
            <summary>
            Gets or sets De Bruijn Node
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Kmer.KmerDataGraphNodePair.KeyHasSameOrientation">
            <summary>
            Gets or sets the boolean indicating whether the kmer 
            represented here is same as first occurance of the kmer 
            in reads kmer or reverse complement has to be be stored. 
            For efficiency, the lexicographically lower one is stored.
            </summary>
        </member>
        <member name="T:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IOrientationBasedMatePairFilter">
            <summary>
            Filter mate pairs based on support for contig orientation.
            The mate pairs support specific orientation of contigs, 
            based on mapping of reverse read or forward read to specify orientation.
            Orientation 1
            ----------) (------------- 
            contig 1      contig 2
            
            Orientation 2
            ----------) (-------------
            
            contig 2      contig 1
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Assembly.PaDeNA.Scaffold.IOrientationBasedMatePairFilter.FilterPairedReads(MBF.Algorithms.Assembly.PaDeNA.Scaffold.ContigMatePairs,System.Int32)">
            <summary>
            Filter mate pairs.
            </summary>
            <param name="matePairMap">Dictionary of Map between contigs using mate pair information.</param>
            <param name="redundancy">Number of mate pairs require to create a link 
            between two contigs.</param>
            <returns>List of contig mate pairs.</returns>
        </member>
        <member name="T:MBF.Algorithms.Alignment.PairwiseSequenceAlignment">
            <summary>
            A simple implementation of IPairwiseSequenceAlignment that stores the 
            results as list of Aligned Sequences 
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseSequenceAlignment._seqAlignment">
            <summary>
            sequence alignment instance.
            </summary>
        </member>
        <member name="F:MBF.Algorithms.Alignment.PairwiseSequenceAlignment._alignedSequences">
            <summary>
            List of alignments
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class
            Constructs an empty PairwiseSequenceAlignment
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor(MBF.ISequence,MBF.ISequence)">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class
            Constructs PairwiseSequenceAlignment with input sequences
            </summary>
            <param name="firstSequence">First input sequence</param>
            <param name="secondSequence">Second input sequence</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor(MBF.Algorithms.Alignment.ISequenceAlignment)">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class.
            Internal constructor to create new instance of PairwiseSequenceAlignment 
            from ISequenceAlignment.
            </summary>
            <param name="seqAlignment">ISequenceAlignment instance.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.AddSequence(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Add a new Aligned Sequence Object to the end of the list.
            </summary>
            <param name="pairwiseAlignedSequence">The sequence to add.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Add(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Adds an aligned sequence to the list of aligned sequences in the PairwiseSequenceAlignment.
            Throws exception if sequence alignment is read only.
            </summary>
            <param name="item">PairwiseAlignedSequence to add.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Clear">
            <summary>
            Clears the PairwiseSequenceAlignment
            Throws exception if PairwiseSequenceAlignment is read only.
            </summary>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Contains(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Returns true if the PairwiseSequenceAlignment contains the aligned sequence in the
            list of aligned sequences.
            </summary>
            <param name="item">PairwiseAlignedSequence object</param>
            <returns>True if contains item, otherwise returns false.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.CopyTo(MBF.Algorithms.Alignment.PairwiseAlignedSequence[],System.Int32)">
            <summary>
            Copies the aligned sequences from the PairwiseSequenceAlignment into an existing aligned sequence array.
            </summary>
            <param name="array">Array into which to copy the sequences.</param>
            <param name="arrayIndex">Starting index in array at which to begin the copy.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Remove(MBF.Algorithms.Alignment.PairwiseAlignedSequence)">
            <summary>
            Removes item from the list of aligned sequences in the PairwiseSequenceAlignment.
            Throws exception if PairwiseSequenceAlignment is read only.
            </summary>
            <param name="item">Aligned sequence object</param>
            <returns>True if item was removed, false if item was not found.</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the PairwiseSequenceAlignment class
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the PairwiseSequenceAlignment.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the PairwiseSequenceAlignment.
            </summary>
            <returns>Returns the enumerator for PairwiseAlignedSequence</returns>
        </member>
        <member name="M:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the aligned sequences in the PairwiseSequenceAlignment.
            </summary>
            <returns>Returns the enumerator for PairwiseAlignedSequence</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Metadata">
            <summary>
            Gets any additional information about the Alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.AlignedSequences">
            <summary>
            Gets list of the (output) aligned sequences.
            Note that it always returns readonly list. To add aligned sequence use AddSequence method.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Sequences">
            <summary>
            Gets list of sequences involved in this alignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.PairwiseAlignedSequences">
            <summary>
            Gets the list of alignments.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.FirstSequence">
            <summary>
            Gets accessor for the first sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.SecondSequence">
            <summary>
            Gets accessor for the second sequence
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Item(System.Int32)">
            <summary>
            Returns the ith aligned sequence in the alignment.
            </summary>
            <param name="i">The index.</param>
            <returns>The aligned sequence.</returns>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Documentation">
            <summary>
            Gets or sets Documentation object is intended for tracking the history, provenance,
            and experimental context of a PairwiseSequenceAlignment. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.Count">
            <summary>
            Gets number of aligned sequence objects in the PairwiseSequenceAlignment.
            </summary>
        </member>
        <member name="P:MBF.Algorithms.Alignment.PairwiseSequenceAlignment.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether PairwiseSequenceAlignment is read-only or not.
            </summary>
        </member>
    </members>
</doc>
