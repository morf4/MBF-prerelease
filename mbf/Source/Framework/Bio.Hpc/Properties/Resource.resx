<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="Job_already_exists">
		<value xml:space="preserve">Job already exists. Waiting for it to finish. If this is not correct, then delete the log entry file at {0} and try again.</value>
	</data>
	<data name="Wait_Writing_log">
		<value xml:space="preserve">Writing log entry to cluster directory</value>
	</data>
	<data name="Error_Submitting">
		<value><![CDATA[

Error submitting to cluster ]]></value>
	</data>
	<data name="numTry">
		<value xml:space="preserve">numTry=</value>
	</data>
	<data name="User_CluserHelp">
		<value><![CDATA[

Use -cluster help to see usage.]]></value>
	</data>
	<data name="Tasks_failed">
		<value xml:space="preserve">Tasks failed. Requeuing.</value>
	</data>
	<data name="Processed_job">
		<value xml:space="preserve">Processed job to cluster {0} with path {1}</value>
	</data>
	<data name="Writing_log_file">
		<value xml:space="preserve">Writing log file</value>
	</data>
	<data name="Done">
		<value xml:space="preserve">Done</value>
	</data>
	<data name="Using_exe">
		<value><![CDATA[Using exe directory specified by user: ]]></value>
	</data>
	<data name="Job_template">
		<value><![CDATA[Job template '{0}' does not exist at specified cluster. Existing templates are:]]></value>
	</data>
	<data name="SubmitViaAPI3">
		<value><![CDATA[
Using Default job template...]]></value>
	</data>
	<data name="Submitting_job">
		<value xml:space="preserve">Submitting job.</value>
	</data>
	<data name="submitted">
		<value><![CDATA[ submitted.]]></value>
	</data>
	<data name="StdOutRelativeDirName">
		<value><![CDATA[StdOutRelativeDirName: ]]></value>
	</data>
	<data name="CreateTask">
		<value><![CDATA[Task command line is {0} characters long:
{1}]]></value>
	</data>
	<data name="Caution">
		<value xml:space="preserve">Caution, std error file path is {0} characters, which will probably cause HPC to crash.</value>
	</data>
	<data name="xcopy">
		<value><![CDATA[xcopy ]]></value>
	</data>
	<data name="ExeAlreadyThere">
		<value><![CDATA[Checking to see if exe's are already there.]]></value>
	</data>
	<data name="Copying_Exes">
		<value xml:space="preserve">Copying Exes</value>
	</data>
	<data name="Done_copying">
		<value xml:space="preserve">Done copying.</value>
	</data>
	<data name="Log_file_directory">
		<value xml:space="preserve">Log file directory {0} does not exist. Will not write results to log file.</value>
	</data>
	<data name="called_inside">
		<value xml:space="preserve">This method must be called inside a using(ParallelOptionsScope) statement.</value>
	</data>
	<data name="Not_working">
		<value xml:space="preserve">Not working how I thought it would</value>
	</data>
	<data name="Cannot_replace">
		<value xml:space="preserve">Cannot replace an existing ParallelOptionsScope stack. Remove the existing stack first with SuspendParallelOptionsScope()</value>
	</data>
</root>