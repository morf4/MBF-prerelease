<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\community\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="E:\Workspace\Github\morf4\archive\mbf\Build\Binaries\Debug\Bio.dll">
   <Modules>
    <Module Name="bio.dll">
     <Namespaces>
      <Namespace Name="Bio.Algorithms.Alignment">
       <Types>
        <Type Name="ModifiedSmithWaterman" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExtendSequence(Bio.ISequence,System.Int64,System.Int64&amp;,Bio.ISequence,System.Int64,System.Int64&amp;,System.Collections.Generic.IList`1&lt;System.Int64&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="Compiler" Certainty="95" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\Alignment\NUCmer" File="ModifiedSmithWaterman.cs" Line="180">'ModifiedSmithWaterman.ExtendSequence(ISequence, long, ref long, ISequence, long, ref long, IList&lt;long&gt;, int)' has 76 local variables, 38 of which were generated by the compiler. Refactor 'ModifiedSmithWaterman.ExtendSequence(ISequence, long, ref long, ISequence, long, ref long, IList&lt;long&gt;, int)' so that it uses fewer than 64 local variables.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NUCmer+&lt;GetDeltaAlignments&gt;d__56" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\Alignment\NUCmer" File="NUCmer.cs" Line="281">Method 'NUCmer.&lt;GetDeltaAlignments&gt;d__56.MoveNext()' passes 'internalMummer' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Algorithms.Assembly">
       <Types>
        <Type Name="MatePairMapper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GenerateExpression(System.Text.RegularExpressions.Match)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Assembly" File="MatePairMapper.cs" Line="226">'MatePairMapper.GenerateExpression(Match)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Algorithms.SuffixTree">
       <Types>
        <Type Name="MultiWaySuffixTree+&lt;SearchMatches&gt;d__28" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;previousSearchEndedEdgeIndex&gt;5__20" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.&lt;previousSearchEndedEdgeIndex&gt;5__20' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;referenceSequenceLength&gt;5__7" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.&lt;referenceSequenceLength&gt;5__7' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\SuffixTree" File="MultiWaySuffixTree.cs" Line="439">'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.MoveNext()' has a cyclomatic complexity of 82. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="Compiler" Certainty="95" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\SuffixTree" File="MultiWaySuffixTree.cs" Line="439">'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.MoveNext()' has 70 local variables, 70 of which were generated by the compiler. Refactor 'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.MoveNext()' so that it uses fewer than 64 local variables.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\SuffixTree" File="MultiWaySuffixTree.cs" Line="439">'MultiWaySuffixTree.&lt;SearchMatches&gt;d__28.MoveNext()' has a maintainability index of 5. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultiWaySuffixTree+&lt;SearchMatchesUniqueInReference&gt;d__27" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;referenceSequenceLength&gt;5__5" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'MultiWaySuffixTree.&lt;SearchMatchesUniqueInReference&gt;d__27.&lt;referenceSequenceLength&gt;5__5' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Algorithms\SuffixTree" File="MultiWaySuffixTree.cs" Line="156">'MultiWaySuffixTree.&lt;SearchMatchesUniqueInReference&gt;d__27.MoveNext()' has a cyclomatic complexity of 37. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.IO.BAM">
       <Types>
        <Type Name="BAMFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetOptioanField(Bio.IO.SAM.SAMOptionalField)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\BAM" File="BAMFormatter.cs" Line="1130">'BAMFormatter.GetOptioanField(SAMOptionalField)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.IO.GenBank">
       <Types>
        <Type Name="GenBankLocusTokenParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetLocusTokenParsers(Bio.IO.GenBank.GenBankLocusInfo)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="116">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenBankLocusTokenParser+&lt;&gt;c__DisplayClass2_0" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__1(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="95">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="95">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__2(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="112">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="116">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="128">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="128">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="116">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__3(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="143">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="143">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__5(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="169">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="169">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenBankLocusTokenParser+&lt;&gt;c__DisplayClass2_1" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__8(System.Collections.Generic.KeyValuePair`2&lt;System.String,Bio.IO.GenBank.SequenceStrandTopology&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="95">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="95">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenBankLocusTokenParser+&lt;&gt;c__DisplayClass2_2" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__11(System.Collections.Generic.KeyValuePair`2&lt;System.String,Bio.IO.GenBank.MoleculeType&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="128">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="128">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__9(System.Collections.Generic.KeyValuePair`2&lt;System.String,Bio.IO.GenBank.SequenceStrandType&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="116">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="116">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenBankLocusTokenParser+&lt;&gt;c__DisplayClass2_3" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__12(System.Collections.Generic.KeyValuePair`2&lt;System.String,Bio.IO.GenBank.SequenceDivisionCode&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="143">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="143">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GenBankLocusTokenParser+&lt;&gt;c__DisplayClass2_4" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;GetLocusTokenParsers&gt;b__13(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="169">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\GenBank" File="GenBankLocusTokenParser.cs" Line="169">In method 'GenBankLocusTokenParser.GetLocusTokenParsers(GenBankLocusInfo)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.IO.Gff">
       <Types>
        <Type Name="GffFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#WriteHeaders(System.Collections.Generic.ICollection`1&lt;Bio.ISequence&gt;,System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="Compiler" Certainty="95" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\Gff" File="GffFormatter.cs" Line="297">'GffFormatter.WriteHeaders(ICollection&lt;ISequence&gt;, TextWriter)' has 69 local variables, 44 of which were generated by the compiler. Refactor 'GffFormatter.WriteHeaders(ICollection&lt;ISequence&gt;, TextWriter)' so that it uses fewer than 64 local variables.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.IO.SAM">
       <Types>
        <Type Name="SAMAlignmentHeader+&lt;&gt;c" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;IsValid&gt;b__11_0(Bio.IO.SAM.SAMRecordField)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Linq.Enumerable.Contains&lt;System.String&gt;(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Collections.Generic.IEqualityComparer`1&lt;System.String&gt;)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="StringComparer" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\SAM" File="SAMAlignmentHeader.cs" Line="105">'SAMAlignmentHeader.IsValid()' passes 'StringComparer.InvariantCultureIgnoreCase' as the 'StringComparer' parameter to 'Enumerable.Contains&lt;string&gt;(this IEnumerable&lt;string&gt;, string, IEqualityComparer&lt;string&gt;)'. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SAMAlignmentHeader+&lt;&gt;c__DisplayClass11_0" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;IsValid&gt;b__2(Bio.IO.SAM.SAMRecordFieldTag)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\IO\SAM" File="SAMAlignmentHeader.cs" Line="112">'SAMAlignmentHeader.IsValid()' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Compare(string, string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Library.Resources">
       <Types>
        <Type Name="LibraryResource" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'LibraryResource' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Culture" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Culture()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\CloneLibrary\Resources" File="LibraryResource.Designer.cs" Line="55">'LibraryResource.Culture.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Culture(System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\CloneLibrary\Resources" File="LibraryResource.Designer.cs" Line="58">'LibraryResource.Culture.set(CultureInfo)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Matrix">
       <Types>
        <Type Name="DenseStructMatrix`2+&lt;EachSparseLine&gt;d__51" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="DenseStructMatrix.cs" Line="683">'DenseStructMatrix&lt;TStore, TValue&gt;.&lt;EachSparseLine&gt;d__51.MoveNext()' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MatrixFactory`3+&lt;EnumerateAllUserAssemblyCodeBases&gt;d__20" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Reflection.Assembly.LoadFile" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="System.Reflection.Assembly.LoadFile" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="MatrixFactory.cs" Line="297">Remove the call to Assembly.LoadFile from 'MatrixFactory&lt;TRowKey, TColKey, TValue&gt;.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__20.MoveNext()'.</Issue>
             <Issue Name="System.Reflection.Assembly.LoadFile" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="MatrixFactory.cs" Line="312">Remove the call to Assembly.LoadFile from 'MatrixFactory&lt;TRowKey, TColKey, TValue&gt;.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__20.MoveNext()'.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="MatrixFactory.cs" Line="299">Modify 'MatrixFactory&lt;TRowKey, TColKey, TValue&gt;.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__20.MoveNext()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="MatrixFactory.cs" Line="314">Modify 'MatrixFactory&lt;TRowKey, TColKey, TValue&gt;.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__20.MoveNext()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MatrixFactory`3+&lt;EnumerateAssemblyAndAllReferencedUserAssemblies&gt;d__21" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Matrix" File="MatrixFactory.cs" Line="336">Modify 'MatrixFactory&lt;TRowKey, TColKey, TValue&gt;.&lt;EnumerateAssemblyAndAllReferencedUserAssemblies&gt;d__21.MoveNext()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Properties">
       <Types>
        <Type Name="Resource" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'Resource' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AZURE_BLAST_NAME" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_AZURE_BLAST_NAME()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="193">'Resource.AZURE_BLAST_NAME.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Cannotaddmorethanchildnodestoedge" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Cannotaddmorethanchildnodestoedge()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="474">'Resource.Cannotaddmorethanchildnodestoedge.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserExceptionInvalidValueFoundBool" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserExceptionInvalidValueFoundBool()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="546">'Resource.CmdLineParserExceptionInvalidValueFoundBool.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserFirstParam" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserFirstParam()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="690">'Resource.CmdLineParserFirstParam.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserInt" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserInt()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="699">'Resource.CmdLineParserInt.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserOptional" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserOptional()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="708">'Resource.CmdLineParserOptional.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserParameters" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserParameters()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="717">'Resource.CmdLineParserParameters.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserRegEx" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserRegEx()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="726">'Resource.CmdLineParserRegEx.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserRequired" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserRequired()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="735">'Resource.CmdLineParserRequired.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserString" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserString()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="744">'Resource.CmdLineParserString.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CmdLineParserUsage" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_CmdLineParserUsage()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="753">'Resource.CmdLineParserUsage.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Culture" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Culture()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="55">'Resource.Culture.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Culture(System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="58">'Resource.Culture.set(CultureInfo)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DataVirtualizationNeedsInputFile" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_DataVirtualizationNeedsInputFile()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="880">'Resource.DataVirtualizationNeedsInputFile.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ExpectedNoOverlapBetweenRowKeys" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ExpectedNoOverlapBetweenRowKeys()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="1312">'Resource.ExpectedNoOverlapBetweenRowKeys.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ExpectedTwoFieldsFoundN" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ExpectedTwoFieldsFoundN()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="1384">'Resource.ExpectedTwoFieldsFoundN.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#InvalidMinLengthOfMatch" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_InvalidMinLengthOfMatch()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="1965">'Resource.InvalidMinLengthOfMatch.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#KmerPositionOutOfRange" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_KmerPositionOutOfRange()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2199">'Resource.KmerPositionOutOfRange.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#KurtzSuffixTreeBuilderName" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_KurtzSuffixTreeBuilderName()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2208">'Resource.KurtzSuffixTreeBuilderName.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#NotSupportedInVirtualSequence" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_NotSupportedInVirtualSequence()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2588">'Resource.NotSupportedInVirtualSequence.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ParameterNameSequences" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ParameterNameSequences()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2858">'Resource.ParameterNameSequences.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ParameterNameSource" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ParameterNameSource()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2876">'Resource.ParameterNameSource.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Parser_NoTextErrorMessage" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Parser_NoTextErrorMessage()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="2939">'Resource.Parser_NoTextErrorMessage.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ProgressStatus_Reading" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ProgressStatus_Reading()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3074">'Resource.ProgressStatus_Reading.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ReferenceListCannotBeNull" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ReferenceListCannotBeNull()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3157">'Resource.ReferenceListCannotBeNull.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SAM_InvalidInputFile" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SAM_InvalidInputFile()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3247">'Resource.SAM_InvalidInputFile.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SequenceLengthExceedsLimit" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SequenceLengthExceedsLimit()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3402">'Resource.SequenceLengthExceedsLimit.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SequenceLengthsMismatch" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SequenceLengthsMismatch()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3420">'Resource.SequenceLengthsMismatch.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TracebackBadSource" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_TracebackBadSource()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3708">'Resource.TracebackBadSource.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UnexpectedSecondSequenceName" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_UnexpectedSecondSequenceName()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Properties" File="Resource.Designer.cs" Line="3726">'Resource.UnexpectedSecondSequenceName.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.SimilarityMatrices.Resources">
       <Types>
        <Type Name="SimilarityMatrixResources" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'SimilarityMatrixResources' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Culture" Kind="Property" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Culture()" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\SimilarityMatrices\Resources" File="SimilarityMatrixResources.Designer.cs" Line="56">'SimilarityMatrixResources.Culture.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Culture(System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\SimilarityMatrices\Resources" File="SimilarityMatrixResources.Designer.cs" Line="59">'SimilarityMatrixResources.Culture.set(CultureInfo)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Util">
       <Types>
        <Type Name="CharToDoubleConverter+&lt;&gt;c" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;.ctor&gt;b__0_0(System.Char)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Double.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="ValueConverter.cs" Line="123">Because the behavior of 'double.Parse(string)' could vary based on the current user's locale settings, replace this call in 'CharToDoubleConverter.CharToDoubleConverter()' with a call to 'double.Parse(string, IFormatProvider)'. If the result of 'double.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;.ctor&gt;b__0_1(System.Double)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="ValueConverter.cs" Line="123">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'CharToDoubleConverter.CharToDoubleConverter()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CharToIntConverter+&lt;&gt;c" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;.ctor&gt;b__0_0(System.Char)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="ValueConverter.cs" Line="112">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'CharToIntConverter.CharToIntConverter()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#&lt;.ctor&gt;b__0_1(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="ValueConverter.cs" Line="112">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'CharToIntConverter.CharToIntConverter()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeltaAlignmentParser+&lt;GetPositions&gt;d__11" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="DeltaAlignmentParser.cs" Line="91">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'DeltaAlignmentParser.&lt;GetPositions&gt;d__11.MoveNext()' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="DeltaAlignmentParser.cs" Line="88">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'DeltaAlignmentParser.&lt;GetPositions&gt;d__11.MoveNext()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="&lt;streamReader&gt;5__1" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'DeltaAlignmentParser.&lt;GetPositions&gt;d__11' contains field 'DeltaAlignmentParser.&lt;GetPositions&gt;d__11.&lt;streamReader&gt;5__1' that is of IDisposable type: 'StreamReader'. Change the Dispose method on 'DeltaAlignmentParser.&lt;GetPositions&gt;d__11' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeltaAlignmentParser+&lt;GetQuerySeqIds&gt;d__14" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="&lt;reader&gt;5__1" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'DeltaAlignmentParser.&lt;GetQuerySeqIds&gt;d__14' contains field 'DeltaAlignmentParser.&lt;GetQuerySeqIds&gt;d__14.&lt;reader&gt;5__1' that is of IDisposable type: 'StreamReader'. Change the Dispose method on 'DeltaAlignmentParser.&lt;GetQuerySeqIds&gt;d__14' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeltaAlignmentParser+&lt;ParseFrom&gt;d__20" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="DeltaAlignmentParser.cs" Line="358">'DeltaAlignmentParser.&lt;ParseFrom&gt;d__20.MoveNext()' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="DeltaAlignmentParser.cs" Line="387">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'DeltaAlignmentParser.&lt;ParseFrom&gt;d__20.MoveNext()' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="DeltaAlignmentParser.cs" Line="415">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'DeltaAlignmentParser.&lt;ParseFrom&gt;d__20.MoveNext()' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FastASequencePositionParser+&lt;ParseFromFile&gt;d__27" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="FastASequencePositionParser.cs" Line="285">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'FastASequencePositionParser.&lt;ParseFromFile&gt;d__27.MoveNext()' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileUtils+&lt;GetFiles&gt;d__14" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="FileUtils.cs" Line="247">Replace the call to 'string.operator ==(string, string)' in 'FileUtils.&lt;GetFiles&gt;d__14.MoveNext()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Helper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ValidatePairedSequenceId(System.String,System.String&amp;,System.Boolean&amp;,System.String&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="Helper.cs" Line="1230">'Helper.ValidatePairedSequenceId(string, out string, out bool, out string, out string)' has a cyclomatic complexity of 39. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="INamedStreamCreatorExtensions+&lt;ReadEachLine&gt;d__5" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="NamedStreamCreator.cs" Line="176">Method 'INamedStreamCreatorExtensions.&lt;ReadEachLine&gt;d__5.MoveNext()' passes 'namedStreamCreator' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="INamedStreamCreatorExtensions+&lt;ReadEachUncommentedLine&gt;d__4" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="NamedStreamCreator.cs" Line="156">Method 'INamedStreamCreatorExtensions.&lt;ReadEachUncommentedLine&gt;d__4.MoveNext()' passes 'namedStreamCreator' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SpecialFunctions+&lt;DivideWork&gt;d__3`1" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util" File="SpecialFunctions.cs" Line="97">Method 'SpecialFunctions.&lt;DivideWork&gt;d__3&lt;T&gt;.MoveNext()' passes 'pieceIndexRangeCollection' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Util.ArgumentParser">
       <Types>
        <Type Name="HelpException+&lt;Tokens&gt;d__9" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="HelpException.cs" Line="155">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'HelpException.&lt;Tokens&gt;d__9.MoveNext()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParseExtensions+&lt;&gt;c__11`1" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#&lt;IsCollection&gt;b__11_0(System.Type)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="ParsableAttribute.cs" Line="264">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ParseExtensions.IsCollection&lt;T&gt;(this Type)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TypeFactory+&lt;EnumerateAllUserAssemblyCodeBases&gt;d__10" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Reflection.Assembly.LoadFrom" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Name="System.Reflection.Assembly.LoadFrom" Certainty="75" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="266">Remove the call to Assembly.LoadFrom from 'TypeFactory.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__10.MoveNext()'.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="268">Modify 'TypeFactory.&lt;EnumerateAllUserAssemblyCodeBases&gt;d__10.MoveNext()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TypeFactory+&lt;EnumerateReferencedSystemAssemblies&gt;d__11" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#MoveNext()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="310">Modify 'TypeFactory.&lt;EnumerateReferencedSystemAssemblies&gt;d__11.MoveNext()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="298">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TypeFactory.&lt;EnumerateReferencedSystemAssemblies&gt;d__11.MoveNext()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="303">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TypeFactory.&lt;EnumerateReferencedSystemAssemblies&gt;d__11.MoveNext()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Util\ArgumentParser" File="TypeFactory.cs" Line="303">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TypeFactory.&lt;EnumerateReferencedSystemAssemblies&gt;d__11.MoveNext()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Bio.Web.Blast">
       <Types>
        <Type Name="BlastXmlParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DoHsp(System.String,System.String,Bio.Web.Blast.Hsp)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2019-04-14 17:21:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="E:\Workspace\Github\morf4\archive\mbf\Source\Framework\Bio\Web\Blast" File="BlastXmlParser.cs" Line="173">'BlastXmlParser.DoHsp(string, string, Hsp)' has a cyclomatic complexity of 48. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.Reflection.Assembly.LoadFile">Remove the call to Assembly.LoadFile from {0}.</Resolution>
   <Resolution Name="System.Reflection.Assembly.LoadFrom">Remove the call to Assembly.LoadFrom from {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809">
   <Name>Avoid excessive locals</Name>
   <Description>Method implementations should not contain more than 64 local variables. In order for the run-time to enregister local variables most efficiently, there should be 64 or fewer of them. Enregistering based on flow analysis will not occur for locals in excess of 64, which may result in slower performance.</Description>
   <Resolution Name="Compiler">{0} has {1} local variables, {2} of which were generated by the compiler. Refactor {0} so that it uses fewer than 64 local variables.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182263.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386043.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectMessage">Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Resolution>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
   <Name>Use ordinal StringComparison</Name>
   <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
   <Resolution Name="StringComparer">{0} passes '{1}' as the 'StringComparer' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Resolution>
   <Resolution Name="StringComparison">{0} passes '{1}' as the 'StringComparison' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385972.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
