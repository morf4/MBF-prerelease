<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bio.Pamsam</name>
    </assembly>
    <members>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix">
            <summary>
            Asymmetric Distance matrix class: m[i,j] != m[j,i]
            ASymmetricDistanceMatrix[i,j] is proportional to the 'evolutionary' distance
            from sequence i to sequence j, i.e. the higher the value, the more divergent
            the two sequences.
            
            The matrix data is stored in float rectangle
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix.Dimension">
            <summary>
            The dimension of this matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix.NearestNeighbors">
            <summary>
            One-dimension array recording the minimum value row index in each column
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix.NearestDistances">
            <summary>
            One-dimension array recording the minimum distance in each column
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix.#ctor(System.Int32)">
            <summary>
            Symmetry matrix: (Dimension x Dimension) square matrix
            stores in linear _LinearDistanceMatrix.
            </summary>
            <param name="dimension">integer dimension of the matrix</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.AsymmetricDistanceMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Convert 2d matrix to 1d linear List
            Take advantage of symmetry matrix that only right top corner is stored.
            </summary>
            <param name="row">zero-baed row number</param>
            <param name="col">zero-baed col number</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree">
            <summary>
            Implementation of Binary guide tree.
            
            The tree guides progressive alignment algorithm to align sequences from bottom up.
            The tree structure reflects the distances between sequences, i.e. the distance on 
            the tree of two leaf nodes is proportional to the evolutionary distance of the two
            sequences associated to the nodes; the distance between two internal nodes is 
            proportional to the distance between two sets of sequences of their subtrees.
            
            In the tree, leaves are associated with sequences, and internal nodes, including
            root, are associated with aligned sequences. All nodes are also associated with
            profile matrices of its subtree sequences. 
            
            The tree is constructed by hierarcical clustering method so that it is a binary tree.
            First all leaf nodes are created by connecting to input sequences. Then internal nodes
            are created by clustering two leaf nodes, or two internal nodes, or a mixture of one 
            leaf and one internal nodes. When all the nodes are connected by the root node, the 
            tree construction is done.
            
            Progressive alignment also follows a prefix order (bottom up, children before parents).
            When aligning two children of a node, the aligned sequences are represented by its 
            profile, a multiple alignment treated as a sequence by regarding each column as an 
            alignable symbol. The profile is then assigned to their parent node. Once the root 
            of the tree is aligned, a multiple sequence alignment (MSA) is generated.
            
            The class also supports a set of operations on the tree, i.e. cuts a tree into two 
            subtrees, and extract the subtree nodes/leaves; compares a newly generated tree
            with a previous one and marks the nodes that are different so that re-alignment is 
            required on the marked nodes; separates the leaves by fakely cutting an edge, etc.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.ID">
            <summary>
            The ID of this tree.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.NumberOfNodes">
            <summary>
            The number of nodes in this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.NumberOfLeaves">
            <summary>
            The number of leaves in this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.NumberOfEdges">
            <summary>
            The number of edges in this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.Height">
            <summary>
            The height of this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.Root">
            <summary>
            The root of this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.Nodes">
            <summary>
            The node list of this tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.Edges">
            <summary>
            The edge list of this tree
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.#ctor">
            <summary>
            Construct a tree with one root node
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.#ctor(System.Int32)">
            <summary>
            Create a tree with an assigned tree ID
            </summary>
            <param name="id">zero-based tree ID</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode)">
            <summary>
            Create a tree using an existing node as root
            </summary>
            <param name="r">a BinaryGuideTreeNode</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IHierarchicalClustering)">
            <summary>
            Construct a tree by hierarchical clustering method.
            
            The node list is already generated in the hierarchical clustering method
            and the root will be the last node in the list
            </summary>
            <param name="hCluster">hierarcical clustering class object</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.ExtractSubTreeNodes(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode)">
            <summary>
            Use the input node as root, return the subtree nodes of this node, and keep them
            in the alignment order by progressive aligner.
            </summary>
            <param name="node">root node in a (sub)tree</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.ExtractSubTreeLeafNodes(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode)">
            <summary>
            Use the input node as root, return the subtree *leaf* nodes of this node, 
            and keep them in the alignment order by progressive aligner.
            </summary>
            <param name="node">root node in a (sub)tree</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.DepthFirstSearch(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode,System.Collections.Generic.List{System.Boolean})">
            <summary>
            Depth first search (DFS) algorithm (recursive version).
            Visit the subtree nodes from the current node, and
            mark visited nodes by DFS with 'true'.
            </summary>
            <param name="node">root node of the subtree</param>
            <param name="mark">Bool list of all nodes (in a tree)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.FindSmallestTreeDifference(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode,Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode)">
            <summary>
            Compare two (sub)trees from root to leaves,
            find the top node position that the subtrees of this node are
            different between the two trees
            
            Normally nodeA is the root of newly generated tree A, and nodeB is the root
            of old tree B. This method returns the top node in tree A, so that the subtree
            of this node will be re-aligned.
            </summary>
            <param name="nodeA">root of (sub)tree</param>
            <param name="nodeB">root of (sub)tree</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.CompareTwoTrees(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree,Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree)">
            <summary>
            Compare two guide (sub)trees and mark the nodes that need to be re-aligned.
            
            The algorithm traverses tree A in prefix order (children before parents), 
            assigning internal nodes ids N+1 through 2N-1 in the order visited. When visiting 
            an internal node, if any child node needs to be re-aligned, the node needs to
            be re-aligned too. If the two children are both unmarked, and the two children nodes 
            are also having the same parent in tree B, this internal node does not need to be
            re-aligned, and be assigned an ID the same as the parent node in tree B.
            </summary>
            <param name="treeA">binary guide (sub)tree</param>
            <param name="treeB">binary guide (sub)tree</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.CutTree(System.Int32)">
            <summary>
            Cut a tree at an edge to generate 2 subtrees
            </summary>
            <param name="edgeIndex">zero-based edge index</param>
            <returns>return[0] is the subtree with the same root as the original tree;
                     return[1] is the subtree rooted below the cutting edge</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree.SeparateSequencesByCuttingTree(System.Int32)">
            <summary>
            Separate the leaf nodes into two subsets by cutting an edge.
            
            Takes the child node of the edge as the root, and extracts the
            leaf nodes of the subtree. The rest leaf nodes are the compensate
            leaf nodes set.
            
            The method is used in alignment refinement, when separating the
            sequences into two sets by cutting an edge of the tree. The two
            sets of sequences are re-aligned separately and combined to produce
            a new multiple alignment.
            </summary>
            <param name="edgeIndex">zero-based edge index</param>
            <returns>return[0] is the indices of leaves in the first subtree rooted below the edge
                     return[1] is the indices of leaves in the second subtree with the same root as the original tree</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge">
            <summary>
            Implementation of Edge class in Binary Guide Tree.
            
            An edge connects two Binary Guide Tree nodes: parent and child.
            
            The length of the edge represents the evolutionary distance between 
            the two nodes it connects.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.ID">
            <summary>
            The ID of this edge class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.Length">
            <summary>
            The length of this edge class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.ParentNode">
            <summary>
            The parent node connecting to this edge
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.ChildNode">
            <summary>
            The child node connecting to the edge
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.#ctor">
            <summary>
            Construct an empty edge.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeEdge.#ctor(System.Int32)">
            <summary>
            Construct an edge with an assigned ID.
            </summary>
            <param name="id">zero-based edge ID</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode">
            <summary>
            Node class of Binary Guide Tree.
            
            The leaf nodes are associated with sequences;
            the internal nodes are associated with the set of aligned sequences of 
            its subtree.
            
            All the nodes are associated with a profile matrix of its sequence(s).
            
            The root node is the alignment of all sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.ID">
            <summary>
            The ID of this node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.SequenceID">
            <summary>
            The ID of sequence connected to this node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.EString">
            <summary>
            The EString (alignment path) on this node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.LeftChildren">
            <summary>
            The left child node of the current node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.RightChildren">
            <summary>
            The right child node of the current node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.Parent">
            <summary>
            The parent node of the current node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.ProfileAlignment">
            <summary>
            The profile associated with the current node.
            Internal node is associated with an aligned profile from its two chilrend's profiles.
            Leaf node is associated with a profile converted from a single sequence.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.IsRoot">
            <summary>
            Check whether this node is root in the tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.IsLeaf">
            <summary>
            Check whether this node is a leaf in the tree
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.NeedReAlignment">
            <summary>
            It is false if ProfileAlignment is already generated, and in the tree comparison,
            the left and right subtrees are the same as in old tree. Then the alignment of this 
            node can be ignored.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.Weight">
            <summary>
            The weight of sequences assigned of this node
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.ParentEdge">
            <summary>
            The edge that link this node to its parent
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.#ctor">
            <summary>
            Construct an empty node
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTreeNode.#ctor(System.Int32)">
            <summary>
            Construct a node with assigned ID
            </summary>
            <param name="id">zero-based node ID</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix">
            <summary>
            Abstract class of Distance Matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix._dimension">
            <summary>
            [_dimension x _dimension] matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix._nearestNeighbors">
            <summary>
            One-dimension array recording the minimum value row index in each column
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix._nearestDistances">
            <summary>
            One-dimension array recording the minimum distance in each column
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.Dimension">
            <summary>
            The dimension of this matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.NearestNeighbors">
            <summary>
            One-dimension array recording the minimum value row index in each column
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.NearestDistances">
            <summary>
            One-dimension array recording the minimum distance in each column
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.#ctor(System.Int32)">
            <summary>
            Construct a [dimension x dimension] matrix
            </summary>
            <param name="dimension">integer dimension</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Access the element of the matrix. The indexer is different
            between symmetric and asymmetric matrices, because symmetric 
            matrix is stored in a linear list with bottom left corner.
            </summary>
            <param name="row">zero-based row number</param>
            <param name="col">zero-based col number</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.MinimumValue">
            <summary>
            The smallest value in the matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceMatrix.MinimumValueCoordinates">
            <summary>
            The coordinates of the smallest value in the matrix
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel">
            <summary>
            Base class for dynamic programming (DP) profile alignment algorithms, including 
            *Profile* NeedlemanWunsch, SmithWaterman and PairwiseOverlap.
            
            Unlike traditional dynamic programming, profile DP takes two profiles to do the alignment.
            Correspondingly, the similarity score of two profiles (two distribution of items)
            needs to be calculated instead of looking up 'SimilarityMatrix'.
            
            Modifications based on pairwise Dynamic Programming:
            
            - data type changes to float to accomodate function score
            - bytearray _a, and _b store position index and gap code instead of encodings
            - aligned bytearray aAligned, bAligned are class members
            - gap code is -1 (255 before)
            - aligned bytearray is then used to constructed aligned profiles (not sequences)
            - aligned pairwise sequences are not created after DP, 
              instead eStrings are created for each pairwise alignment, storing alignment operations
              which will be converted to aligned sequences at the final stage when all sequences
              are aligned
            - consensus sequence: at each column, use the majority item to represent the positin
            - profile-profile function is a parameter
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._profileProfileScoreFunction">
            <summary>
            The delegate of profile-profile score function.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._cachingFunction">
            <summary>
            The delegate of caching function.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._FScore">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._FSource">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._M">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._Ix">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._Iy">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._a">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._b">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._similarityMatrix">
            <summary>
            Similarity matrix used in scoring function. Set using property SimilarityMatrix below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._gapOpenPenalty">
            <summary>
            Gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example _gapOpenPenalty = -8, not +8.
            Set when calling full AlignSimple method, or use property GapOpenCost below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._gapExtensionPenalty">
            <summary>
            Gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example _gapExtensionPenalty = -2, not +2.
            Set when calling full Align method, or use property GapExtensionCost below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._nCols">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._nRows">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel._gapCode">
            <summary>
            Signifies gap in aligned sequence (stored as int[]) during traceback.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.Weights">
            <summary>
            The weights of the two sets of profiles
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.AlignedA">
            <summary>
            The aligned vector of the first sequence indices of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.AlignedB">
            <summary>
            The aligned vector of the second sequence indices of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.#ctor">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            
            The default numberOfPartitions is the number of cores in the system.
            The default profile function is WeightedInnerProduct.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32)">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            
            This constructor is for non-parallel version.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.AlignSimple(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified AlignSimple to align two profiles with constant gap panelty.
            </summary>
            <param name="profileA">First input sequence.</param>
            <param name="profileB">Second input sequence.</param>
            <returns>Object containing the alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.Align(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified Align to align two profiles with affine gap panelty.
            </summary>
            <param name="profileA">first input profile</param>
            <param name="profileB">second input profile</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.AlignSimple(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Pairwise alignment of two sequences using a single gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a single gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.)</param>
            <param name="profileAlignmentA">First input profileAlignment.</param>
            <param name="profileAlignmentB">Second input profileAlignment.</param>
            <returns>Aligned sequences and other information as SequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.Align(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.)</param>
            <param name="profileAlignmentA">First input profileAlignment</param>
            <param name="profileAlignmentB">Second input profileAlignment</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback step for the relevant algorithm.  Each algorithm must override this
            since the traceback differs for the different algorithms.
            </summary>
            <param name="aAligned">First aligned sequence (output)</param>
            <param name="bAligned">Second aligned sequenc (output)</param>
            <returns>Optimum score for this alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.FillMatrixSimple">
            <summary>
            Fills F matrix for single gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.FillMatrixAffine">
            <summary>
            Fills matrix data for affine gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.ValidateAlignInput(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified for profiles.
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.BuildOutOfMemoryMessage(System.Exception,System.Boolean)">
            <summary>
            Builds detailed error message for OutOfMemory exception.
            </summary>
            <param name="ex">Exception.</param>
            <param name="isAffine">True for affine case, false for one gap penalty.</param>
            <returns>Message to send to user.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SetCellValuesSimple(System.Int32,System.Int32)">
            <summary>
            Modified.
            Sets general case cell score and source for one gap parameter.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SetCellValuesAffine(System.Int32,System.Int32)">
            <summary>
            Modified.
            Sets general case cell score and matrix elements for general affine gap case.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the F matrix.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets member variables that are unique to a specific algorithm.
            These must be reset for each alignment, initialization in the constructor
            only works for the first call to AlignSimple.  This routine is called at the beginning
            of each AlignSimple method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the matrix for affine gap implementation.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SetBoundaryConditionSimple">
            <summary>
            Sets boundary conditions in the F matrix for the one gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SetBoundaryConditionAffine">
            <summary>
            Sets boundary conditions for the dynamic programming matrix for the affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection">
            <summary> Direction to source of cell value, used during traceback. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection.Diagonal">
            <summary> Source was up and left from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection.Up">
            <summary> Source was up from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection.Left">
            <summary> Source was left of current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection.Stop">
            <summary> During traceback, stop at this cell (used by SmithWaterman). </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SourceDirection.Invalid">
            <summary> Error code, if cell has code Invalid an error has occurred. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SimilarityMatrix">
            <summary> Sets similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.GapOpenCost">
            <summary> 
            Set gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.GapExtensionCost">
            <summary> 
            Set gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.GenerateEString(System.Int32[])">
            <summary>
            Defined in MUSCLE (Edgar 2004) paper.
            eString stores the operation of the child node sequence to become
            the aligned sequence in its parent node.
            
            eString is a vector of integers: positive integer n means 
            skip n letters; negative integer -n means insert n indels 
            at the current position.
            
            The alignment path of sequence (leaf node) is the series of 
            eString through internal nodes from this leaf to root (including
            leaf node).
            
            with eString, there's no need to adjust the sequences until
            progressive alignment is finished.
            </summary>
            <param name="aligned">aligned integer array</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.GenerateSequenceFromEString(System.Collections.Generic.List{System.Int32},Bio.ISequence)">
            <summary>
            Apply alignment operations in eString to the sequence in order to
            generate an aligned sequence
            </summary>
            <param name="eString">estring with alignment path</param>
            <param name="seq">a sequece to aligned</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.CachingWeightedInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Cache the multification of similarity matrix and one profiles.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileAlignmentA">profile alignment A</param>
            <param name="profileAlignmentB">profile alignment B</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.CachingIndex(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Caching Indexes
            </summary>
            <param name="profileAlignment">profileAlignment</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.DumpF">
            <summary>
            Writes F matrix to application log.  Used for test and debugging.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedInnerProductCached(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedInnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedEuclideanDistance(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted Euclidean distance of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedEuclideanDistanceFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted Euclidean distance of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.InnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Inner-profuct of two observed profile vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.InnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Inner-profuct of two observed profile vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedInnerProductShifted(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.WeightedInnerProductShiftedFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.PearsonCorrelation(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Correlation of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.LogExponentialInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.LogExponentialInnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.LogExponentialInnerProductShifted(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.LogExponentialInnerProductShiftedFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.SymmetrizedEntropy(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Symmetrized entropy of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.JensenShannonDivergence(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Jensen-Shannon divergence of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.ParallelIndexMasterGenerator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Divide a table into [numberOfPartitions x numberOfPartitions] blocks, and index them in anti-diagonal direction.
            Each block is indexed by [row, column] in the block table.
            
            In the returned dictionary, the key is the index of a line of anti-diagonal blocks, and the value is the corresponding
            block index (row and column index).
            </summary>
            <param name="numberOfRows">the number of rows in the original table</param>
            <param name="numberOfCols">the number of columns in the original table</param>
            <param name="numberOfPartitions">the number of partitions in the row and column direction</param>
            <returns>a dictionary with anti-diagonal index and block indices</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerParallel.IndexLocator(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Divide a range of numbers and return the start and end positions of one partition.
            </summary>
            <param name="startPosition">zero-based start position</param>
            <param name="endPosition">zero-based end position</param>
            <param name="numberOfPartitions">the number of partitions</param>
            <param name="index">the ith partition</param>
            <returns>return the start position and end position of the selected partition</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial">
            <summary>
            Base class for dynamic programming (DP) profile alignment algorithms, including 
            *Profile* NeedlemanWunsch, SmithWaterman and PairwiseOverlap.
            
            Unlike traditional dynamic programming, profile DP takes two profiles to do the alignment.
            Correspondingly, the similarity score of two profiles (two distribution of items)
            needs to be calculated instead of looking up 'SimilarityMatrix'.
            
            Modifications based on pairwise Dynamic Programming:
            
            - data type changes to float to accomodate function score
            - bytearray _a, and _b store position index and gap code instead of encodings
            - aligned bytearray aAligned, bAligned are class members
            - gap code is -1 (255 before)
            - aligned bytearray is then used to constructed aligned profiles (not sequences)
            - aligned pairwise sequences are not created after DP, 
              instead eStrings are created for each pairwise alignment, storing alignment operations
              which will be converted to aligned sequences at the final stage when all sequences
              are aligned
            - consensus sequence: at each column, use the majority item to represent the positin
            - profile-profile function is a parameter
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._profileProfileScoreFunction">
            <summary>
            The delegate of profile-profile score function.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._cachingFunction">
            <summary>
            The delegate of caching function.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._FScore">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            change to float
            Gotoh's optimization is used to reduce memory usage
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._FScoreDiagonal">
            <summary>
            _FScoreDiagonal is used to store diagonal value from previous row.
            Used for Gotoh optimization of single gap penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._FSource">
            <summary>
            _FSource stores the source for the each cell in the F matrix.
            Source is coded as 0 diagonal, 1 up, 2 left, see enum SourceDirection below
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._MaxScore">
            <summary>
            _MaxScore stores the maximum value for the affine gap penalty implementation.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._MaxScoreDiagonal">
            <summary>
            _MaxScoreDiagonal is used to store maximum value from previous row.
            Used for Gotoh optimization of affine gap penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._IxGapScore">
            <summary>
            Stores alignment score for putting gap in 'x' sequence for affine gap penalty implementation.
            Alignment score if xi aligns to a gap after yi
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._IyGapScore">
            <summary>
            Stores alignment score for putting gap in 'y' sequence for affine gap penalty implementation.
            Alignment score if yi aligns to a gap after xi
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._a">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            Use position index instead of encoding.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._b">
            <summary>
            Check out DynamicProgrammingPairwiseAligner.
            Use position index instead of encoding.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._similarityMatrix">
            <summary>
            Similarity matrix used in scoring function. Set using property SimilarityMatrix below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._gapOpenPenalty">
            <summary>
            Gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example _gapOpenPenalty = -8, not +8.
            Set when calling full AlignSimple method, or use property GapOpenCost below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._gapExtensionPenalty">
            <summary>
            Gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example _gapExtensionPenalty = -2, not +2.
            Set when calling full Align method, or use property GapExtensionCost below.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._nCols">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._nRows">
            <summary>
            Number of rows and columns in the dynamic programming matrix.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._gapCode">
            <summary>
            Signifies gap in aligned sequence (stored as int[]) during traceback.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._profileAlignmentA">
            <summary>
            The profileAlignments to be aligned
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._profileAlignmentB">
            <summary>
            The profileAlignments to be aligned
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._weights">
            <summary>
            The weights of the two sets of profiles
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._indexA">
            <summary>
            Used to record profile index when sorting
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._indexB">
            <summary>
            Used to record profile index when sorting
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._indexAs">
            <summary>
            Cache profile index when sorting
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._indexBs">
            <summary>
            Cache profile index when sorting
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial._cachedMatrix">
            <summary>
            Cached the multification of one profile alignment and the similarity matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.Weights">
            <summary>
            The weights of the two sets of profiles
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.AlignedA">
            <summary>
            The aligned vector of the first sequence indices of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.AlignedB">
            <summary>
            The aligned vector of the second sequence indices of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.#ctor">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            
            The default numberOfPartitions is the number of cores in the system.
            The default profile function is WeightedInnerProduct.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32)">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            
            This constructor is for non-parallel version.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for all the pairwise aligner (NeedlemanWunsch, SmithWaterman, Overlap).
            Sets default similarity matrix and gap penalties.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.AlignSimple(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified AlignSimple to align two profiles with constant gap panelty.
            </summary>
            <param name="profileA">First input sequence.</param>
            <param name="profileB">Second input sequence.</param>
            <returns>Object containing the alignment.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.Align(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified Align to align two profiles with affine gap panelty.
            </summary>
            <param name="profileA">first input profile</param>
            <param name="profileB">second input profile</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.AlignSimple(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Pairwise alignment of two sequences using a single gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with a single gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapPenalty">Gap penalty (by convention, use a negative number for this.)</param>
            <param name="profileAlignmentA">First input profileAlignment.</param>
            <param name="profileAlignmentB">Second input profileAlignment.</param>
            <returns>Aligned sequences and other information as SequenceAlignment object.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.Align(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Pairwise alignment of two sequences using an affine gap penalty.  The various algorithms in derived classes (NeedlemanWunsch, 
            SmithWaterman, and PairwiseOverlap) all use this general engine for alignment with an affine gap penalty.
            </summary>
            <param name="similarityMatrix">Scoring matrix.</param>
            <param name="gapOpenPenalty">Gap open penalty (by convention, use a negative number for this.)</param>
            <param name="gapExtensionPenalty">Gap extension penalty (by convention, use a negative number for this.)</param>
            <param name="profileAlignmentA">First input profileAlignment</param>
            <param name="profileAlignmentB">Second input profileAlignment</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback step for the relevant algorithm.  Each algorithm must override this
            since the traceback differs for the different algorithms.
            </summary>
            <param name="aAligned">First aligned sequence (output)</param>
            <param name="bAligned">Second aligned sequenc (output)</param>
            <returns>Optimum score for this alignment</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.FillMatrixSimple">
            <summary>
            Fills F matrix for single gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.FillMatrixAffine">
            <summary>
            Fills matrix data for affine gap penalty implementation.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.ValidateAlignInput(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Modified for profiles.
            </summary>
            <param name="aInput">First input sequence.</param>
            <param name="bInput">Second input sequence.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.BuildOutOfMemoryMessage(System.Exception,System.Boolean)">
            <summary>
            Builds detailed error message for OutOfMemory exception.
            </summary>
            <param name="ex">Exception.</param>
            <param name="isAffine">True for affine case, false for one gap penalty.</param>
            <returns>Message to send to user.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetCellValuesSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Modified.
            Sets general case cell score and source for one gap parameter.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetCellValuesAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Modified.
            Sets general case cell score and matrix elements for general affine gap case.
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
            <returns>score for cell</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the F matrix.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets member variables that are unique to a specific algorithm.
            These must be reset for each alignment, initialization in the constructor
            only works for the first call to AlignSimple.  This routine is called at the beginning
            of each AlignSimple method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetOptimalScoreSimple">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for simple gap penalty
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetOptimalScoreAffine">
            <summary>
            Allows each algorithm to set optimal score at end of matrix construction
            Used for affine gap penalty
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets cell (col,row) of the matrix for affine gap implementation.  Different algorithms will use different scoring
            and traceback methods and therefore will override this method.
            </summary>
            <param name="col">col of cell to fill</param>
            <param name="row">row of cell to fill</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetRowBoundaryConditionSimple">
            <summary>
            Sets boundary conditions for first row in F matrix for single gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for first column in F matrix for single gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetRowBoundaryConditionAffine">
            <summary>
            Sets boundary conditions for first row in dynamic programming matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets boundary conditions for first column in dynamic programming matrix for affine gap penalty case.  
            As in the FillCell methods, different algorithms will use different 
            boundary conditions and will override this method.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">Cell number</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection">
            <summary> Direction to source of cell value, used during traceback. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection.Diagonal">
            <summary> Source was up and left from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection.Up">
            <summary> Source was up from current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection.Left">
            <summary> Source was left of current cell. </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection.Stop">
            <summary> During traceback, stop at this cell (used by SmithWaterman). </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SourceDirection.Invalid">
            <summary> Error code, if cell has code Invalid an error has occurred. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SimilarityMatrix">
            <summary> Sets similarity matrix for use in alignment algorithms. </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.GapOpenCost">
            <summary> 
            Set gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.GapExtensionCost">
            <summary> 
            Set gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.GenerateEString(System.Int32[])">
            <summary>
            Defined in MUSCLE (Edgar 2004) paper.
            eString stores the operation of the child node sequence to become
            the aligned sequence in its parent node.
            
            eString is a vector of integers: positive integer n means 
            skip n letters; negative integer -n means insert n indels 
            at the current position.
            
            The alignment path of sequence (leaf node) is the series of 
            eString through internal nodes from this leaf to root (including
            leaf node).
            
            with eString, there's no need to adjust the sequences until
            progressive alignment is finished.
            </summary>
            <param name="aligned">aligned integer array</param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.GenerateSequenceFromEString(System.Collections.Generic.List{System.Int32},Bio.ISequence)">
            <summary>
            Apply alignment operations in eString to the sequence in order to
            generate an aligned sequence
            </summary>
            <param name="eString">estring with alignment path</param>
            <param name="seq">a sequece to aligned</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.CachingWeightedInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Cache the multification of similarity matrix and one profiles.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileAlignmentA">profile alignment A</param>
            <param name="profileAlignmentB">profile alignment B</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.CachingIndex(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Caching Indexes
            </summary>
            <param name="profileAlignment">profileAlignment</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedInnerProductCached(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedInnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedEuclideanDistance(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted Euclidean distance of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedEuclideanDistanceFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted Euclidean distance of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.InnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Inner-profuct of two observed profile vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.InnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Inner-profuct of two observed profile vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedInnerProductShifted(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.WeightedInnerProductShiftedFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Weighted inner-profuct by shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.PearsonCorrelation(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Correlation of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.LogExponentialInnerProduct(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.LogExponentialInnerProductFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.LogExponentialInnerProductShifted(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.LogExponentialInnerProductShiftedFast(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.SymmetrizedEntropy(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Symmetrized entropy of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.JensenShannonDivergence(Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Jensen-Shannon divergence of observation vectors
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.ParallelIndexMasterGenerator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Divide a table into [numberOfPartitions x numberOfPartitions] blocks, and index them in anti-diagonal direction.
            Each block is indexed by [row, column] in the block table.
            
            In the returned dictionary, the key is the index of a line of anti-diagonal blocks, and the value is the corresponding
            block index (row and column index).
            </summary>
            <param name="numberOfRows">the number of rows in the original table</param>
            <param name="numberOfCols">the number of columns in the original table</param>
            <param name="numberOfPartitions">the number of partitions in the row and column direction</param>
            <returns>a dictionary with anti-diagonal index and block indices</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DynamicProgrammingProfileAlignerSerial.IndexLocator(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Divide a range of numbers and return the start and end positions of one partition.
            </summary>
            <param name="startPosition">zero-based start position</param>
            <param name="endPosition">zero-based end position</param>
            <param name="numberOfPartitions">the number of partitions</param>
            <param name="index">the ith partition</param>
            <returns>return the start position and end position of the selected partition</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering">
            <summary>
            Hierarchically clusters sequences based on distance matrix.
            
            Steps: 
            1) Initially all sequences are clusters themselves.
            2) Iteratively: identify the cloesest pair of sequences (clusters) in the distance matrix,
            cluster them into one cluster, and update distances of this cluster with the rest clusters.
            3) Terminate when only one cluster left. 
            
            A binary guide tree is then generated: 
            the root of the tree is the final cluster; leaves are sequence clusters.
            From bottom up, the nodes order represents the clustering order,
            and it's kept in a node list.
            The progressive aligner will then follow this order to align the set of sequences.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering._nodes">
            <summary>
            The node list in the generated binary tree
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering._edges">
            <summary>
            The edge list 
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering._updateDistanceMethod">
            <summary>
            Delegate function for updating distances
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering._clusters">
            <summary>
            The list stores the current clusters generated
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering._indexToCluster">
            <summary>
            Record the index of cluster using the index in the distance matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.Nodes">
            <summary>
            The node list of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.Edges">
            <summary>
            The edge list of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            Construct clusters based on distance matrix.
            The default distance update method is 'average'
            </summary>
            <param name="distanceMatrix">IDistanceMatrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes)">
            <summary>
            Construct clusters using different update methods
            </summary>
            <param name="distanceMatrix">IDistanceMatrix</param>
            <param name="updateDistanceMethodName">enum EUpdateDistanceMethods</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.UpdateAverage(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            arithmetic average of distance[nextA,other] and distance[nextB,other]
            </summary>
            <param name="distanceMatrix">distance matrix for the cluster</param>
            <param name="nextA">integer number of sequence 1 to be clustered next</param>
            <param name="nextB">integer number of sequence 2 to be clustered next</param>
            <param name="other">the other cluster whose distance will be updated</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.UpdateSingle(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            Minimum of distance[nextA,other] and distance[nextB,other]
            </summary>
            <param name="distanceMatrix">distance matrix for the cluster</param>
            <param name="nextA">integer number of sequence 1 to be clustered next</param>
            <param name="nextB">integer number of sequence 2 to be clustered next</param>
            <param name="other">the other cluster whose distance will be updated</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.UpdateComplete(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            Maximum of distance[nextA,other] and distance[nextB,other]
            </summary>
            <param name="distanceMatrix">distance matrix for the cluster</param>
            <param name="nextA">integer number of sequence 1 to be clustered next</param>
            <param name="nextB">integer number of sequence 2 to be clustered next</param>
            <param name="other">the other cluster whose distance will be updated</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClustering.UpdateWeightedMAFFT(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adapted from MAFFT software:
            weighted mixture of minimum and average linkage 
            d = (1-s)*d_min + s*d_avg
            where s is 0.1 by default
            </summary>
            
            <param name="distanceMatrix">distance matrix for the cluster</param>
            <param name="nextA">integer number of sequence 1 to be clustered next</param>
            <param name="nextB">integer number of sequence 2 to be clustered next</param>
            <param name="other">the other cluster whose distance will be updated</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel">
            <summary>
            Hierarchically clusters sequences based on distance matrix.
            
            Steps: 
            1) Initially all sequences are clusters themselves.
            2) Iteratively: identify the cloesest pair of sequences (clusters) in the distance matrix,
            cluster them into one cluster, and update distances of this cluster with the rest clusters.
            3) Terminate when only one cluster left. 
            
            A binary guide tree is then generated: 
            the root of the tree is the final cluster; leaves are sequence clusters.
            From bottom up, the nodes order represents the clustering order,
            and it's kept in a node list.
            The progressive aligner will then follow this order to align the set of sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.Nodes">
            <summary>
            The node list of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.Edges">
            <summary>
            The edge list of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            Construct clusters based on distance matrix.
            The default distance update method is 'average'
            </summary>
            <param name="distanceMatrix">IDistanceMatrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes)">
            <summary>
            Construct clusters using different update methods
            </summary>
            <param name="distanceMatrix">IDistanceMatrix</param>
            <param name="updateDistanceMethodName">enum EUpdateDistanceMethods</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.Initialize(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            Initialize: make each sequence a cluster
            </summary>
            <param name="distanceMatrix">distance matrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.GetNextPairOfCluster(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            O(N) algorithm to get the next closest pair of clusters
            </summary>
            <param name="distanceMatrix">distance matrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.CreateCluster(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            Combine cluster nextA and nextB into a new cluster
            </summary>
            <param name="distanceMatrix">distance matrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.UpdateDistance(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix)">
            <summary>
            Update the distance between the new cluster with the rest clusters
            </summary>
            <param name="distanceMatrix">distance matrix</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.UpdateClusters">
            <summary>
            Update clusters:
            remove clusters nextA and nextB and add a new merged cluster[nextA, nextB]
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.HierarchicalClusteringParallel.UpdateNearestColumn(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix,System.Int32)">
            <summary>
            Update the nearest neighbor and nearest distance of a column in a distance matrix 
            </summary>
            <param name="distanceMatrix">distance matrix</param>
            <param name="column">zero-based integer</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix">
            <summary>
            Implementation of Distance matrix Interface.
            
            A distance matrix is a matrix with pairwise distances on a set of sequences.
            It is therefore a square matrix with the dimension equals to the number of
            sequences, where rows and columns are sequences and elements are distances.
            
            A distance matrix could be symmetry (d(A,B) = d(B,A)) or 
            asymmetry (d(A,B)!= d(B,A)). 
            
            The distance, DistanceMatrix[i,j], is proportional to the 'evolutionary' 
            distance between two sequences, i.e. the higher the value, the more divergent
            the two sequences. Thus the minimum value of the matrix corresponds to the 
            closest pair in the dataset.
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.Dimension">
            <summary>
            The dimention of distance matrix is [Dimention x Dimention]
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Access the element by indexer
            </summary>
            <param name="row">zero-based row index</param>
            <param name="col">zero-based col index</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.MinimumValue">
            <summary>
            Return the minimum distance value in the matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.MinimumValueCoordinates">
            <summary>
            Return the coordinate of the minimum distance value in the matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.NearestNeighbors">
            <summary>
            One-dimension array recording the minimum value row index in each column
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrix.NearestDistances">
            <summary>
            One-dimension array recording the minimum distance in each column
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrixGenerator">
            <summary>
            Implementation of distance matrix generator interface.
            
            The generator takes a list of sequences as input, and generates
            a distance matrix, a square matrix, with its dimension equals to 
            the number of input sequences.
            
            The generator measures the distance between each pair of sequences, 
            and deposits it into the matrix. The matrix is then used for 
            Hierarchical Clustering method to generate a binary guide tree.
            
            The inputs sequences can be either aligned or unaligned.
            
            In the case of unaligned seqences, Kmer Counting method is used to
            estimate the distances between sequences; in the case of aligned
            sequences, Kimura method is used instead.
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrixGenerator.DistanceMatrix">
            <summary>
            The distance matrix generated
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrixGenerator.Name">
            <summary>
            The method name to generate the matrix
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IDistanceMatrixGenerator.GenerateDistanceMatrix(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Generate the distance matrix from a set of sequences
            </summary>
            <param name="sequences">a set of sequences (aligned or unaligned)</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IHierarchicalClustering">
            <summary>
            Implementation of Hierarchical Clustering interface.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IHierarchicalClustering.Nodes">
            <summary>
            The node list of the interface
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IHierarchicalClustering.Edges">
            <summary>
            The edge list of the interface
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes">
            <summary>
            The enum of hierarchical clustering update methods,
            which update the distances between newly merged cluster[nextA,nextB] and a single cluster [other]
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes.Average">
            <summary>
            {average} : 
            arithmetic average of distance[nextA,other] and distance[nextB,other]
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes.Single">
            <summary>
            {single}  : 
            minimum of distance[nextA,other] and distance[nextB,other]
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes.Complete">
            <summary>
            {complete}: 
            maximum of distance[nextA,other] and distance[nextB,other]
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes.WeightedMAFFT">
            <summary>
            Adapted from MAFFT software:
            weighted mixture of minimum and average linkage 
            d = (1-s)*d_min + s*d_avg
            where s is 0.1 by default
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodSelector">
            <summary>
            The delegate function of methods to update the distances between newly merged cluster[nextA,nextB] 
            and a single cluster [other].
            
            There are three basic different methods avaialbe:
                {average} : arithmetic average of distance[nextA,other] and distance[nextB,other]
                {single}  : minimum of distance[nextA,other] and distance[nextB,other]
                {complete}: maximum of distance[nextA,other] and distance[nextB,other]
            and a modified method:
                {weightedMAFFT}: mixture of single and average
            </summary>
            <param name="distanceMatrix">distance matrix for the cluster</param>
            <param name="nextA">integer number of sequence 1 to be clustered next</param>
            <param name="nextB">integer number of sequence 2 to be clustered next</param>
            <param name="other">the other cluster whose distance will be updated</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAligner">
            <summary>
            Multiple sequences alignment interface.
            Multiple sequence alignment (MSA) is used to align three or  
            more sequences in preparation for further analysis.  
            More info on MSA can be found at 
            http://en.wikipedia.org/wiki/Multiple_sequence_alignment)
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAligner.AlignedSequences">
            <summary>
            Gets aligned sequences with equal length by inserting gaps '-' at
            appropriate positions so that the alignment score is optimized.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAligner.AlignmentScore">
            <summary>
            Gets the alignment score of the multiple sequence alignment.
            A typical score is the summation of pairwise alignment scores.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAlignment">
            <summary>
            Multiple sequences alignment interface.
            Multiple sequence alignment (MSA) is used to align three or  
            more sequences in preparation for further analysis.  
            More info on MSA can be found at 
            http://en.wikipedia.org/wiki/Multiple_sequence_alignment)
            /// </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAlignment.AlignedSequences">
            <summary>
            Aligned sequences with equal length by inserting gaps '-' at
            appropriate positions so that the alignment score is optimized.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAlignment.AlignmentScore">
            <summary>
            The alignment score of the multiple sequence alignment.
            A typical score is the summation of pairwise alignment scores.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAlignment.Align(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            The method to align multiple sequences.
            The gap penalty is affine gap score.
            </summary>
            <param name="sequences">a set of unaligned sequences</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IMultipleSequenceAlignment.Name">
            <summary>
            The name of multiple sequence alignment method.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner">
            <summary>
            A profile alignment algorithm that aligns two profiles. 
            
            Profile-profile alignment and scoring is analogous to 
            pairwise sequence alignment, except that the objects 
            being compared are profiles: matrices of distributions, 
            representing the frequencies of sequence items at each 
            position in a corresponding multiple sequence alignment.
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.AlignSimple(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            AlignSimple uses a single gap penalty.
            </summary>
            <param name="profileA">first input profile</param>
            <param name="profileB">second input profile</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.Align(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Align uses the affine gap model, which requires a gap open and a gap extension penalty.
            </summary>
            <param name="profileA">first input profile</param>
            <param name="profileB">second input profile</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.SimilarityMatrix">
            <summary>
            The similarity matrix determines the score for any possible pair
            of symbols that are encountered at a common location across the 
            sequences being aligned.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.GapOpenCost">
            <summary>
            The GapOpenCost is the cost of inserting a gap character into 
            a sequence.
            </summary>
            <remarks>
            In the simple gap model, all gaps use this cost. In the affine gap
            model, the GapExtensionCost below is also used.
            </remarks>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.GapExtensionCost">
            <summary>
            The GapExtensionCost is the cost of extending an already existing gap.
            This is used for the affine gap model, not used for the simple gap model.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.GenerateEString(System.Int32[])">
            <summary>
            Defined in MUSCLE (Edgar 2004) paper.
            eString stores the operation of the child node sequence to become
            the aligned sequence in its parent node.
            
            eString is a vector of integers: positive integer n means 
            skip n letters; negative integer -n means insert n indels 
            at the current position.
            
            The alignment path of sequence (leaf node) is the series of 
            eString through internal nodes from this leaf to root (including
            leaf node).
            
            with eString, there's no need to adjust the sequences until
            progressive alignment is finished.
            </summary>
            <param name="aligned">aligned integer array</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.GenerateSequenceFromEString(System.Collections.Generic.List{System.Int32},Bio.ISequence)">
            <summary>
            Apply alignment operation in eString to the sequence to
            generate aligned sequence
            </summary>
            <param name="eString">estring with alignment path</param>
            <param name="seq">a sequece to aligned</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.AlignedA">
            <summary>
            Return aligned sequence as a vector of integer:
            positive integer N means it's original the Nth letter;
            negative integer -1 means it's an indel.
            
            These two vectors are used to convert to eString (alignment paths)
            and combine two profiles/profileAlignments.
            
            AlignedA is the aligned integer of the first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.AlignedB">
            <summary>
            AlignedB is the aligned integer of the first sequence
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner.Weights">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignerNames">
            <summary>
            The enum of profile-profile aligner names
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignerNames.SmithWatermanProfileAligner">
            <summary>
            Profile Smith Waterman alignment algorithm
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignerNames.NeedlemanWunschProfileAligner">
            <summary>
            profile Needleman Wunsch alignment algorithm
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment">
            <summary>
            IProfileAlignment is an extension of ISequenceAlignment
            with two new members:
            
                - derived profiles from the set of alignment sequences in ISequenceAlignment
                - float version alignment score
                
            IProfileAlignment represents multiple sequence alignment as well as the profiles.
            (ISequenceAlignment represents a pair of aligned sequences).
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment.Score">
            <summary>
            The score for the alignment. Higher scores mean better alignments.
            The score is determined by the alignment algorithm used.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment.ProfilesMatrix">
            <summary>
            The profiles converted from ISequenceAlignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment.NumberOfSequences">
            <summary>
            The number of sequences in the profile alignment
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles">
            <summary>
            Implementation of profile interface. 
            
            Profile is a multiple alignment treated as a sequence by 
            regarding each column as an alignable symbol. Thus two sets
            of sequences can be aligned by aligning profiles.
            
            The symbol is a distribution vector, recording the frequencies
            of items in the column.
            
            It requires the set of aligned sequences to generate profiles.
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles.ProfilesMatrix">
            <summary>
            profile is a [sequenceLength x itemSetLength] matrix
            with each column as a profile (distribution of items)
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles.Item(System.Int32)">
            <summary>
            Access columns (profiles)
            </summary>
            <param name="col">zero-based column index</param>
            <returns></returns>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles.RowSize">
            <summary>
            The row dimension of profile matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles.ColumnSize">
            <summary>
            The column dimension of profile matrix
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles.Clear">
            <summary>
            Clear the memory
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProgressiveAligner">
            <summary>
            The implementation of progressive alignment.
            
            Progressive alignment is a heuristic algorithm to align multiple sequences,
            with very fast speed. The algorithm contains a series steps of pairwise 
            alignment of a pair of sequences or profiles (aligned sequences). The accuracy
            performance of progressive alignment highly depends on the order of the steps.
            
            The pros of progressive alignment is its fast speed and relatively high accuracy.
            The cons are that it is not global optimization, and the the performance is
            not good for divergent input sequences.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProgressiveAligner.Align(System.Collections.Generic.IList{Bio.ISequence},Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree)">
            <summary>
            The pregressive alignment algorithm aligns a set of sequences guided by
            a binary tree. 
            </summary>
            <param name="sequences">input sequences</param>
            <param name="tree">a binary guide tree</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProgressiveAligner.AlignedSequences">
            <summary>
            The aligned sequences generated
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProgressiveAligner.Name">
            <summary>
            The name of the progressive aligner.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment">
            <summary>
            An ISequenceAlignment is the result of running an alignment algorithm on a set 
            of two or more sequences. This could be a pairwise alignment, an MSA (multiple 
            sequence alignment), or an overlap alignment of the sort needed for sequence
            assembly.
            </summary>
            <remarks>
            this is just a storage object – it’s up to an algorithm object to fill it in.
            for efficiency’s sake, we are leaving it up to calling code to keep track of the 
            input sequences, if desired.
            </remarks>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Sequences">
            <summary>
            A list of the (usually modified) output sequences, in the same order
            that the inputs were passed to the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Consensus">
            <summary>
            A consensus sequence representing the alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Item(System.Int32)">
            <summary>
            Returns the ith sequence in the alignment.
            </summary>
            <param name="iSequence">The index.</param>
            <returns>The sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.AddSequence(Bio.ISequence)">
            <summary>
            Add a new sequence to the end of the sequence collection.
            </summary>
            <param name="sequence">The sequence to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Score">
            <summary>
            The score for the alignment. Higher scores mean better alignments.
            The score is determined by the alignment algorithm used.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Offsets">
            <summary>
            Offset is the starting position of alignment of sequence1 
            with respect to sequence2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ISequenceAlignment.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceMatrixGenerator">
            <summary>
            Implemetation of Distance Matrix Generator class via Kimura method.
            
            Generates a distance matrix from a set of *aligned* sequences by Kimura distance 
            method. See paper:
            MUSCLE: a multiple sequence alignment method with reduced time and space complexity. 
            Edgar, 2004, for details.
            
            An additive distance measure is defined so d(A,B) = d(A,C) + d(B,C). 
            The mutation distance is trivially additive. Given the fractional identity D
            (percent identity), the mutation distance can be approximated as 1-D.
            As sequences diverge, there is an increasing probability of multiple mutations
            at a single site. Kimura correction is used here to correct this problem.
            
            The generator is an O(N^2) algorithm. In the double loop, the generator calculates
            percent identity of each pair, and converts it to kimura distance score. These two 
            functions are defined in class KimuraDistanceScoreCalculator.
            
            The distances will be stored in a symmetric square distance matrix, where rows and 
            cols are sequences, and elements are distance scores. The distance matrix is then 
            used to generate binary guide tree by hierarchical clustering method.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceMatrixGenerator.DistanceMatrix">
            <summary>
            The distance matrix generated in this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceMatrixGenerator.Name">
            <summary>
            The method name of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceMatrixGenerator.#ctor">
            <summary>
            Construct DistanceMatrix via Kimura method.
            The two functions are defined in KimuraDistanceScoreCalculator class.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceMatrixGenerator.GenerateDistanceMatrix(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Generate a symmetric distance matrix from a set of aligned sequences.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceScoreCalculator">
            <summary>
            Implementation of Kimura distance score calculator class.
            
            Kimura distance is additive mutation distance between two *aligned* sequences.
            Given the fractional identity D (percent identity), the mutation distance 
            can be approximated as 1-D. As sequences diverge, there is an increasing 
            probability of multiple mutations at a single site. Kimura correction is 
            used to correct this problem.
            
            The class implements two functions: percent identity calculation, and 
            Kimura correction.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceScoreCalculator.CalculateDistanceScore(Bio.ISequence,Bio.ISequence)">
            <summary>
            Assigns a real number distance score to a pair of aligned sequences
            </summary>
            <param name="sequenceA">aligned sequence</param>
            <param name="sequenceB">aligned sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceScoreCalculator.CalculatePercentIdentity(Bio.ISequence,Bio.ISequence)">
            <summary>
            Calculate percent of identical items between two aligned sequences.
            </summary>
            <param name="sequenceA">aligned sequence</param>
            <param name="sequenceB">aligned sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KimuraDistanceScoreCalculator.KimuraFunction(System.Single)">
             <summary>
             Calculate Kimura score from percent identity
             Detailed can be find in MUSCLE Edgar 2004 paper.
             
             The Kimura measure is defined to be:
            
            		log_e(1 - p - p*p/5)
            
             where p is the fraction of residues that differ, i.e.:
            
            		p = (1 - percent_identity)
            
             This measure is infinite for p = 0.8541 and is considered
             unreliable for p >= 0.75 (according to the ClustalW docs).
             </summary>
             <param name="percentIdentity">float percentIdentity</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator">
            <summary>
            Implemetation of Distance Matrix Generator class via Kmer Counting.
            
            Generates a distance matrix from a set of *unaligned* sequences by
            kmer distance method. Although the method applies to aligned sequences,
            KimuraDistanceMatrixGenerator should be the choice for aligned sequences.
            
            A kmer is a contiguous subsequence of length k, also known as a word or k-tuple.
            Related sequences tend to have more kmers in common than by chance. A distance
            score is assigned to every pair of sequences by comparing the commonness of kmers.
            The frequency of kmers within one sequence is calculated by kmer counting, and 
            the kmers and their frequencies are represented by dictionary due to the sparsity.
            Then the kmer distance between two sequences is defined as the distance of two vectors
            of kmer frequencies in Euclidean space. A variety of distance functions are avaialble. 
            Kmer counting and distance functions are defined in KmerDistanceScoreCalculator class.
            
            A kmer distance matrix generator should use one kmer length and one selected distance
            function for the whole set of unaligned sequences. This is done by passing kmer length
            and distance function name to KmerDistanceScoreCalculator class, where these two are 
            read-only variables.
            
            The generator is an O(N^2) algorithm. It first generates kmer counting for all the 
            sequences in linear time, and calculates pairwise distance score in the double loop.
            The distances will be stored in a symmetric square distance matrix, where rows and 
            cols are sequences, and elements are distance scores. The distance matrix is then used
            to generate binary guide tree by hierarchical clustering method.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator.DistanceMatrix">
            <summary>
            The distance matrix generated by this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator.Name">
            <summary>
            The method name of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator.#ctor(System.Collections.Generic.List{Bio.ISequence},System.Int32,Bio.IAlphabet)">
            <summary>
            Default distance function is Euclidean Distance
            </summary>
            <param name="sequences">a list of unaligned sequences</param>
            <param name="kmerLength">positive integer length of kmer</param>
            <param name="alphabetType">alphabet type: DNA, RNA, or Protein</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator.#ctor(System.Collections.Generic.IList{Bio.ISequence},System.Int32,Bio.IAlphabet,Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes)">
            <summary>
            Construct DistanceMatrix via k-mer counting algorithm
            </summary>
            <param name="sequences">a list of unaligned sequences</param>
            <param name="kmerLength">positive integer length of kmer</param>
            <param name="alphabetType">moleculeType: DNA, RNA or Protein</param>
            <param name="distanceFunctionName">distance function name</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceMatrixGenerator.GenerateDistanceMatrix(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Generate a symmetric distance matrix from a set of unaligned sequences.
            </summary>
            <param name="sequences">a set of unaligned sequences</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes">
            <summary>
            Enum of distance functions that calculate a real number between 
            two kmer counting frequencies. 
            The two kmer frequencies are placed in a Euclidean Space as vectors, 
            and the distance can be defined in several ways enumerated below.
            
            A full list of available functions can be found in paper:
            Alignment-free sequence comparison - a review, Vinga 2002.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes.EuclideanDistance">
            <summary>
            Euclidean distance = sqrt(sum((c1-c2)^2))
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes.PearsonCorrelation">
            <summary>
            Pearson Correlation
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes.CoVariance">
            <summary>
            Co-Variance
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes.ModifiedMUSCLE">
            <summary>
            Modified distance function used in MUSCLE
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionSelector">
            <summary>
            The delegate function of distance function.
            The distance functions assign a real number to two kmer counting frequencies.
            
            Given the same kmer length and the same alphabets, the two kmer counting frequency
            vectors are supposed to be the same in length. Due to the sparsity of the vectors,
            only the occuring kmers are stored in the Dictionary, thus only occuring kmers
            have a float frequency value assigned in the Dictionary, and those not occuring
            kmers have 0 frequency by default.
            
            Some distance functions require the two vectors to be normalized, e.g. Euclidean distance,
            and some do not. Thus CalculateKmerCounting method returns un-normalized counts, and the 
            normalization is done in the distance functions as needed.
            </summary>
            <param name="countsDA">kmer counting dictionary generated by KmerCounting class</param>
            <param name="countsDB">kmer counting dictionary generated by KmerCounting class</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceScoreCalculator">
            <summary>
            Implementation of kmer distance score calculator class that
            calculates the distances between two sequences by kmer counting.
            
            KmerCounting enumerates all the k-mers occuring in the input ISequence and counts 
            how many times it occurs.
            
            Inputs: ISequence and kmer length.
            Methods: slides the k-length window along the sequence and count the how many times 
            each kmer occurs.
            
            Given the sequence length L and alphabet size a, the possible number of kmers is a^k.
            But since the number of windows is L-k+1, the number of occuring k-mer is less than L-k+1.
            
            When a^k >> L-k+1 (which is always the case for short protein, short DNA),
            *Dictionary* is used to store only occuring k-mer and its counts, so as not to
            list all possible a^k kmers.
            
            Kmer counting frequency is calculated once for each sequence. The distance score
            between two sequences are then calculated by comparing the two frequency vectors.
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceScoreCalculator.#ctor(System.Int32,Bio.IAlphabet)">
            <summary>
            Default distance function is Euclidean distance
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceScoreCalculator.#ctor(System.Int32,Bio.IAlphabet,Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes)">
            <summary>
            Construct a calculator with selected distance function
            
            A distance function is assigned to the class and it is 
            read-only for a given set of input sequences.
            </summary>
            <param name="kmerLength">positive integer kmer length</param>
            <param name="alphabetType">molecule type: DNA, RNA or Protein</param>
            <param name="DistanceFunctionName">DistanceFunctionTypes member</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceScoreCalculator.CalculateDistanceScore(System.Collections.Generic.Dictionary{System.String,System.Single},System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Calculate distance score from two kmer counting dictionaries generated
            by CalculateKmerCounting method of this class.
            </summary>
            <param name="countsDA">kmer counting dictionary</param>
            <param name="countsDB">kmer counting dictionary</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.KmerDistanceScoreCalculator.CalculateKmerCounting(Bio.ISequence,System.Int32)">
            <summary>
            Slide the window along the sequence, and calculate kmer counts.
            Occuring kmers are represented as String, and the counts are stored 
            in Dictionary. 
            
            The counts are raw numbers, and will then be converted to frequencies 
            (normalized) in the distance function if needed.
            </summary>
            <param name="seq">input sequence (unaligned)</param>
            <param name="kmerLength">positive integer kmer length</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils">
            <summary>
            Static functions for Multiple Sequence Alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Normalize(System.Single[])">
            <summary>
            Normalize a vector
            so that the summation of the vector is 1
            </summary>
            <param name="counts">float array</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Normalize(System.Int32[])">
            <summary>
            Normalize a vector
            so that summation of the vector is 1
            
            The input int[] is converted to float[]
            </summary>
            <param name="counts">integer array</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Normalize(System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Normalize values in a dictionary
            so that the summation of values is 1.
            </summary>
            <param name="countsD">kmer dictionary</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.FindMaxIndex``1(``0[])">
            <summary>
            Find and return the maximum item's index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Mean(System.Single[])">
            <summary>
            Calculate the mean of a vector
            </summary>
            <param name="vector">a non-empty vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Variance(System.Single[])">
            <summary>
            Calculate variance
            </summary>
            <param name="vector">a non-empty vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.StandardDeviation(System.Single[])">
            <summary>
            Calculate standard deviation
            </summary>
            <param name="vector">a non-empty vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Correlation(System.Single[],System.Single[])">
            <summary>
            Calculate Pearson correlation between two vectors
            </summary>
            <param name="vectorA">the first non-empty vector</param>
            <param name="vectorB">the second non-empty vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.KullbackLeiblerDistance(System.Single[],System.Single[])">
            <summary>
            Calculate Kullback-Leibler distance between two vectors.
            D(vectorA, vectorB) = \sum_i [ vectorA[i] * log2 (vectorA[i] / vectorB[i])]
            </summary>
            <param name="vectorA">the first input vector</param>
            <param name="vectorB">the second input vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.SymmetrizedEntropy(System.Single[],System.Single[])">
            <summary>
            Calculate symmetrized entropy between two vectors.
            D(vectorA, vectorB) = (KullbackLeiblerDistance(vectorA, vectorB) + KullbackLeiblerDistance(vectorB, vectorA)) /2
            </summary>
            <param name="vectorA">the first input vector</param>
            <param name="vectorB">the second input vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.JensenShannonDivergence(System.Single[],System.Single[])">
            <summary>
            Calculate Jensen-Shannon divergence of two vectors.
            D(vectorA, vectorB) = (KullbackLeiblerDistance(vectorA, Average(vectorA, vectorB)) + KullbackLeiblerDistance(vectorB, Average(vectorA, vectorB))) /2
            </summary>
            <param name="vectorA">the first input vector</param>
            <param name="vectorB">the second input vector</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.PairWiseScoreFunction(Bio.ISequence,Bio.ISequence,Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate pairwise score of a pair of aligned sequences.
            The score is the sum over all position score given by the similarity matrix.
            The positions with only indels, e.g. gaps, are discarded. Gaps in the remaining 
            columns are assessed affined score: g + w * e, where g is open penalty, and e
            is extension penalty.
            </summary>
            <param name="sequenceA">aligned sequence</param>
            <param name="sequenceB">aligned sequence</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.MultipleAlignmentScoreFunction(System.Collections.Generic.IList{Bio.ISequence},Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate alignment score of a set of aligned sequences.
            The score is the average over all pairs of sequences of their pairwise alignment score.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.UnAlign(Bio.ISequence)">
            <summary>
            Remove the gaps in a sequence to make it unaligned.
            </summary>
            <param name="alignedSequence">An aligned sequence with gaps</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.UnAlign(System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Remove the gaps in a set of sequences to make them unaligned.
            </summary>
            <param name="alignedSequences">a set of sequences</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.CalculateOffset(Bio.ISequence,Bio.ISequence)">
            <summary>
            Map the position index of query sequence residues in the reference sequence.
            Positive number is the position index; -1 is a gap.
            The two sequences need to have the same set of residues in the same order.
            </summary>
            <param name="sequence">query sequence</param>
            <param name="sequenceRef">reference sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.CalculateAlignmentScoreQ(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            Q score: the number of correctly aligned residue pairs divided by the number of residue pairs in the reference alignment
            </summary>
            <param name="sequences">aligned sequences</param>
            <param name="sequencesRef">reference alignments from benchmark database</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.CalculateAlignmentScoreTC(System.Collections.Generic.IList{Bio.ISequence},System.Collections.Generic.IList{Bio.ISequence})">
            <summary>
            TC score: the number of correctly aligned columns divided by the number of columns in the reference alignment
            </summary>
            <param name="sequences">aligned sequences</param>
            <param name="sequencesRef">reference alignments from benchmark database</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.SetProfileItemSets(Bio.IAlphabet)">
            <summary>
            Given molecule type, construct ItemSet, AmbiguousCharactersMap for Profiles class
            </summary>
            <param name="alphabetType">molecule type: DNA, RNA or Protein</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.CreateIndexArray(System.Int32)">
            <summary>
            Create the indices of an array
            </summary>
            <param name="length">The length of the array</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.QuickSortM(System.Single[],System.Int32[]@,System.Int32,System.Int32)">
            <summary>
            profileAlignment.ProfilesMatrix.ColumnSize
            </summary>
            <param name="inputArray">The array that will be sorted</param>
            <param name="inputIndex">The input array indices</param>
            <param name="begin">Start position</param>
            <param name="end">End position</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.QuickSort(System.Single[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sort by quicksort algorithm
            </summary>
            <param name="inputArray">The array that will be sorted</param>
            <param name="inputIndex">The input array indices</param>
            <param name="begin">Start position</param>
            <param name="end">End position</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MsaUtils.Partition(System.Single[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sub-operation in QuickSort algorithm
            </summary>
            <param name="inputArray">The array that will be sorted</param>
            <param name="inputIndex">The input array indices</param>
            <param name="p">Start position</param>
            <param name="r">End position</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.Sequences">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.MsaScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.NumberOfSequences">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.NumberOfColumns">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.#ctor(System.Collections.Generic.List{Bio.ISequence})">
            <summary>
            
            </summary>
            <param name="sequences"></param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.PairWiseScoreFunction(Bio.ISequence,Bio.ISequence,Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate pairwise score of a pair of aligned sequences.
            The score is the sum over all position score given by the similarity matrix.
            The positions with only indels, e.g. gaps, are discarded. Gaps in the remaining 
            columns are assessed affined score: g + w * e, where g is open penalty, and e
            is extension penalty.
            </summary>
            <param name="sequenceA">aligned sequence</param>
            <param name="sequenceB">aligned sequence</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.MultipleSequenceAlignment.MultipleAlignmentScoreFunction(System.Collections.Generic.List{Bio.ISequence},Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Calculate alignment score of a set of aligned sequences.
            The score is the average over all pairs of sequences of their pairwise alignment score.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative open gap penalty</param>
            <param name="gapExtensionPenalty">negative extension gap penalty</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel">
            <summary>
            Profile-profile Needleman-Wunsch algorithm aligns two profiles with NW algorithm.
            
            A few modifications are made based on pairwise NW algorithm:
            
            When constructing the table, pairwise score is calculated by
            profile-profile function instead of looking up similarity matrix.
            
            Profile-profile function is float, therefore the corresponding matrix
            data types are changed to float.
            
            Details can be found in NeedlemanWunschAligner class
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.#ctor">
            <summary>
            Constructor for NeedlemanWunschProfileAligner Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for NeedlemanWunschProfile Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileScoreFunctionName">enum: profileScoreFunctionName</param>
            <param name="gapOpenPenalty">negative integer</param>
            <param name="gapExtensionPenalty">negative integer</param>
            <param name="numberOfPartitions">positive integer</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.SetBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for NeedlemanWunsch global alignment.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.SetBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerParallel.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback for global alignment.
            </summary>
            <param name="aAlignedOut">Aligned sequences.</param>
            <param name="bAlignedOut"></param>
            <returns>Optimum score.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial">
            <summary>
            Profile-profile Needleman-Wunsch algorithm aligns two profiles with NW algorithm.
            
            A few modifications are made based on pairwise NW algorithm:
            
            When constructing the table, pairwise score is calculated by
            profile-profile function instead of looking up similarity matrix.
            
            Profile-profile function is float, therefore the corresponding matrix
            data types are changed to float.
            
            Details can be found in NeedlemanWunschAligner class
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.#ctor">
            <summary>
            Constructor for NeedlemanWunschProfileAligner Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for NeedlemanWunschProfile Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileScoreFunctionName">enum: profileScoreFunctionName</param>
            <param name="gapOpenPenalty">negative integer</param>
            <param name="gapExtensionPenalty">negative integer</param>
            <param name="numberOfPartitions">positive integer</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetOptimalScoreSimple">
            <summary>
            Sets the score in last cell of _FScore to be the optimal score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetOptimalScoreAffine">
            <summary>
            Sets the score in last cell of _MaxScore to be the optimal score
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for NeedlemanWunsch
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for first row in NeedlemanWunsch global alignment.
            Uses single gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for first column in NeedlemanWunsch global alignment.
            Uses single gap penalty.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for first row in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            Required because method is abstract in DynamicProgrammingPairwise
            To be removed once changes are made in SW, Pairwise algorithms
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for first column in NeedlemanWunsch global alignment.
            Uses affine gap penalty.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.NeedlemanWunschProfileAlignerSerial.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback for global alignment.
            </summary>
            <param name="aAligned">First aligned sequence</param>
            <param name="bAligned">Second aligned sequence</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes">
            <summary>
            This class implements IAlignmentAttributes interface and defines all the 
            parameters required to run PAMSAM algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.Attributes">
            <summary>
            List of Parameters required to run NUCmer
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.attributes">
            <summary>
            List of Parameters required to run NUCmer
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.KmerLength">
            <summary>
            KmerLength
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.DistanceFunctionType">
            <summary>
            Distance Function Type
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.UpdateDistanceMethodsType">
            <summary>
            Update Distance Methods Type
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.ProfileAlignerName">
            <summary>
            Profile Aligner Name
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.ProfileScoreFunctionName">
            <summary>
            Profile Score Function Name
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.SimilarityMatrix">
            <summary>
            Similarity Matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.GapOpenPenalty">
            <summary>
            Gap Open Penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.GapExtendPenalty">
            <summary>
            Gap Extend Penalty
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.NumberOfPartitions">
            <summary>
            Number Of Partitions
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.DegreeOfParallelism">
            <summary>
            Degree Of Parallelism
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PamsamAlignmentAttributes.#ctor">
            <summary>
            Initializes a new instance of the PairwiseAlignmentAttributes class.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner">
             <summary>
             Implementation of modified MUSCLE multiple sequence alignment algorithm.
             Detailed can be found from paper: MUSCLE Edgar 2004.
             
             There are three stages of MUSCLE (in the figure, green, cyan, and purple rectangles). 
             In Stage 1 the unaligned sequences are aligned in a fast and rough manner. Stage 2 and 
             stage 3 refine the alignment and can be iterated. The whole procedure can terminate at 
             the end of any stage and generate multiple sequence alignment (MSA). More iterations 
             yield more accurate MSA.
            
             Stage 1: draft progressive. In this stage the algorithm roughly aligns the sequences to 
                         generate the first multiple sequence alignment (MSA1). Stage 1 can be broken 
                         down into a few steps: a distance matrix (DM1) is first constructed via 
                         'k-mer counting', which will then be clustered into a binary guide tree (T1) 
                         by hierarchical clustering methods, e.g. UPGMA, neighbor-joining, or an even 
                         faster algorithm PartTree. In the guide tree, the leaves are the sequences.  
                         Next step is a general 'progressive alignment', where the sequences at the 
                         leaves of the tree will be aligned first, and then preceded to internal 
                         nodes in a bottom up manner.  A MSA is generated once the root is aligned. 
                         Progressive alignment employs profile-profile pair wise alignment algorithm 
                         (profile is a subset of aligned sequences), such as profile-profile 
                         Needleman-Wunsch algorithm in which a profile-profile function needs to be 
                         defined. 
             State 2: Improved progressive. With MSA1, a more accurate distance matrix can be constructed 
                         with Kimura distance matrix algorithm and the rest steps are the same as in 
                         step 1. Notice that in stage 2, accurate hierarchical clustering algorithms 
                         should be used, so PartTree is not an option here.
             Stage 3: Refinement. In this stage, the edges of guide tree will be  
                         selected in top-down order and broken, resulting in two sub-trees.which will be 
                         aligned separately. The two new MSAs are combined by 
                         profile-profile aligner. This step can be iterated until convergence or maximum 
                         iteration step is reached.
             
             </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.ConsensusResolver">
            <summary>
            Gets or sets the object that will be used to compute the alignment's consensus.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignedSequencesA">
            <summary>
            Aligned sequences of the stage 1 in this class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignedSequencesB">
            <summary>
            Aligned sequences of the stage 2 in this class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignedSequencesC">
            <summary>
            Aligned sequences of the stage 3 in this class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignedSequences">
            <summary>
            The final aligned sequences in this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignmentScore">
            <summary>
            The alignment score of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignmentScoreA">
            <summary>
            The alignment score of this class in stage 1
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignmentScoreB">
            <summary>
            The alignment score of this class in stage 2
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignmentScoreC">
            <summary>
            The alignment score of this class in stage 3
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.Name">
            <summary>
            The alignment method name of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.Description">
            <summary>
            Gets the description of the sequence alignment algorithm
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.SimilarityMatrix">
            <summary>
            Gets or sets similarity matrix for use in alignment algorithms.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.GapOpenCost">
            <summary> 
            Gets or sets gap open penalty for use in alignment algorithms. 
            For alignments using a single gap penalty, this is the gap penalty.
            For alignments using an affine gap, this is the penalty to open a new gap.
            This is a negative number, for example GapOpenCost = -8, not +8.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.GapExtensionCost">
            <summary> 
            Gets or sets gap extension penalty for use in alignment algorithms. 
            Not used for alignments using a single gap penalty.
            For alignments using an affine gap, this is the penalty to
            extend an existing gap.
            This is a negative number, for example GapExtensionCost = -2, not +2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.UseWeights">
            <summary>
            Switch controls whether sequence weights are used
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.NumberOfCores">
            <summary>
            Control the number of cores used in parallel extensions
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.FasterVersion">
            <summary>
            Switch controls whether faster version PAMSAM is used.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.UseStageB">
            <summary>
             Switch controls whether stage 2 is used
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.parallelOption">
            <summary>
            Set parallel options
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.#ctor(System.Collections.Generic.IList{Bio.ISequence},System.Int32,Bio.Algorithms.Alignment.MultipleSequenceAlignment.DistanceFunctionTypes,Bio.Algorithms.Alignment.MultipleSequenceAlignment.UpdateDistanceMethodsTypes,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignerNames,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct an aligner
            </summary>
            <param name="sequences">input sequences</param>
            <param name="kmerLength">positive integer of kmer length</param>
            <param name="distanceFunctionName">enum: distance function name</param>
            <param name="hierarchicalClusteringMethodName">enum: cluster update method</param>
            <param name="profileAlignerMethodName">enum: profile-profile aligner name</param>
            <param name="profileFunctionName">enum: profile-profile distance function</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative gapOpenPenalty</param>
            <param name="gapExtendPenalty">negative gapExtendPenalty</param>
            <param name="numberOfPartitions">the number of partitions in dynamic programming</param>
            <param name="degreeOfParallelism">degree of parallelism option for parallel extension</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.AlignSimple(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            currently not implemented
            </summary>
            <param name="inputSequences"></param>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.PAMSAMMultipleSequenceAligner.Align(System.Collections.Generic.IEnumerable{Bio.ISequence})">
            <summary>
            Performs Stage 1, 2, and 3 as described in class description.
            </summary>
            <param name="inputSequences"></param>
            <returns></returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Performance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Performance.Start">
            <summary>
            DateTime.Now.Ticks;
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Performance.Snapshot(System.String)">
            <summary>
            DateTime.Now.Ticks;
            </summary>
            <param name="activity"></param>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Performance.start">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment">
            <summary>
            Implementation of ProfileAlignment class.
            
            The class is basically the same as SequenceAlignment, with the difference 
            that it also inherits the new members defined in IProfileAlignment interface,
            i.e. new profile class, float alignment score.
            
            With the new Profiles member, some methods need to be modified to 
            accomodate this change.
            
            The class also provides a set of static methods to generate profileAlignment
            from profiles, sequences, and other profileAlignments.
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.Score">
            <summary>
            The alignment score of this alignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.ProfilesMatrix">
            <summary>
            The profiles of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.NumberOfSequences">
            <summary>
            The number of sequences associated with this profile alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.Clear">
            <summary>
            Modified.
            Clears the SequenceAlignment
            Throws exception if SequenceAlignment is read only.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(System.Collections.Generic.ICollection{Bio.ISequence})">
            <summary>
            Generate IProfileAlignment from a set of aligned sequences
            </summary>
            <param name="sequences">aligned sequences</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(System.Collections.Generic.ICollection{Bio.ISequence},System.Single[])">
            <summary>
            Generate IProfileAlignment from a set of aligned sequences
            </summary>
            <param name="sequences">aligned sequences</param>
            <param name="weights">sequence weights</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment)">
            <summary>
            Combine two profileAlignments into one if they are aligned already
            </summary>
            <param name="profileAlignmentA">first profile alignment</param>
            <param name="profileAlignmentB">second profile alignment</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(Bio.ISequence)">
            <summary>
            Generate a profileAlignment from one single sequence
            The set of sequence items of the seq should be the same as 
            'static ItemSet' of the IProfiles.
            </summary>
            <param name="seq">an input sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(Bio.ISequence,System.Single)">
            <summary>
            Generate a profileAlignment from one single sequence
            The set of sequence items of the seq should be the same as 
            'static ItemSet' of the IProfiles.
            </summary>
            <param name="seq">an input sequence</param>
            <param name="weight">sequence weight</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Combine two profileAlignments with alignment operation array from dynamic programming.
            The dynamic programming algorithm returns two arrays containing the alignment operations
            on the two profiles. This method applies the operation information in the two arrays to 
            the two original profiles, and combine them into a new aligned profile, and put into the
            newly generated profileAlignment.
            </summary>
            <param name="profileAlignmentA">first profile alignment</param>
            <param name="profileAlignmentB">second profile alignment</param>
            <param name="aAligned">aligned interger array generated by dynamic programming</param>
            <param name="bAligned">aligned interger array generated by dynamic programming</param>
            <param name="gapCode">the gap integer code defined in dynamic programming class</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.GenerateProfileAlignment(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAlignment,System.Int32[],System.Int32[],System.Int32,System.Single[])">
            <summary>
            Combine two profileAlignments with alignment operation array from dynamic programming.
            The dynamic programming algorithm returns two arrays containing the alignment operations
            on the two profiles. This method applies the operation information in the two arrays to 
            the two original profiles, and combine them into a new aligned profile, and put into the
            newly generated profileAlignment.
            </summary>
            <param name="profileAlignmentA">first profile alignment</param>
            <param name="profileAlignmentB">second profile alignment</param>
            <param name="aAligned">aligned interger array generated by dynamic programming</param>
            <param name="bAligned">aligned interger array generated by dynamic programming</param>
            <param name="gapCode">the gap integer code defined in dynamic programming class</param>
            <param name="weights">the weights of two profileAlignments</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignment.ProfileExtraction(System.Collections.Generic.List{Bio.ISequence},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32}[]@)">
            <summary>
            The profiles of two subsets is extracted from the current multiple alignment.
            Columns containing no residues, i.e. indels only, are discarded.
            
            This method is used in alignment refinement, when the guide tree is cut into two,
            the sequences (leaf nodes) are separated into two subsets. This method generates
            two profileAlignments for the two subtrees by extracting profiles of the two subsets
            of sequences.
            </summary>
            <param name="alignedSequences">a set of aligned sequences</param>
            <param name="sequenceIndicesA">the subset sequence indices of subtree A</param>
            <param name="sequenceIndicesB">the subset sequence indices of subtree B</param>
            <param name="allIndelPositions">the list of all-indel positions that have been removed when constructing</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles">
            <summary>
            Implementation of profiles class.
            
            Profile is a multiple alignment treated as a sequence by 
            regarding each column as an alignable symbol. Thus two sets
            of sequences can be aligned by aligning profiles.
            
            The symbol is a distribution vector, recording the frequencies
            of items in the column.
            
            The class defines such a matrix of profiles, and provides a 
            set of static methods to generate profiles from one single 
            sequence, a set of aligned sequences, or other profiles.
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.ItemSet">
            <summary>
            The column vector is a distribution vector of sequence item 
            frequencies. The sequence item order is kept in this ItemSet
            dictionary, so that the profile vectors are consistent for a 
            certain set of sequences.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.ItemSetSmallInverted">
            <summary>
            Similar to item set but will contain only the uppercase charectors.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.AmbiguousCharactersMap">
            <summary>
            Map ambiguous a character to the list of original characters.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.NumberOfBasicCharacters">
            <summary>
            The number of basic characters
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.RowSize">
            <summary>
            The row dimension of profile matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.ColumnSize">
            <summary>
            The column dimension of profile matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.ProfilesMatrix">
            <summary>
            The profiles of this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.Item(System.Int32)">
            <summary>
            Access column vector (profile)
            </summary>
            <param name="col">zero-based column index</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.Clear">
            <summary>
            Clear profiles.
            Once the profiles of two children nodes are aligned in the tree,
            the aligned profiles is assigned to the parent node, then the profiles
            of the children nodes can be cleared.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.#ctor">
            <summary>
            Construction with empty profiles
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.#ctor(System.Int32,System.Int32)">
            <summary>
            Allocate space in memory
            </summary>
            <param name="rowSize">zero-based row index</param>
            <param name="colSize">zero-based col index</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles)">
            <summary>
            Copy from an existing profiles
            </summary>
            <param name="p">an existing profile class</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(Bio.ISequence)">
            <summary>
            Generate profiles from one single sequence
            The set of sequence items of the seq should be the same as 
            'static ItemSet' of this class.
            </summary>
            <param name="seq">an input sequence</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(Bio.ISequence,System.Single)">
            <summary>
            Generate profiles from one single sequence
            The set of sequence items of the seq should be the same as 
            'static ItemSet' of this class.
            </summary>
            <param name="seq">an input sequence</param>
            <param name="weight">sequence weight</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(System.Collections.Generic.ICollection{Bio.ISequence})">
            <summary>
            Generate IProfiles from a set of aligned sequences
            </summary>
            <param name="sequences">a set of aligned sequences</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(System.Collections.Generic.ICollection{Bio.ISequence},System.Single[])">
            <summary>
            Generate IProfiles from a set of aligned sequences
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="weights">sequence weights</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(System.Collections.Generic.List{Bio.ISequence},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Generate IProfiles from a subset of aligned sequences.
            In the subset of sequences, those columns containing no residues, 
            i.e. indels only, are discarded.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="sequenceIndices">the subset indices of the aligned sequences</param>
            <param name="allIndelPositions">the list of all-indel positions that have been removed when constructing</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(System.Collections.Generic.List{Bio.ISequence},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32}@,System.Single[])">
            <summary>
            Generate IProfiles from a subset of aligned sequences.
            In the subset of sequences, those columns containing no residues, 
            i.e. indels only, are discarded.
            </summary>
            <param name="sequences">a set of aligned sequences</param>
            <param name="sequenceIndices">the subset indices of the aligned sequences</param>
            <param name="allIndelPositions">the list of all-indel positions that have been removed when constructing</param>
            <param name="weights">sequence weights</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,System.Int32,System.Int32)">
            <summary>
            Combine two profiles into one.
            The frequencies in the two profiles are weighted by the number of sequences.
            The new frequencies are defined as:
            (frequencyA * numberOfSequenceA + frequencyB * numberOfSequenceB) / (numberOfSequenceA + numberOfSequenceB)
            </summary>
            <param name="profileA">first profile alignment</param>
            <param name="profileB">second profile alignment</param>
            <param name="numberOfSequencesA">the number of sequences in the first profile</param>
            <param name="numberOfSequencesB">the number of sequences in the second profile</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Combine two profiles with alignment array results from dynamic programming algorithm.
            The dynamic programming algorithm returns two arrays containing the alignment operations
            on the two profiles. This method applies the operation information in the two arrays to 
            the two original profiles, and combine them into a new aligned profile.
            </summary>
            <param name="profileA">first profile</param>
            <param name="profileB">second profile</param>
            <param name="numberOfSequencesA">the number of sequences in the first profile</param>
            <param name="numberOfSequencesB">the number of sequences in the second profile</param>
            <param name="aAligned">aligned interger array generated by dynamic programming</param>
            <param name="bAligned">aligned interger array generated by dynamic programming</param>
            <param name="gapCode">the gap integer code defined in dynamic programming class</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Profiles.GenerateProfiles(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfiles,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Single[])">
            <summary>
            Combine two profiles with alignment array results from dynamic programming algorithm.
            The dynamic programming algorithm returns two arrays containing the alignment operations
            on the two profiles. This method applies the operation information in the two arrays to 
            the two original profiles, and combine them into a new aligned profile.
            </summary>
            <param name="profileA">first profile</param>
            <param name="profileB">second profile</param>
            <param name="numberOfSequencesA">the number of sequences in the first profile</param>
            <param name="numberOfSequencesB">the number of sequences in the second profile</param>
            <param name="aAligned">aligned interger array generated by dynamic programming</param>
            <param name="bAligned">aligned interger array generated by dynamic programming</param>
            <param name="gapCode">the gap integer code defined in dynamic programming class</param>
            <param name="weights">the weights of two profiles</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionSelector">
            <summary>
            The delegate function of profile-profile score function.
            The function takes two profile vectors, and calculate the distance score.
            
            The two profile vectors should be normalized (by definition) and same in size.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileIndexA">the first profile vector (normalized)</param>
            <param name="profileIndexB">the second profile vector (normalized)</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.CachingFunctionSelector">
            <summary>
            The delegate function of cashing function.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileAlignmentA">profile alignment</param>
            <param name="profileAlignmentB">profile alignment</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames">
            <summary>
            The enum of profile-profile score function
            a complete list can be found from paper:
            A comprarison of scoring functions for protein sequence
            profile alignment, Edgar 2003.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.InnerProduct">
            <summary>
            Inner-profuct of two observed profile vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.InnerProductFast">
            <summary>
            Fast Version Inner-profuct of two observed profile vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedInnerProduct">
            <summary>
            Weighted inner-profuct by similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedInnerProductFast">
            <summary>
            Fast Version Weighted inner-profuct by similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedInnerProductCached">
            <summary>
            Cached Version Weighted inner-profuct by similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedInnerProductShifted">
            <summary>
            Weighted inner-profuct by shifted similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedInnerProductShiftedFast">
            <summary>
            Fast Version Weighted inner-profuct by shifted similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.PearsonCorrelation">
            <summary>
            Correlation of observation vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedEuclideanDistance">
            <summary>
            Weighted Euclidean distance of observation vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.WeightedEuclideanDistanceFast">
            <summary>
            Fast Version Weighted Euclidean distance of observation vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.LogExponentialInnerProduct">
            <summary>
            Log of Weighted inner-product by exponential of similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.LogExponentialInnerProductFast">
            <summary>
            Fast Version Log of Weighted inner-product by exponential of similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.LogExponentialInnerProductShifted">
            <summary>
            Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.LogExponentialInnerProductShiftedFast">
            <summary>
            Fast Version Log of Weighted inner-product by exponential of shifted similarity matrix
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.SymmetrizedEntropy">
            <summary>
            Symmetrized entropy of observation vectors
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames.JensenShannonDivergence">
            <summary>
            Jensen-Shannon divergence of observation vectors
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner">
            <summary>
            Implementation of Progressive Aligner (PA) class.
            
            PA follows the binary guide tree (generated by Hierarchical Clustering algorithm)
            in a prefix order (children before parents).
            
            It starts from the closest pair of sequences of leaves, proceeds to parent nodes,
            and terminates when the root is aligned. A multiple sequence alignment (MSA) is 
            then generated. The tree node alignment order is the same as they are clustered (in
            the 'Nodes' list).
            
            The sequences in the tree leaves are converted to profiles so that the alignment of
            leaves and internal nodes are done by profile-profile pair-wise alignement algorithm.
            When aligning two children nodes in the tree, a profile of the alignment is generated 
            and assigned to the parent node. The alignment operation on the children nodes is 
            recorded into eStrings and assigned to the children nodes, so that the sequence data 
            is not modified until the whole tree is aligned. Then the alignment operation of each
            leaf sequence is applied by applying eStrings of the nodes from the leaf node to the 
            root alone the tree path.
            
            Profile-profile alignment is done by ProfileAligner class. Same as pairwise aligner,
            profile-profile aligner also requires the definition of gap panelty, score of two 
            symbol (profile vector in this case, instead of Similarity Matrix).
            
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner.AlignedSequences">
            <summary>
            The aligned sequences in this class
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner.Name">
            <summary>
            The name of this progressive aligner.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileAlignerNames,Bio.SimilarityMatrices.SimilarityMatrix,System.Int32,System.Int32)">
            <summary>
            Construct a progressive aligner
            </summary>
            <param name="profileAlignerName">ProfileAlignerNames member</param>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="gapOpenPenalty">negative gapOpenPenalty</param>
            <param name="gapExtendPenalty">negative gapExtendPenalty</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.IProfileAligner)">
            <summary>
            Construct a progressive aligner with a default profile aligner
            </summary>
            <param name="profileAligner">profile aligner interface that aligns two profiles</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProgressiveAligner.Align(System.Collections.Generic.IList{Bio.ISequence},Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree)">
            <summary>
            Main pregressive alignment algorithm aligns a set of sequences guided by
            a binary tree. 
            </summary>
            <param name="sequences">input sequences</param>
            <param name="tree">a binary guide tree</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.KimuraDistanceMatrixGeneratorName">
            <summary>
              Looks up a localized string similar to Kimura distance matrix generator.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.KmerDistanceMatrixGeneratorName">
            <summary>
              Looks up a localized string similar to Kmer counting distance matrix generator.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.MuscleMultipleAlignmentMethodName">
            <summary>
              Looks up a localized string similar to MUSCLE multiple sequence alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.NeedlemanWunschProfileAlignerName">
            <summary>
              Looks up a localized string similar to Needleman-Wunsch profile aligner.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.PairwiseScoreDistanceMatrixGeneratorName">
            <summary>
              Looks up a localized string similar to Pairwise Score distance matrix generator.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.ProgressiveAlignerName">
            <summary>
              Looks up a localized string similar to Progressive alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.READ_ONLY_COLLECTION_MESSAGE">
            <summary>
              Looks up a localized string similar to Cannot modify a read-only collection..
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.Resource.SmithWatermanProfileAlignerName">
            <summary>
              Looks up a localized string similar to Smith-Waterman profile aligner.
            </summary>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment">
            <summary>
            A simple implementation of ISequenceAlignment that stores the 
            results as new sequences
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.#ctor">
            <summary>
            Constructs an empty SequenceAlignment
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Sequences">
            <summary>
            A list of the (usually modified) output sequences, in the same order
            that the inputs were passed to the alignment algorithm.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Consensus">
            <summary>
            A consensus sequence representing the alignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Item(System.Int32)">
            <summary>
            Returns the ith sequence in the alignment.
            </summary>
            <param name="iSequence">The index.</param>
            <returns>The sequence.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.AddSequence(Bio.ISequence)">
            <summary>
            Add a new sequence to the end of the sequence collection.
            </summary>
            <param name="sequence">The sequence to add.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Score">
            <summary>
            The score for the alignment. Higher scores mean better alignments.
            The score is determined by the alignment algorithm used.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Offsets">
            <summary>
            Offset is the starting position of alignment of sequence1
            with respect to sequence2.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Documentation">
            <summary>
            The Documentation object is intended for tracking the history, provenance,
            and experimental context of a sequence. The user can adopt any desired
            convention for use of this object.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Add(Bio.ISequence)">
            <summary>
            Adds an ISequence to the list of sequences in the SequenceAlignment.
            Throws exception if SequenceAlignment is read only.
            </summary>
            <param name="item">ISequence to add.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Clear">
            <summary>
            Clears the SequenceAlignment
            Throws exception if SequenceAlignment is read only.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Contains(Bio.ISequence)">
            <summary>
            Returns true if the SequenceAlignment contains the sequence in the
            list of sequences. (The consensus sequence is not checked.) Does not do a deep comparison,
            the input sequence must be exactly the same sequence as the one in the
            SequenceAlignment.
            </summary>
            <param name="item"></param>
            <returns>True if contains item, otherwise returns false.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.CopyTo(Bio.ISequence[],System.Int32)">
            <summary>
            Copies the sequences from the SequenceAlignment into an existing ISequence array.
            </summary>
            <param name="array">Array into which to copy the sequences.</param>
            <param name="arrayIndex">Starting index in array at which to begin the copy.</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Count">
            <summary>
            Number of sequences in the SequenceAlignment.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.IsReadOnly">
            <summary>
            true if SequenceAlignment is read-only, false if data can be changed.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.Remove(Bio.ISequence)">
            <summary>
            Removes item from the list of sequences in the SequenceAlignment.
            Throws exception if SequenceAlignment is read only.
            </summary>
            <param name="item"></param>
            <returns>True if item was removed, false if item was not found.</returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.GetEnumerator">
            <summary>
            Returns an enumerator for the sequences in the SequenceAlignment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the sequences in the SequenceAlignment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceAlignment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for serializing the SequenceAlignment.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceWeighting">
            <summary>
            Implementation of modified CLUSTALW sequence weighting method.
            
            MUSCLE (Edgar 2004) showed that using sequence weights slightly
            improves the accuracy results by 1% on BAliBASE, and there's little
            difference between the alternative schemes. Thus sequence weighting
            is only an option and modified CLUSTALW method is implemented.
            
            The weights are constructed from guide tree. The weights of each 
            internal node is the average (or min, max, depending on the clustering
            method) of the subtree. The weight of each sequence (leave of the tree)
            is the summation of the weights of the edge length through the leave to the root.
            
            The final weights are normalized so that the average weight is 1.
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceWeighting.Weights">
            <summary>
            The weights of this class
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SequenceWeighting.#ctor(Bio.Algorithms.Alignment.MultipleSequenceAlignment.BinaryGuideTree)">
            <summary>
            Calculate sequence weights from the guide tree
            </summary>
            <param name="tree">a binary guide tree</param>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel">
            <summary>
            Profile-profile SmithWaterman algorithm aligns two profiles.
            
            A few modifications are made based on pairwise SW algorithm:
            
            When constructing the table, pairwise score is calculated by
            profile-profile function instead of looking up similarity matrix.
            
            profile-profile function is float, therefore the corresponding matrix
            data types are changed to float.
            
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.#ctor">
            <summary>
            Constructor for SmithWatermanProfile Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for SmithWatermanProfileAligner Aligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileScoreFunctionName">enum: profileScoreFunctionName</param>
            <param name="gapOpenPenalty">negative integer</param>
            <param name="gapExtensionPenalty">negative integer</param>
            <param name="numberOfPartitions">positive integer</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.FillCellSimple(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.FillCellAffine(System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.SetBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for SmithWaterman partial alignment.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.SetBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for SmithWaterman partial alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerParallel.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback for SmithWaterman partial alignment.
            </summary>
            <param name="aAlignedOut">Aligned sequences.</param>
            <param name="bAlignedOut"></param>
            <returns>Optimum score.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial">
            <summary>
            Implements the SmithWaterman algorithm for partial alignment.
            See Chapter 2 in Biological Sequence Analysis; Durbin, Eddy, Krogh and Mitchison; 
            Cambridge Press; 1998.
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial._optScoreCol">
            <summary>
            Column number of cell with optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial._optScoreRow">
            <summary>
            Row number of cell with optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial._optScoreCell">
            <summary>
            Cell number of cell with optimal score
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial._optScore">
            <summary>
            Tracks optimal score for alignment
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.#ctor">
            <summary>
            Constructor for SmithWatermanProfileAligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.#ctor(Bio.SimilarityMatrices.SimilarityMatrix,Bio.Algorithms.Alignment.MultipleSequenceAlignment.ProfileScoreFunctionNames,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for SmithWatermanProfileAligner.
            Sets default similarity matrix, gap penalties, and profile function name.
            Users will typically reset these using parameters specific to their particular sequences and needs.
            </summary>
            <param name="similarityMatrix">similarity matrix</param>
            <param name="profileScoreFunctionName">enum: profileScoreFunctionName</param>
            <param name="gapOpenPenalty">negative integer</param>
            <param name="gapExtensionPenalty">negative integer</param>
            <param name="numberOfPartitions">positive integer</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.FillCellSimple(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.FillCellAffine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills matrix cell specifically for SmithWaterman
            </summary>
            <param name="col">col of cell</param>
            <param name="row">row of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetRowBoundaryConditionSimple">
            <summary>
            Sets F matrix boundary conditions for first row in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetColumnBoundaryConditionSimple(System.Int32,System.Int32)">
            <summary>
            Sets F matrix boundary conditions for first column in SmithWaterman alignment.
            Uses one gap penalty.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetRowBoundaryConditionAffine">
            <summary>
            Sets matrix boundary conditions for first row in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetColumnBoundaryConditionAffine(System.Int32,System.Int32)">
            <summary>
            Sets matrix boundary conditions for first row in SmithWaterman alignment.
            Uses affine gap penalty.
            </summary>
            <param name="col">Column number of cell</param>
            <param name="cell">cell number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.ResetSpecificAlgorithmMemberVariables">
            <summary>
            Resets the members used to track optimum score and cell.
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetOptimalScoreSimple">
            <summary>
            Optimal score updated in FillCellSimple. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.SetOptimalScoreAffine">
            <summary>
            Optimal score updated in FillCellAffine. 
            So nothing to be done here
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SmithWatermanProfileAlignerSerial.Traceback(System.Int32[]@,System.Int32[]@)">
            <summary>
            Performs traceback for SmithWaterman partial alignment.
            </summary>
            <param name="aAligned">First aligned sequence</param>
            <param name="bAligned">Second aligned sequence</param>
            <returns>Optimum score.</returns>
        </member>
        <member name="T:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix">
            <summary>
            Symmetric Distance matrix class: m[i,j] = m[j,i]
            SymmetricDistanceMatrix[i,j] is proportional to the 'evolutionary' distance
            between two sequences, i.e. the higher the value, the more divergent the two
            sequences
            
            Due to the symmetry of the matrix, only the bottom left corner is stored, e.g.
            i less or equal to j, return _DistanceMatrix[i,j]
            i greater than j, return _DistanceMatrix[j,i]
            
            The corner of symmetry matrix is stored in a linear List.
            The 2d index and 1d index are converted back and forth.
            
            </summary>
        </member>
        <member name="F:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix._linearDistanceMatrix">
            <summary>
            The bottom left corner of the matrix is stored in a linear List
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.Dimension">
            <summary>
            The dimension of this matrix
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.NearestNeighbors">
            <summary>
            One-dimension array recording the minimum value row index in each column
            </summary>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.NearestDistances">
            <summary>
            One-dimension array recording the minimum distance in each column
            </summary>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.#ctor(System.Int32)">
            <summary>
            Symmetry matrix: (Dimension x Dimension) square matrix
            stores in linear _LinearDistanceMatrix.
            </summary>
            <param name="dimension">positive integer</param>
        </member>
        <member name="P:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Convert 2d matrix to 1d linear List
            Take advantage of symmetry matrix that only left bottom  corner is stored.
            </summary>
            <param name="row">zero-based row index</param>
            <param name="col">zero-based column index</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.Summation(System.Int32,System.Int32)">
            <summary>
            Function to convert the row/col number (whichever is bigger) to linear index
            </summary>
            <param name="n">the dimension of the matrix</param>
            <param name="current">current row/col number</param>
        </member>
        <member name="M:Bio.Algorithms.Alignment.MultipleSequenceAlignment.SymmetricDistanceMatrix.UpdateColumnNearestVectors(System.Int32)">
            <summary>
            Update NearestNeighbors[col] and NearestDistances[col]
            </summary>
            <param name="col">zero-based column index</param>
        </member>
    </members>
</doc>
